// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve accounting contact
	// (GET /AccountingContact)
	GetAccountingContact(ctx echo.Context, params GetAccountingContactParams) error
	// Create a new accounting contact
	// (POST /AccountingContact)
	CreateAccountingContact(ctx echo.Context) error
	// Deletes an accounting contact
	// (DELETE /AccountingContact/{accountingContactId})
	DeleteAccountingContact(ctx echo.Context, accountingContactId int) error
	// Find accounting contact by ID
	// (GET /AccountingContact/{accountingContactId})
	GetAccountingContactById(ctx echo.Context, accountingContactId int) error
	// Update an existing accounting contact
	// (PUT /AccountingContact/{accountingContactId})
	UpdateAccountingContact(ctx echo.Context, accountingContactId int) error
	// Retrieve check accounts
	// (GET /CheckAccount)
	GetCheckAccounts(ctx echo.Context) error
	// Create a new check account
	// (POST /CheckAccount)
	CreateCheckAccount(ctx echo.Context) error
	// Create a new clearing account
	// (POST /CheckAccount/Factory/clearingAccount)
	CreateClearingAccount(ctx echo.Context) error
	// Create a new file import account
	// (POST /CheckAccount/Factory/fileImportAccount)
	CreateFileImportAccount(ctx echo.Context) error
	// Deletes a check account
	// (DELETE /CheckAccount/{checkAccountId})
	DeleteCheckAccount(ctx echo.Context, checkAccountId int) error
	// Find check account by ID
	// (GET /CheckAccount/{checkAccountId})
	GetCheckAccountById(ctx echo.Context, checkAccountId int) error
	// Update an existing check account
	// (PUT /CheckAccount/{checkAccountId})
	UpdateCheckAccount(ctx echo.Context, checkAccountId int) error
	// Get the balance at a given date
	// (GET /CheckAccount/{checkAccountId}/getBalanceAtDate)
	GetBalanceAtDate(ctx echo.Context, checkAccountId int, params GetBalanceAtDateParams) error
	// Retrieve transactions
	// (GET /CheckAccountTransaction)
	GetTransactions(ctx echo.Context, params GetTransactionsParams) error
	// Create a new transaction
	// (POST /CheckAccountTransaction)
	CreateTransaction(ctx echo.Context) error
	// Deletes a check account transaction
	// (DELETE /CheckAccountTransaction/{checkAccountTransactionId})
	DeleteCheckAccountTransaction(ctx echo.Context, checkAccountTransactionId int) error
	// Find check account transaction by ID
	// (GET /CheckAccountTransaction/{checkAccountTransactionId})
	GetCheckAccountTransactionById(ctx echo.Context, checkAccountTransactionId int) error
	// Update an existing check account transaction
	// (PUT /CheckAccountTransaction/{checkAccountTransactionId})
	UpdateCheckAccountTransaction(ctx echo.Context, checkAccountTransactionId int) error
	// Enshrine
	// (PUT /CheckAccountTransaction/{checkAccountTransactionId}/enshrine)
	CheckAccountTransactionEnshrine(ctx echo.Context, checkAccountTransactionId int) error
	// Retrieve communication ways
	// (GET /CommunicationWay)
	GetCommunicationWays(ctx echo.Context, params GetCommunicationWaysParams) error
	// Create a new contact communication way
	// (POST /CommunicationWay)
	CreateCommunicationWay(ctx echo.Context) error
	// Deletes a communication way
	// (DELETE /CommunicationWay/{communicationWayId})
	DeleteCommunicationWay(ctx echo.Context, communicationWayId int) error
	// Find communication way by ID
	// (GET /CommunicationWay/{communicationWayId})
	GetCommunicationWayById(ctx echo.Context, communicationWayId int) error
	// Update a existing communication way
	// (PUT /CommunicationWay/{communicationWayId})
	UpdateCommunicationWay(ctx echo.Context, communicationWayId int) error
	// Retrieve communication way keys
	// (GET /CommunicationWayKey)
	GetCommunicationWayKeys(ctx echo.Context) error
	// Retrieve contacts
	// (GET /Contact)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /Contact)
	CreateContact(ctx echo.Context) error
	// Find contacts by custom field value
	// (GET /Contact/Factory/findContactsByCustomFieldValue)
	FindContactsByCustomFieldValue(ctx echo.Context, params FindContactsByCustomFieldValueParams) error
	// Get next free customer number
	// (GET /Contact/Factory/getNextCustomerNumber)
	GetNextCustomerNumber(ctx echo.Context) error
	// Check if a customer number is available
	// (GET /Contact/Mapper/checkCustomerNumberAvailability)
	ContactCustomerNumberAvailabilityCheck(ctx echo.Context, params ContactCustomerNumberAvailabilityCheckParams) error
	// Deletes a contact
	// (DELETE /Contact/{contactId})
	DeleteContact(ctx echo.Context, contactId int) error
	// Find contact by ID
	// (GET /Contact/{contactId})
	GetContactById(ctx echo.Context, contactId int) error
	// Update a existing contact
	// (PUT /Contact/{contactId})
	UpdateContact(ctx echo.Context, contactId int) error
	// Get number of all items
	// (GET /Contact/{contactId}/getTabsItemCount)
	GetContactTabsItemCountById(ctx echo.Context, contactId int) error
	// Retrieve contact addresses
	// (GET /ContactAddress)
	GetContactAddresses(ctx echo.Context) error
	// Create a new contact address
	// (POST /ContactAddress)
	CreateContactAddress(ctx echo.Context) error
	// Deletes a contact address
	// (DELETE /ContactAddress/{contactAddressId})
	DeleteContactAddress(ctx echo.Context, contactAddressId int) error
	// Find contact address by ID
	// (GET /ContactAddress/{contactAddressId})
	ContactAddressId(ctx echo.Context, contactAddressId int) error
	// update a existing contact address
	// (PUT /ContactAddress/{contactAddressId})
	UpdateContactAddress(ctx echo.Context, contactAddressId int) error
	// Retrieve contact fields
	// (GET /ContactCustomField)
	GetContactFields(ctx echo.Context) error
	// Create contact field
	// (POST /ContactCustomField)
	CreateContactField(ctx echo.Context) error
	// delete a contact field
	// (DELETE /ContactCustomField/{contactCustomFieldId})
	DeleteContactCustomFieldId(ctx echo.Context, contactCustomFieldId int) error
	// Retrieve contact fields
	// (GET /ContactCustomField/{contactCustomFieldId})
	GetContactFieldsById(ctx echo.Context, contactCustomFieldId float32) error
	// Update a contact field
	// (PUT /ContactCustomField/{contactCustomFieldId})
	UpdateContactfield(ctx echo.Context, contactCustomFieldId float32) error
	// Retrieve contact field settings
	// (GET /ContactCustomFieldSetting)
	GetContactFieldSettings(ctx echo.Context) error
	// Create contact field setting
	// (POST /ContactCustomFieldSetting)
	CreateContactFieldSetting(ctx echo.Context) error
	// Deletes a contact field setting
	// (DELETE /ContactCustomFieldSetting/{contactCustomFieldSettingId})
	DeleteContactFieldSetting(ctx echo.Context, contactCustomFieldSettingId int) error
	// Find contact field setting by ID
	// (GET /ContactCustomFieldSetting/{contactCustomFieldSettingId})
	GetContactFieldSettingById(ctx echo.Context, contactCustomFieldSettingId int) error
	// Update contact field setting
	// (PUT /ContactCustomFieldSetting/{contactCustomFieldSettingId})
	UpdateContactFieldSetting(ctx echo.Context, contactCustomFieldSettingId int) error
	// Receive count reference
	// (GET /ContactCustomFieldSetting/{contactCustomFieldSettingId}/getReferenceCount)
	GetReferenceCount(ctx echo.Context, contactCustomFieldSettingId int) error
	// Retrieve CreditNote
	// (GET /CreditNote)
	GetCreditNotes(ctx echo.Context, params GetCreditNotesParams) error
	// Creates a new creditNote from an invoice
	// (POST /CreditNote/Factory/createFromInvoice)
	CreateCreditNoteFromInvoice(ctx echo.Context) error
	// Creates a new creditNote from a voucher
	// (POST /CreditNote/Factory/createFromVoucher)
	CreateCreditNoteFromVoucher(ctx echo.Context) error
	// Create a new creditNote
	// (POST /CreditNote/Factory/saveCreditNote)
	CreatecreditNote(ctx echo.Context) error
	// Deletes an creditNote
	// (DELETE /CreditNote/{creditNoteId})
	DeletecreditNote(ctx echo.Context, creditNoteId int) error
	// Find creditNote by ID
	// (GET /CreditNote/{creditNoteId})
	GetcreditNoteById(ctx echo.Context, creditNoteId int) error
	// Update an existing creditNote
	// (PUT /CreditNote/{creditNoteId})
	UpdatecreditNote(ctx echo.Context, creditNoteId int) error
	// Book a credit note
	// (PUT /CreditNote/{creditNoteId}/bookAmount)
	BookCreditNote(ctx echo.Context, creditNoteId int) error
	// Update an of credit note template
	// (PUT /CreditNote/{creditNoteId}/changeParameter)
	UpdateCreditNoteTemplate(ctx echo.Context, creditNoteId int) error
	// Enshrine
	// (PUT /CreditNote/{creditNoteId}/enshrine)
	CreditNoteEnshrine(ctx echo.Context, creditNoteId int) error
	// Retrieve pdf document of a credit note
	// (GET /CreditNote/{creditNoteId}/getPdf)
	CreditNoteGetPdf(ctx echo.Context, creditNoteId int, params CreditNoteGetPdfParams) error
	// Reset status to draft
	// (PUT /CreditNote/{creditNoteId}/resetToDraft)
	CreditNoteResetToDraft(ctx echo.Context, creditNoteId int) error
	// Reset status to open
	// (PUT /CreditNote/{creditNoteId}/resetToOpen)
	CreditNoteResetToOpen(ctx echo.Context, creditNoteId int) error
	// Mark credit note as sent
	// (PUT /CreditNote/{creditNoteId}/sendBy)
	CreditNoteSendBy(ctx echo.Context, creditNoteId int) error
	// Send credit note by printing
	// (GET /CreditNote/{creditNoteId}/sendByWithRender)
	SendCreditNoteByPrinting(ctx echo.Context, creditNoteId int, params SendCreditNoteByPrintingParams) error
	// Send credit note via email
	// (POST /CreditNote/{creditNoteId}/sendViaEmail)
	SendCreditNoteViaEMail(ctx echo.Context, creditNoteId int) error
	// Retrieve creditNote positions
	// (GET /CreditNotePos)
	GetcreditNotePositions(ctx echo.Context, params GetcreditNotePositionsParams) error
	// Retrieve letterpapers
	// (GET /DocServer/getLetterpapersWithThumb)
	GetLetterpapersWithThumb(ctx echo.Context) error
	// Retrieve templates
	// (GET /DocServer/getTemplatesWithThumb)
	GetTemplates(ctx echo.Context, params GetTemplatesParams) error
	// Export contact
	// (GET /Export/contactListCsv)
	ExportContact(ctx echo.Context, params ExportContactParams) error
	// Export creditNote
	// (GET /Export/creditNoteCsv)
	ExportCreditNote(ctx echo.Context, params ExportCreditNoteParams) error
	// Export datev
	// (GET /Export/datevCSV)
	ExportDatev(ctx echo.Context, params ExportDatevParams) error
	// Export invoice
	// (GET /Export/invoiceCsv)
	ExportInvoice(ctx echo.Context, params ExportInvoiceParams) error
	// Export Invoice as zip
	// (GET /Export/invoiceZip)
	ExportInvoiceZip(ctx echo.Context, params ExportInvoiceZipParams) error
	// Export transaction
	// (GET /Export/transactionsCsv)
	ExportTransactions(ctx echo.Context, params ExportTransactionsParams) error
	// Export voucher as zip
	// (GET /Export/voucherListCsv)
	ExportVoucher(ctx echo.Context, params ExportVoucherParams) error
	// Export voucher zip
	// (GET /Export/voucherZip)
	ExportVoucherZip(ctx echo.Context, params ExportVoucherZipParams) error
	// Retrieve invoices
	// (GET /Invoice)
	GetInvoices(ctx echo.Context, params GetInvoicesParams) error
	// Create invoice from order
	// (POST /Invoice/Factory/createInvoiceFromOrder)
	CreateInvoiceFromOrder(ctx echo.Context) error
	// Create invoice reminder
	// (POST /Invoice/Factory/createInvoiceReminder)
	CreateInvoiceReminder(ctx echo.Context, params CreateInvoiceReminderParams) error
	// Create a new invoice
	// (POST /Invoice/Factory/saveInvoice)
	CreateInvoiceByFactory(ctx echo.Context) error
	// Find invoice by ID
	// (GET /Invoice/{invoiceId})
	GetInvoiceById(ctx echo.Context, invoiceId int) error
	// Book an invoice
	// (PUT /Invoice/{invoiceId}/bookAmount)
	BookInvoice(ctx echo.Context, invoiceId int) error
	// Cancel an invoice / Create cancellation invoice
	// (POST /Invoice/{invoiceId}/cancelInvoice)
	CancelInvoice(ctx echo.Context, invoiceId int) error
	// Update an invoice template
	// (PUT /Invoice/{invoiceId}/changeParameter)
	UpdateInvoiceTemplate(ctx echo.Context, invoiceId int) error
	// Enshrine
	// (PUT /Invoice/{invoiceId}/enshrine)
	InvoiceEnshrine(ctx echo.Context, invoiceId int) error
	// Check if an invoice is already partially paid
	// (GET /Invoice/{invoiceId}/getIsPartiallyPaid)
	GetIsInvoicePartiallyPaid(ctx echo.Context, invoiceId int) error
	// Retrieve pdf document of an invoice
	// (GET /Invoice/{invoiceId}/getPdf)
	InvoiceGetPdf(ctx echo.Context, invoiceId int, params InvoiceGetPdfParams) error
	// Find invoice positions
	// (GET /Invoice/{invoiceId}/getPositions)
	GetInvoicePositionsById(ctx echo.Context, invoiceId int, params GetInvoicePositionsByIdParams) error
	// Retrieve XML of an e-invoice
	// (GET /Invoice/{invoiceId}/getXml)
	InvoiceGetXml(ctx echo.Context, invoiceId int) error
	// Render the pdf document of an invoice
	// (POST /Invoice/{invoiceId}/render)
	InvoiceRender(ctx echo.Context, invoiceId int) error
	// Reset status to draft
	// (PUT /Invoice/{invoiceId}/resetToDraft)
	InvoiceResetToDraft(ctx echo.Context, invoiceId int) error
	// Reset status to open
	// (PUT /Invoice/{invoiceId}/resetToOpen)
	InvoiceResetToOpen(ctx echo.Context, invoiceId int) error
	// Mark invoice as sent
	// (PUT /Invoice/{invoiceId}/sendBy)
	InvoiceSendBy(ctx echo.Context, invoiceId int) error
	// Send invoice via email
	// (POST /Invoice/{invoiceId}/sendViaEmail)
	SendInvoiceViaEMail(ctx echo.Context, invoiceId int) error
	// Retrieve InvoicePos
	// (GET /InvoicePos)
	GetInvoicePos(ctx echo.Context, params GetInvoicePosParams) error
	// Retrieve orders
	// (GET /Order)
	GetOrders(ctx echo.Context, params GetOrdersParams) error
	// Create contract note from order
	// (POST /Order/Factory/createContractNoteFromOrder)
	CreateContractNoteFromOrder(ctx echo.Context, params CreateContractNoteFromOrderParams) error
	// Create packing list from order
	// (POST /Order/Factory/createPackingListFromOrder)
	CreatePackingListFromOrder(ctx echo.Context, params CreatePackingListFromOrderParams) error
	// Create a new order
	// (POST /Order/Factory/saveOrder)
	CreateOrder(ctx echo.Context) error
	// Deletes an order
	// (DELETE /Order/{orderId})
	DeleteOrder(ctx echo.Context, orderId int) error
	// Find order by ID
	// (GET /Order/{orderId})
	GetOrderById(ctx echo.Context, orderId int) error
	// Update an existing order
	// (PUT /Order/{orderId})
	UpdateOrder(ctx echo.Context, orderId int) error
	// Update an order template
	// (PUT /Order/{orderId}/changeParameter)
	UpdateOrderTemplate(ctx echo.Context, orderId int) error
	// Find order discounts
	// (GET /Order/{orderId}/getDiscounts)
	GetDiscounts(ctx echo.Context, orderId int, params GetDiscountsParams) error
	// Retrieve pdf document of an order
	// (GET /Order/{orderId}/getPdf)
	OrderGetPdf(ctx echo.Context, orderId int, params OrderGetPdfParams) error
	// Find order positions
	// (GET /Order/{orderId}/getPositions)
	GetOrderPositionsById(ctx echo.Context, orderId int, params GetOrderPositionsByIdParams) error
	// Find related objects
	// (GET /Order/{orderId}/getRelatedObjects)
	GetRelatedObjects(ctx echo.Context, orderId int, params GetRelatedObjectsParams) error
	// Mark order as sent
	// (PUT /Order/{orderId}/sendBy)
	OrderSendBy(ctx echo.Context, orderId int) error
	// Send order via email
	// (POST /Order/{orderId}/sendViaEmail)
	SendorderViaEMail(ctx echo.Context, orderId int) error
	// Retrieve order positions
	// (GET /OrderPos)
	GetOrderPositions(ctx echo.Context, params GetOrderPositionsParams) error
	// Deletes an order Position
	// (DELETE /OrderPos/{orderPosId})
	DeleteOrderPos(ctx echo.Context, orderPosId int) error
	// Find order position by ID
	// (GET /OrderPos/{orderPosId})
	GetOrderPositionById(ctx echo.Context, orderPosId int) error
	// Update an existing order position
	// (PUT /OrderPos/{orderPosId})
	UpdateOrderPosition(ctx echo.Context, orderPosId int) error
	// Retrieve parts
	// (GET /Part)
	GetParts(ctx echo.Context, params GetPartsParams) error
	// Create a new part
	// (POST /Part)
	CreatePart(ctx echo.Context) error
	// Find part by ID
	// (GET /Part/{partId})
	GetPartById(ctx echo.Context, partId int) error
	// Update an existing part
	// (PUT /Part/{partId})
	UpdatePart(ctx echo.Context, partId int) error
	// Get stock of a part
	// (GET /Part/{partId}/getStock)
	PartGetStock(ctx echo.Context, partId int) error
	// Get guidance by account number
	// (GET /ReceiptGuidance/forAccountNumber)
	ForAccountNumber(ctx echo.Context, params ForAccountNumberParams) error
	// Get all account guides
	// (GET /ReceiptGuidance/forAllAccounts)
	ForAllAccounts(ctx echo.Context) error
	// Get guidance for expense accounts
	// (GET /ReceiptGuidance/forExpense)
	ForExpense(ctx echo.Context) error
	// Get guidance for revenue accounts
	// (GET /ReceiptGuidance/forRevenue)
	ForRevenue(ctx echo.Context) error
	// Get guidance by Tax Rule
	// (GET /ReceiptGuidance/forTaxRule)
	ForTaxRule(ctx echo.Context, params ForTaxRuleParams) error
	// Export contact list
	// (GET /Report/contactlist)
	ReportContact(ctx echo.Context, params ReportContactParams) error
	// Export invoice list
	// (GET /Report/invoicelist)
	ReportInvoice(ctx echo.Context, params ReportInvoiceParams) error
	// Export order list
	// (GET /Report/orderlist)
	ReportOrder(ctx echo.Context, params ReportOrderParams) error
	// Export voucher list
	// (GET /Report/voucherlist)
	ReportVoucher(ctx echo.Context, params ReportVoucherParams) error
	// Update export config
	// (PUT /SevClient/{SevClientId}/updateExportConfig)
	UpdateExportConfig(ctx echo.Context, sevClientId float32) error
	// Retrieve tags
	// (GET /Tag)
	GetTags(ctx echo.Context, params GetTagsParams) error
	// Create a new tag
	// (POST /Tag/Factory/create)
	CreateTag(ctx echo.Context) error
	// Deletes a tag
	// (DELETE /Tag/{tagId})
	DeleteTag(ctx echo.Context, tagId int) error
	// Find tag by ID
	// (GET /Tag/{tagId})
	GetTagById(ctx echo.Context, tagId int) error
	// Update tag
	// (PUT /Tag/{tagId})
	UpdateTag(ctx echo.Context, tagId int) error
	// Retrieve tag relations
	// (GET /TagRelation)
	GetTagRelations(ctx echo.Context) error
	// Retrieve Placeholders
	// (GET /Textparser/fetchDictionaryEntriesByType)
	GetPlaceholder(ctx echo.Context, params GetPlaceholderParams) error
	// Retrieve bookkeeping system version
	// (GET /Tools/bookkeepingSystemVersion)
	BookkeepingSystemVersion(ctx echo.Context) error
	// Retrieve vouchers
	// (GET /Voucher)
	GetVouchers(ctx echo.Context, params GetVouchersParams) error
	// Create a new voucher
	// (POST /Voucher/Factory/saveVoucher)
	VoucherFactorySaveVoucher(ctx echo.Context) error
	// Upload voucher file
	// (POST /Voucher/Factory/uploadTempFile)
	VoucherUploadFile(ctx echo.Context) error
	// Find voucher by ID
	// (GET /Voucher/{voucherId})
	GetVoucherById(ctx echo.Context, voucherId int) error
	// Update an existing voucher
	// (PUT /Voucher/{voucherId})
	UpdateVoucher(ctx echo.Context, voucherId int) error
	// Book a voucher
	// (PUT /Voucher/{voucherId}/bookAmount)
	BookVoucher(ctx echo.Context, voucherId int) error
	// Enshrine
	// (PUT /Voucher/{voucherId}/enshrine)
	VoucherEnshrine(ctx echo.Context, voucherId int) error
	// Reset status to draft
	// (PUT /Voucher/{voucherId}/resetToDraft)
	VoucherResetToDraft(ctx echo.Context, voucherId int) error
	// Reset status to open
	// (PUT /Voucher/{voucherId}/resetToOpen)
	VoucherResetToOpen(ctx echo.Context, voucherId int) error
	// Retrieve voucher positions
	// (GET /VoucherPos)
	GetVoucherPositions(ctx echo.Context, params GetVoucherPositionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccountingContact converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountingContact(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountingContactParams
	// ------------- Optional query parameter "contact[id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "contact[id]", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[id]: %s", err))
	}

	// ------------- Optional query parameter "contact[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "contact[objectName]", ctx.QueryParams(), &params.ContactObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountingContact(ctx, params)
	return err
}

// CreateAccountingContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccountingContact(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccountingContact(ctx)
	return err
}

// DeleteAccountingContact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccountingContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountingContactId" -------------
	var accountingContactId int

	err = runtime.BindStyledParameterWithOptions("simple", "accountingContactId", ctx.Param("accountingContactId"), &accountingContactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountingContactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccountingContact(ctx, accountingContactId)
	return err
}

// GetAccountingContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountingContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountingContactId" -------------
	var accountingContactId int

	err = runtime.BindStyledParameterWithOptions("simple", "accountingContactId", ctx.Param("accountingContactId"), &accountingContactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountingContactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountingContactById(ctx, accountingContactId)
	return err
}

// UpdateAccountingContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccountingContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountingContactId" -------------
	var accountingContactId int

	err = runtime.BindStyledParameterWithOptions("simple", "accountingContactId", ctx.Param("accountingContactId"), &accountingContactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountingContactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccountingContact(ctx, accountingContactId)
	return err
}

// GetCheckAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheckAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheckAccounts(ctx)
	return err
}

// CreateCheckAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCheckAccount(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCheckAccount(ctx)
	return err
}

// CreateClearingAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClearingAccount(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClearingAccount(ctx)
	return err
}

// CreateFileImportAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFileImportAccount(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFileImportAccount(ctx)
	return err
}

// DeleteCheckAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCheckAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountId" -------------
	var checkAccountId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountId", ctx.Param("checkAccountId"), &checkAccountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCheckAccount(ctx, checkAccountId)
	return err
}

// GetCheckAccountById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheckAccountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountId" -------------
	var checkAccountId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountId", ctx.Param("checkAccountId"), &checkAccountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheckAccountById(ctx, checkAccountId)
	return err
}

// UpdateCheckAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCheckAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountId" -------------
	var checkAccountId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountId", ctx.Param("checkAccountId"), &checkAccountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCheckAccount(ctx, checkAccountId)
	return err
}

// GetBalanceAtDate converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalanceAtDate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountId" -------------
	var checkAccountId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountId", ctx.Param("checkAccountId"), &checkAccountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBalanceAtDateParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBalanceAtDate(ctx, checkAccountId, params)
	return err
}

// GetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsParams
	// ------------- Optional query parameter "checkAccount[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "checkAccount[id]", ctx.QueryParams(), &params.CheckAccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccount[id]: %s", err))
	}

	// ------------- Optional query parameter "checkAccount[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "checkAccount[objectName]", ctx.QueryParams(), &params.CheckAccountObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccount[objectName]: %s", err))
	}

	// ------------- Optional query parameter "isBooked" -------------

	err = runtime.BindQueryParameter("form", false, false, "isBooked", ctx.QueryParams(), &params.IsBooked)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter isBooked: %s", err))
	}

	// ------------- Optional query parameter "paymtPurpose" -------------

	err = runtime.BindQueryParameter("form", false, false, "paymtPurpose", ctx.QueryParams(), &params.PaymtPurpose)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paymtPurpose: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "payeePayerName" -------------

	err = runtime.BindQueryParameter("form", false, false, "payeePayerName", ctx.QueryParams(), &params.PayeePayerName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter payeePayerName: %s", err))
	}

	// ------------- Optional query parameter "onlyCredit" -------------

	err = runtime.BindQueryParameter("form", false, false, "onlyCredit", ctx.QueryParams(), &params.OnlyCredit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onlyCredit: %s", err))
	}

	// ------------- Optional query parameter "onlyDebit" -------------

	err = runtime.BindQueryParameter("form", false, false, "onlyDebit", ctx.QueryParams(), &params.OnlyDebit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onlyDebit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactions(ctx, params)
	return err
}

// CreateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTransaction(ctx)
	return err
}

// DeleteCheckAccountTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCheckAccountTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountTransactionId" -------------
	var checkAccountTransactionId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountTransactionId", ctx.Param("checkAccountTransactionId"), &checkAccountTransactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountTransactionId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCheckAccountTransaction(ctx, checkAccountTransactionId)
	return err
}

// GetCheckAccountTransactionById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheckAccountTransactionById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountTransactionId" -------------
	var checkAccountTransactionId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountTransactionId", ctx.Param("checkAccountTransactionId"), &checkAccountTransactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountTransactionId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheckAccountTransactionById(ctx, checkAccountTransactionId)
	return err
}

// UpdateCheckAccountTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCheckAccountTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountTransactionId" -------------
	var checkAccountTransactionId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountTransactionId", ctx.Param("checkAccountTransactionId"), &checkAccountTransactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountTransactionId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCheckAccountTransaction(ctx, checkAccountTransactionId)
	return err
}

// CheckAccountTransactionEnshrine converts echo context to params.
func (w *ServerInterfaceWrapper) CheckAccountTransactionEnshrine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkAccountTransactionId" -------------
	var checkAccountTransactionId int

	err = runtime.BindStyledParameterWithOptions("simple", "checkAccountTransactionId", ctx.Param("checkAccountTransactionId"), &checkAccountTransactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkAccountTransactionId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckAccountTransactionEnshrine(ctx, checkAccountTransactionId)
	return err
}

// GetCommunicationWays converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunicationWays(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommunicationWaysParams
	// ------------- Optional query parameter "contact[id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "contact[id]", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[id]: %s", err))
	}

	// ------------- Optional query parameter "contact[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "contact[objectName]", ctx.QueryParams(), &params.ContactObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[objectName]: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "main" -------------

	err = runtime.BindQueryParameter("form", true, false, "main", ctx.QueryParams(), &params.Main)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter main: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCommunicationWays(ctx, params)
	return err
}

// CreateCommunicationWay converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCommunicationWay(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCommunicationWay(ctx)
	return err
}

// DeleteCommunicationWay converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCommunicationWay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "communicationWayId" -------------
	var communicationWayId int

	err = runtime.BindStyledParameterWithOptions("simple", "communicationWayId", ctx.Param("communicationWayId"), &communicationWayId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter communicationWayId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCommunicationWay(ctx, communicationWayId)
	return err
}

// GetCommunicationWayById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunicationWayById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "communicationWayId" -------------
	var communicationWayId int

	err = runtime.BindStyledParameterWithOptions("simple", "communicationWayId", ctx.Param("communicationWayId"), &communicationWayId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter communicationWayId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCommunicationWayById(ctx, communicationWayId)
	return err
}

// UpdateCommunicationWay converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCommunicationWay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "communicationWayId" -------------
	var communicationWayId int

	err = runtime.BindStyledParameterWithOptions("simple", "communicationWayId", ctx.Param("communicationWayId"), &communicationWayId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter communicationWayId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCommunicationWay(ctx, communicationWayId)
	return err
}

// GetCommunicationWayKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunicationWayKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCommunicationWayKeys(ctx)
	return err
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "depth" -------------

	err = runtime.BindQueryParameter("form", true, false, "depth", ctx.QueryParams(), &params.Depth)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter depth: %s", err))
	}

	// ------------- Optional query parameter "customerNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "customerNumber", ctx.QueryParams(), &params.CustomerNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// FindContactsByCustomFieldValue converts echo context to params.
func (w *ServerInterfaceWrapper) FindContactsByCustomFieldValue(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindContactsByCustomFieldValueParams
	// ------------- Required query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, true, "value", ctx.QueryParams(), &params.Value)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter value: %s", err))
	}

	// ------------- Optional query parameter "customFieldSetting[id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "customFieldSetting[id]", ctx.QueryParams(), &params.CustomFieldSettingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customFieldSetting[id]: %s", err))
	}

	// ------------- Optional query parameter "customFieldSetting[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "customFieldSetting[objectName]", ctx.QueryParams(), &params.CustomFieldSettingObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customFieldSetting[objectName]: %s", err))
	}

	// ------------- Required query parameter "customFieldName" -------------

	err = runtime.BindQueryParameter("form", true, true, "customFieldName", ctx.QueryParams(), &params.CustomFieldName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customFieldName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindContactsByCustomFieldValue(ctx, params)
	return err
}

// GetNextCustomerNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetNextCustomerNumber(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNextCustomerNumber(ctx)
	return err
}

// ContactCustomerNumberAvailabilityCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ContactCustomerNumberAvailabilityCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ContactCustomerNumberAvailabilityCheckParams
	// ------------- Optional query parameter "customerNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "customerNumber", ctx.QueryParams(), &params.CustomerNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ContactCustomerNumberAvailabilityCheck(ctx, params)
	return err
}

// DeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContact(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// GetContactTabsItemCountById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactTabsItemCountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactTabsItemCountById(ctx, contactId)
	return err
}

// GetContactAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactAddresses(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactAddresses(ctx)
	return err
}

// CreateContactAddress converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContactAddress(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContactAddress(ctx)
	return err
}

// DeleteContactAddress converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactAddressId" -------------
	var contactAddressId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactAddressId", ctx.Param("contactAddressId"), &contactAddressId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactAddressId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactAddress(ctx, contactAddressId)
	return err
}

// ContactAddressId converts echo context to params.
func (w *ServerInterfaceWrapper) ContactAddressId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactAddressId" -------------
	var contactAddressId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactAddressId", ctx.Param("contactAddressId"), &contactAddressId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactAddressId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ContactAddressId(ctx, contactAddressId)
	return err
}

// UpdateContactAddress converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContactAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactAddressId" -------------
	var contactAddressId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactAddressId", ctx.Param("contactAddressId"), &contactAddressId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactAddressId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContactAddress(ctx, contactAddressId)
	return err
}

// GetContactFields converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactFields(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactFields(ctx)
	return err
}

// CreateContactField converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContactField(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContactField(ctx)
	return err
}

// DeleteContactCustomFieldId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactCustomFieldId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldId" -------------
	var contactCustomFieldId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldId", ctx.Param("contactCustomFieldId"), &contactCustomFieldId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactCustomFieldId(ctx, contactCustomFieldId)
	return err
}

// GetContactFieldsById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactFieldsById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldId" -------------
	var contactCustomFieldId float32

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldId", ctx.Param("contactCustomFieldId"), &contactCustomFieldId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactFieldsById(ctx, contactCustomFieldId)
	return err
}

// UpdateContactfield converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContactfield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldId" -------------
	var contactCustomFieldId float32

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldId", ctx.Param("contactCustomFieldId"), &contactCustomFieldId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContactfield(ctx, contactCustomFieldId)
	return err
}

// GetContactFieldSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactFieldSettings(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactFieldSettings(ctx)
	return err
}

// CreateContactFieldSetting converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContactFieldSetting(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContactFieldSetting(ctx)
	return err
}

// DeleteContactFieldSetting converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactFieldSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldSettingId" -------------
	var contactCustomFieldSettingId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldSettingId", ctx.Param("contactCustomFieldSettingId"), &contactCustomFieldSettingId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldSettingId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactFieldSetting(ctx, contactCustomFieldSettingId)
	return err
}

// GetContactFieldSettingById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactFieldSettingById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldSettingId" -------------
	var contactCustomFieldSettingId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldSettingId", ctx.Param("contactCustomFieldSettingId"), &contactCustomFieldSettingId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldSettingId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactFieldSettingById(ctx, contactCustomFieldSettingId)
	return err
}

// UpdateContactFieldSetting converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContactFieldSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldSettingId" -------------
	var contactCustomFieldSettingId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldSettingId", ctx.Param("contactCustomFieldSettingId"), &contactCustomFieldSettingId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldSettingId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContactFieldSetting(ctx, contactCustomFieldSettingId)
	return err
}

// GetReferenceCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetReferenceCount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactCustomFieldSettingId" -------------
	var contactCustomFieldSettingId int

	err = runtime.BindStyledParameterWithOptions("simple", "contactCustomFieldSettingId", ctx.Param("contactCustomFieldSettingId"), &contactCustomFieldSettingId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactCustomFieldSettingId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReferenceCount(ctx, contactCustomFieldSettingId)
	return err
}

// GetCreditNotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetCreditNotes(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditNotesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "creditNoteNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "creditNoteNumber", ctx.QueryParams(), &params.CreditNoteNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteNumber: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "contact[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "contact[id]", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[id]: %s", err))
	}

	// ------------- Optional query parameter "contact[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "contact[objectName]", ctx.QueryParams(), &params.ContactObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCreditNotes(ctx, params)
	return err
}

// CreateCreditNoteFromInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCreditNoteFromInvoice(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCreditNoteFromInvoice(ctx)
	return err
}

// CreateCreditNoteFromVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCreditNoteFromVoucher(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCreditNoteFromVoucher(ctx)
	return err
}

// CreatecreditNote converts echo context to params.
func (w *ServerInterfaceWrapper) CreatecreditNote(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatecreditNote(ctx)
	return err
}

// DeletecreditNote converts echo context to params.
func (w *ServerInterfaceWrapper) DeletecreditNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletecreditNote(ctx, creditNoteId)
	return err
}

// GetcreditNoteById converts echo context to params.
func (w *ServerInterfaceWrapper) GetcreditNoteById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetcreditNoteById(ctx, creditNoteId)
	return err
}

// UpdatecreditNote converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatecreditNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatecreditNote(ctx, creditNoteId)
	return err
}

// BookCreditNote converts echo context to params.
func (w *ServerInterfaceWrapper) BookCreditNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BookCreditNote(ctx, creditNoteId)
	return err
}

// UpdateCreditNoteTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCreditNoteTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCreditNoteTemplate(ctx, creditNoteId)
	return err
}

// CreditNoteEnshrine converts echo context to params.
func (w *ServerInterfaceWrapper) CreditNoteEnshrine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreditNoteEnshrine(ctx, creditNoteId)
	return err
}

// CreditNoteGetPdf converts echo context to params.
func (w *ServerInterfaceWrapper) CreditNoteGetPdf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreditNoteGetPdfParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Optional query parameter "preventSendBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "preventSendBy", ctx.QueryParams(), &params.PreventSendBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter preventSendBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreditNoteGetPdf(ctx, creditNoteId, params)
	return err
}

// CreditNoteResetToDraft converts echo context to params.
func (w *ServerInterfaceWrapper) CreditNoteResetToDraft(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreditNoteResetToDraft(ctx, creditNoteId)
	return err
}

// CreditNoteResetToOpen converts echo context to params.
func (w *ServerInterfaceWrapper) CreditNoteResetToOpen(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreditNoteResetToOpen(ctx, creditNoteId)
	return err
}

// CreditNoteSendBy converts echo context to params.
func (w *ServerInterfaceWrapper) CreditNoteSendBy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreditNoteSendBy(ctx, creditNoteId)
	return err
}

// SendCreditNoteByPrinting converts echo context to params.
func (w *ServerInterfaceWrapper) SendCreditNoteByPrinting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SendCreditNoteByPrintingParams
	// ------------- Required query parameter "sendType" -------------

	err = runtime.BindQueryParameter("form", true, true, "sendType", ctx.QueryParams(), &params.SendType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sendType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendCreditNoteByPrinting(ctx, creditNoteId, params)
	return err
}

// SendCreditNoteViaEMail converts echo context to params.
func (w *ServerInterfaceWrapper) SendCreditNoteViaEMail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creditNoteId" -------------
	var creditNoteId int

	err = runtime.BindStyledParameterWithOptions("simple", "creditNoteId", ctx.Param("creditNoteId"), &creditNoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNoteId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendCreditNoteViaEMail(ctx, creditNoteId)
	return err
}

// GetcreditNotePositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetcreditNotePositions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetcreditNotePositionsParams
	// ------------- Optional query parameter "creditNote[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "creditNote[id]", ctx.QueryParams(), &params.CreditNoteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNote[id]: %s", err))
	}

	// ------------- Optional query parameter "creditNote[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "creditNote[objectName]", ctx.QueryParams(), &params.CreditNoteObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditNote[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetcreditNotePositions(ctx, params)
	return err
}

// GetLetterpapersWithThumb converts echo context to params.
func (w *ServerInterfaceWrapper) GetLetterpapersWithThumb(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLetterpapersWithThumb(ctx)
	return err
}

// GetTemplates converts echo context to params.
func (w *ServerInterfaceWrapper) GetTemplates(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTemplatesParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTemplates(ctx, params)
	return err
}

// ExportContact converts echo context to params.
func (w *ServerInterfaceWrapper) ExportContact(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportContactParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportContact(ctx, params)
	return err
}

// ExportCreditNote converts echo context to params.
func (w *ServerInterfaceWrapper) ExportCreditNote(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportCreditNoteParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportCreditNote(ctx, params)
	return err
}

// ExportDatev converts echo context to params.
func (w *ServerInterfaceWrapper) ExportDatev(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportDatevParams
	// ------------- Optional query parameter "Download" -------------

	err = runtime.BindQueryParameter("form", true, false, "Download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Download: %s", err))
	}

	// ------------- Required query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Required query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "withUnpaidDocuments" -------------

	err = runtime.BindQueryParameter("form", true, false, "withUnpaidDocuments", ctx.QueryParams(), &params.WithUnpaidDocuments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter withUnpaidDocuments: %s", err))
	}

	// ------------- Optional query parameter "withEnshrinedDocuments" -------------

	err = runtime.BindQueryParameter("form", true, false, "withEnshrinedDocuments", ctx.QueryParams(), &params.WithEnshrinedDocuments)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter withEnshrinedDocuments: %s", err))
	}

	// ------------- Optional query parameter "enshrine" -------------

	err = runtime.BindQueryParameter("form", true, false, "enshrine", ctx.QueryParams(), &params.Enshrine)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enshrine: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportDatev(ctx, params)
	return err
}

// ExportInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) ExportInvoice(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportInvoiceParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportInvoice(ctx, params)
	return err
}

// ExportInvoiceZip converts echo context to params.
func (w *ServerInterfaceWrapper) ExportInvoiceZip(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportInvoiceZipParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportInvoiceZip(ctx, params)
	return err
}

// ExportTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) ExportTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportTransactionsParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportTransactions(ctx, params)
	return err
}

// ExportVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) ExportVoucher(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportVoucherParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportVoucher(ctx, params)
	return err
}

// ExportVoucherZip converts echo context to params.
func (w *ServerInterfaceWrapper) ExportVoucherZip(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportVoucherZipParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExportVoucherZip(ctx, params)
	return err
}

// GetInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoices(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "invoiceNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "invoiceNumber", ctx.QueryParams(), &params.InvoiceNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceNumber: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "contact[id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "contact[id]", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[id]: %s", err))
	}

	// ------------- Optional query parameter "contact[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "contact[objectName]", ctx.QueryParams(), &params.ContactObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvoices(ctx, params)
	return err
}

// CreateInvoiceFromOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvoiceFromOrder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvoiceFromOrder(ctx)
	return err
}

// CreateInvoiceReminder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvoiceReminder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateInvoiceReminderParams
	// ------------- Required query parameter "invoice[id]" -------------

	err = runtime.BindQueryParameter("form", true, true, "invoice[id]", ctx.QueryParams(), &params.InvoiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoice[id]: %s", err))
	}

	// ------------- Required query parameter "invoice[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, true, "invoice[objectName]", ctx.QueryParams(), &params.InvoiceObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoice[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvoiceReminder(ctx, params)
	return err
}

// CreateInvoiceByFactory converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvoiceByFactory(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvoiceByFactory(ctx)
	return err
}

// GetInvoiceById converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoiceById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvoiceById(ctx, invoiceId)
	return err
}

// BookInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) BookInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BookInvoice(ctx, invoiceId)
	return err
}

// CancelInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) CancelInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CancelInvoice(ctx, invoiceId)
	return err
}

// UpdateInvoiceTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInvoiceTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateInvoiceTemplate(ctx, invoiceId)
	return err
}

// InvoiceEnshrine converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceEnshrine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceEnshrine(ctx, invoiceId)
	return err
}

// GetIsInvoicePartiallyPaid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIsInvoicePartiallyPaid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIsInvoicePartiallyPaid(ctx, invoiceId)
	return err
}

// InvoiceGetPdf converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceGetPdf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params InvoiceGetPdfParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Optional query parameter "preventSendBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "preventSendBy", ctx.QueryParams(), &params.PreventSendBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter preventSendBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceGetPdf(ctx, invoiceId, params)
	return err
}

// GetInvoicePositionsById converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoicePositionsById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicePositionsByIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "embed" -------------

	err = runtime.BindQueryParameter("form", true, false, "embed", ctx.QueryParams(), &params.Embed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter embed: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvoicePositionsById(ctx, invoiceId, params)
	return err
}

// InvoiceGetXml converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceGetXml(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceGetXml(ctx, invoiceId)
	return err
}

// InvoiceRender converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceRender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceRender(ctx, invoiceId)
	return err
}

// InvoiceResetToDraft converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceResetToDraft(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceResetToDraft(ctx, invoiceId)
	return err
}

// InvoiceResetToOpen converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceResetToOpen(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceResetToOpen(ctx, invoiceId)
	return err
}

// InvoiceSendBy converts echo context to params.
func (w *ServerInterfaceWrapper) InvoiceSendBy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InvoiceSendBy(ctx, invoiceId)
	return err
}

// SendInvoiceViaEMail converts echo context to params.
func (w *ServerInterfaceWrapper) SendInvoiceViaEMail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendInvoiceViaEMail(ctx, invoiceId)
	return err
}

// GetInvoicePos converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoicePos(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicePosParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "invoice[id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "invoice[id]", ctx.QueryParams(), &params.InvoiceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoice[id]: %s", err))
	}

	// ------------- Optional query parameter "invoice[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "invoice[objectName]", ctx.QueryParams(), &params.InvoiceObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoice[objectName]: %s", err))
	}

	// ------------- Optional query parameter "part[id]" -------------

	err = runtime.BindQueryParameter("form", true, false, "part[id]", ctx.QueryParams(), &params.PartId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter part[id]: %s", err))
	}

	// ------------- Optional query parameter "part[objectName]" -------------

	err = runtime.BindQueryParameter("form", true, false, "part[objectName]", ctx.QueryParams(), &params.PartObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter part[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvoicePos(ctx, params)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "orderNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderNumber", ctx.QueryParams(), &params.OrderNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderNumber: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "contact[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "contact[id]", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[id]: %s", err))
	}

	// ------------- Optional query parameter "contact[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "contact[objectName]", ctx.QueryParams(), &params.ContactObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrders(ctx, params)
	return err
}

// CreateContractNoteFromOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContractNoteFromOrder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateContractNoteFromOrderParams
	// ------------- Required query parameter "order[id]" -------------

	err = runtime.BindQueryParameter("form", false, true, "order[id]", ctx.QueryParams(), &params.OrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order[id]: %s", err))
	}

	// ------------- Required query parameter "order[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, true, "order[objectName]", ctx.QueryParams(), &params.OrderObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContractNoteFromOrder(ctx, params)
	return err
}

// CreatePackingListFromOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePackingListFromOrder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePackingListFromOrderParams
	// ------------- Required query parameter "order[id]" -------------

	err = runtime.BindQueryParameter("form", false, true, "order[id]", ctx.QueryParams(), &params.OrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order[id]: %s", err))
	}

	// ------------- Required query parameter "order[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, true, "order[objectName]", ctx.QueryParams(), &params.OrderObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePackingListFromOrder(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// DeleteOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrder(ctx, orderId)
	return err
}

// GetOrderById converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderById(ctx, orderId)
	return err
}

// UpdateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrder(ctx, orderId)
	return err
}

// UpdateOrderTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrderTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrderTemplate(ctx, orderId)
	return err
}

// GetDiscounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscounts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscountsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "embed" -------------

	err = runtime.BindQueryParameter("form", true, false, "embed", ctx.QueryParams(), &params.Embed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter embed: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiscounts(ctx, orderId, params)
	return err
}

// OrderGetPdf converts echo context to params.
func (w *ServerInterfaceWrapper) OrderGetPdf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrderGetPdfParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Optional query parameter "preventSendBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "preventSendBy", ctx.QueryParams(), &params.PreventSendBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter preventSendBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderGetPdf(ctx, orderId, params)
	return err
}

// GetOrderPositionsById converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderPositionsById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrderPositionsByIdParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "embed" -------------

	err = runtime.BindQueryParameter("form", true, false, "embed", ctx.QueryParams(), &params.Embed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter embed: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderPositionsById(ctx, orderId, params)
	return err
}

// GetRelatedObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelatedObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelatedObjectsParams
	// ------------- Optional query parameter "includeItself" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeItself", ctx.QueryParams(), &params.IncludeItself)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeItself: %s", err))
	}

	// ------------- Optional query parameter "sortByType" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortByType", ctx.QueryParams(), &params.SortByType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortByType: %s", err))
	}

	// ------------- Optional query parameter "embed" -------------

	err = runtime.BindQueryParameter("form", true, false, "embed", ctx.QueryParams(), &params.Embed)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter embed: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRelatedObjects(ctx, orderId, params)
	return err
}

// OrderSendBy converts echo context to params.
func (w *ServerInterfaceWrapper) OrderSendBy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrderSendBy(ctx, orderId)
	return err
}

// SendorderViaEMail converts echo context to params.
func (w *ServerInterfaceWrapper) SendorderViaEMail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendorderViaEMail(ctx, orderId)
	return err
}

// GetOrderPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderPositions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrderPositionsParams
	// ------------- Optional query parameter "order[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "order[id]", ctx.QueryParams(), &params.OrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order[id]: %s", err))
	}

	// ------------- Optional query parameter "order[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "order[objectName]", ctx.QueryParams(), &params.OrderObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderPositions(ctx, params)
	return err
}

// DeleteOrderPos converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrderPos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderPosId" -------------
	var orderPosId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderPosId", ctx.Param("orderPosId"), &orderPosId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderPosId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrderPos(ctx, orderPosId)
	return err
}

// GetOrderPositionById converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderPositionById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderPosId" -------------
	var orderPosId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderPosId", ctx.Param("orderPosId"), &orderPosId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderPosId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderPositionById(ctx, orderPosId)
	return err
}

// UpdateOrderPosition converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrderPosition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderPosId" -------------
	var orderPosId int

	err = runtime.BindStyledParameterWithOptions("simple", "orderPosId", ctx.Param("orderPosId"), &orderPosId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderPosId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrderPosition(ctx, orderPosId)
	return err
}

// GetParts converts echo context to params.
func (w *ServerInterfaceWrapper) GetParts(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPartsParams
	// ------------- Optional query parameter "partNumber" -------------

	err = runtime.BindQueryParameter("form", false, false, "partNumber", ctx.QueryParams(), &params.PartNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partNumber: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetParts(ctx, params)
	return err
}

// CreatePart converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePart(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePart(ctx)
	return err
}

// GetPartById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPartById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "partId" -------------
	var partId int

	err = runtime.BindStyledParameterWithOptions("simple", "partId", ctx.Param("partId"), &partId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPartById(ctx, partId)
	return err
}

// UpdatePart converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "partId" -------------
	var partId int

	err = runtime.BindStyledParameterWithOptions("simple", "partId", ctx.Param("partId"), &partId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePart(ctx, partId)
	return err
}

// PartGetStock converts echo context to params.
func (w *ServerInterfaceWrapper) PartGetStock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "partId" -------------
	var partId int

	err = runtime.BindStyledParameterWithOptions("simple", "partId", ctx.Param("partId"), &partId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PartGetStock(ctx, partId)
	return err
}

// ForAccountNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ForAccountNumber(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ForAccountNumberParams
	// ------------- Required query parameter "accountNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "accountNumber", ctx.QueryParams(), &params.AccountNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ForAccountNumber(ctx, params)
	return err
}

// ForAllAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) ForAllAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ForAllAccounts(ctx)
	return err
}

// ForExpense converts echo context to params.
func (w *ServerInterfaceWrapper) ForExpense(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ForExpense(ctx)
	return err
}

// ForRevenue converts echo context to params.
func (w *ServerInterfaceWrapper) ForRevenue(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ForRevenue(ctx)
	return err
}

// ForTaxRule converts echo context to params.
func (w *ServerInterfaceWrapper) ForTaxRule(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ForTaxRuleParams
	// ------------- Required query parameter "taxRule" -------------

	err = runtime.BindQueryParameter("form", true, true, "taxRule", ctx.QueryParams(), &params.TaxRule)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taxRule: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ForTaxRule(ctx, params)
	return err
}

// ReportContact converts echo context to params.
func (w *ServerInterfaceWrapper) ReportContact(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReportContactParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReportContact(ctx, params)
	return err
}

// ReportInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) ReportInvoice(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReportInvoiceParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, true, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReportInvoice(ctx, params)
	return err
}

// ReportOrder converts echo context to params.
func (w *ServerInterfaceWrapper) ReportOrder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReportOrderParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "view" -------------

	err = runtime.BindQueryParameter("form", true, true, "view", ctx.QueryParams(), &params.View)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter view: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReportOrder(ctx, params)
	return err
}

// ReportVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) ReportVoucher(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReportVoucherParams
	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", ctx.QueryParams(), &params.Download)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter download: %s", err))
	}

	// ------------- Required query parameter "sevQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "sevQuery", ctx.QueryParams(), &params.SevQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sevQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReportVoucher(ctx, params)
	return err
}

// UpdateExportConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateExportConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "SevClientId" -------------
	var sevClientId float32

	err = runtime.BindStyledParameterWithOptions("simple", "SevClientId", ctx.Param("SevClientId"), &sevClientId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SevClientId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateExportConfig(ctx, sevClientId)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx, params)
	return err
}

// CreateTag converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTag(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTag(ctx)
	return err
}

// DeleteTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId int

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTag(ctx, tagId)
	return err
}

// GetTagById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId int

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagById(ctx, tagId)
	return err
}

// UpdateTag converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId int

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTag(ctx, tagId)
	return err
}

// GetTagRelations converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagRelations(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagRelations(ctx)
	return err
}

// GetPlaceholder converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaceholder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlaceholderParams
	// ------------- Required query parameter "objectName" -------------

	err = runtime.BindQueryParameter("form", true, true, "objectName", ctx.QueryParams(), &params.ObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectName: %s", err))
	}

	// ------------- Optional query parameter "subObjectName" -------------

	err = runtime.BindQueryParameter("form", true, false, "subObjectName", ctx.QueryParams(), &params.SubObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subObjectName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPlaceholder(ctx, params)
	return err
}

// BookkeepingSystemVersion converts echo context to params.
func (w *ServerInterfaceWrapper) BookkeepingSystemVersion(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BookkeepingSystemVersion(ctx)
	return err
}

// GetVouchers converts echo context to params.
func (w *ServerInterfaceWrapper) GetVouchers(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVouchersParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "creditDebit" -------------

	err = runtime.BindQueryParameter("form", true, false, "creditDebit", ctx.QueryParams(), &params.CreditDebit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creditDebit: %s", err))
	}

	// ------------- Optional query parameter "descriptionLike" -------------

	err = runtime.BindQueryParameter("form", true, false, "descriptionLike", ctx.QueryParams(), &params.DescriptionLike)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter descriptionLike: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "contact[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "contact[id]", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[id]: %s", err))
	}

	// ------------- Optional query parameter "contact[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "contact[objectName]", ctx.QueryParams(), &params.ContactObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVouchers(ctx, params)
	return err
}

// VoucherFactorySaveVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) VoucherFactorySaveVoucher(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VoucherFactorySaveVoucher(ctx)
	return err
}

// VoucherUploadFile converts echo context to params.
func (w *ServerInterfaceWrapper) VoucherUploadFile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VoucherUploadFile(ctx)
	return err
}

// GetVoucherById converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoucherById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "voucherId" -------------
	var voucherId int

	err = runtime.BindStyledParameterWithOptions("simple", "voucherId", ctx.Param("voucherId"), &voucherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucherId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVoucherById(ctx, voucherId)
	return err
}

// UpdateVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVoucher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "voucherId" -------------
	var voucherId int

	err = runtime.BindStyledParameterWithOptions("simple", "voucherId", ctx.Param("voucherId"), &voucherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucherId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateVoucher(ctx, voucherId)
	return err
}

// BookVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) BookVoucher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "voucherId" -------------
	var voucherId int

	err = runtime.BindStyledParameterWithOptions("simple", "voucherId", ctx.Param("voucherId"), &voucherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucherId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BookVoucher(ctx, voucherId)
	return err
}

// VoucherEnshrine converts echo context to params.
func (w *ServerInterfaceWrapper) VoucherEnshrine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "voucherId" -------------
	var voucherId int

	err = runtime.BindStyledParameterWithOptions("simple", "voucherId", ctx.Param("voucherId"), &voucherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucherId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VoucherEnshrine(ctx, voucherId)
	return err
}

// VoucherResetToDraft converts echo context to params.
func (w *ServerInterfaceWrapper) VoucherResetToDraft(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "voucherId" -------------
	var voucherId int

	err = runtime.BindStyledParameterWithOptions("simple", "voucherId", ctx.Param("voucherId"), &voucherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucherId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VoucherResetToDraft(ctx, voucherId)
	return err
}

// VoucherResetToOpen converts echo context to params.
func (w *ServerInterfaceWrapper) VoucherResetToOpen(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "voucherId" -------------
	var voucherId int

	err = runtime.BindStyledParameterWithOptions("simple", "voucherId", ctx.Param("voucherId"), &voucherId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucherId: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VoucherResetToOpen(ctx, voucherId)
	return err
}

// GetVoucherPositions converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoucherPositions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoucherPositionsParams
	// ------------- Optional query parameter "voucher[id]" -------------

	err = runtime.BindQueryParameter("form", false, false, "voucher[id]", ctx.QueryParams(), &params.VoucherId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucher[id]: %s", err))
	}

	// ------------- Optional query parameter "voucher[objectName]" -------------

	err = runtime.BindQueryParameter("form", false, false, "voucher[objectName]", ctx.QueryParams(), &params.VoucherObjectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucher[objectName]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVoucherPositions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/AccountingContact", wrapper.GetAccountingContact)
	router.POST(baseURL+"/AccountingContact", wrapper.CreateAccountingContact)
	router.DELETE(baseURL+"/AccountingContact/:accountingContactId", wrapper.DeleteAccountingContact)
	router.GET(baseURL+"/AccountingContact/:accountingContactId", wrapper.GetAccountingContactById)
	router.PUT(baseURL+"/AccountingContact/:accountingContactId", wrapper.UpdateAccountingContact)
	router.GET(baseURL+"/CheckAccount", wrapper.GetCheckAccounts)
	router.POST(baseURL+"/CheckAccount", wrapper.CreateCheckAccount)
	router.POST(baseURL+"/CheckAccount/Factory/clearingAccount", wrapper.CreateClearingAccount)
	router.POST(baseURL+"/CheckAccount/Factory/fileImportAccount", wrapper.CreateFileImportAccount)
	router.DELETE(baseURL+"/CheckAccount/:checkAccountId", wrapper.DeleteCheckAccount)
	router.GET(baseURL+"/CheckAccount/:checkAccountId", wrapper.GetCheckAccountById)
	router.PUT(baseURL+"/CheckAccount/:checkAccountId", wrapper.UpdateCheckAccount)
	router.GET(baseURL+"/CheckAccount/:checkAccountId/getBalanceAtDate", wrapper.GetBalanceAtDate)
	router.GET(baseURL+"/CheckAccountTransaction", wrapper.GetTransactions)
	router.POST(baseURL+"/CheckAccountTransaction", wrapper.CreateTransaction)
	router.DELETE(baseURL+"/CheckAccountTransaction/:checkAccountTransactionId", wrapper.DeleteCheckAccountTransaction)
	router.GET(baseURL+"/CheckAccountTransaction/:checkAccountTransactionId", wrapper.GetCheckAccountTransactionById)
	router.PUT(baseURL+"/CheckAccountTransaction/:checkAccountTransactionId", wrapper.UpdateCheckAccountTransaction)
	router.PUT(baseURL+"/CheckAccountTransaction/:checkAccountTransactionId/enshrine", wrapper.CheckAccountTransactionEnshrine)
	router.GET(baseURL+"/CommunicationWay", wrapper.GetCommunicationWays)
	router.POST(baseURL+"/CommunicationWay", wrapper.CreateCommunicationWay)
	router.DELETE(baseURL+"/CommunicationWay/:communicationWayId", wrapper.DeleteCommunicationWay)
	router.GET(baseURL+"/CommunicationWay/:communicationWayId", wrapper.GetCommunicationWayById)
	router.PUT(baseURL+"/CommunicationWay/:communicationWayId", wrapper.UpdateCommunicationWay)
	router.GET(baseURL+"/CommunicationWayKey", wrapper.GetCommunicationWayKeys)
	router.GET(baseURL+"/Contact", wrapper.GetContacts)
	router.POST(baseURL+"/Contact", wrapper.CreateContact)
	router.GET(baseURL+"/Contact/Factory/findContactsByCustomFieldValue", wrapper.FindContactsByCustomFieldValue)
	router.GET(baseURL+"/Contact/Factory/getNextCustomerNumber", wrapper.GetNextCustomerNumber)
	router.GET(baseURL+"/Contact/Mapper/checkCustomerNumberAvailability", wrapper.ContactCustomerNumberAvailabilityCheck)
	router.DELETE(baseURL+"/Contact/:contactId", wrapper.DeleteContact)
	router.GET(baseURL+"/Contact/:contactId", wrapper.GetContactById)
	router.PUT(baseURL+"/Contact/:contactId", wrapper.UpdateContact)
	router.GET(baseURL+"/Contact/:contactId/getTabsItemCount", wrapper.GetContactTabsItemCountById)
	router.GET(baseURL+"/ContactAddress", wrapper.GetContactAddresses)
	router.POST(baseURL+"/ContactAddress", wrapper.CreateContactAddress)
	router.DELETE(baseURL+"/ContactAddress/:contactAddressId", wrapper.DeleteContactAddress)
	router.GET(baseURL+"/ContactAddress/:contactAddressId", wrapper.ContactAddressId)
	router.PUT(baseURL+"/ContactAddress/:contactAddressId", wrapper.UpdateContactAddress)
	router.GET(baseURL+"/ContactCustomField", wrapper.GetContactFields)
	router.POST(baseURL+"/ContactCustomField", wrapper.CreateContactField)
	router.DELETE(baseURL+"/ContactCustomField/:contactCustomFieldId", wrapper.DeleteContactCustomFieldId)
	router.GET(baseURL+"/ContactCustomField/:contactCustomFieldId", wrapper.GetContactFieldsById)
	router.PUT(baseURL+"/ContactCustomField/:contactCustomFieldId", wrapper.UpdateContactfield)
	router.GET(baseURL+"/ContactCustomFieldSetting", wrapper.GetContactFieldSettings)
	router.POST(baseURL+"/ContactCustomFieldSetting", wrapper.CreateContactFieldSetting)
	router.DELETE(baseURL+"/ContactCustomFieldSetting/:contactCustomFieldSettingId", wrapper.DeleteContactFieldSetting)
	router.GET(baseURL+"/ContactCustomFieldSetting/:contactCustomFieldSettingId", wrapper.GetContactFieldSettingById)
	router.PUT(baseURL+"/ContactCustomFieldSetting/:contactCustomFieldSettingId", wrapper.UpdateContactFieldSetting)
	router.GET(baseURL+"/ContactCustomFieldSetting/:contactCustomFieldSettingId/getReferenceCount", wrapper.GetReferenceCount)
	router.GET(baseURL+"/CreditNote", wrapper.GetCreditNotes)
	router.POST(baseURL+"/CreditNote/Factory/createFromInvoice", wrapper.CreateCreditNoteFromInvoice)
	router.POST(baseURL+"/CreditNote/Factory/createFromVoucher", wrapper.CreateCreditNoteFromVoucher)
	router.POST(baseURL+"/CreditNote/Factory/saveCreditNote", wrapper.CreatecreditNote)
	router.DELETE(baseURL+"/CreditNote/:creditNoteId", wrapper.DeletecreditNote)
	router.GET(baseURL+"/CreditNote/:creditNoteId", wrapper.GetcreditNoteById)
	router.PUT(baseURL+"/CreditNote/:creditNoteId", wrapper.UpdatecreditNote)
	router.PUT(baseURL+"/CreditNote/:creditNoteId/bookAmount", wrapper.BookCreditNote)
	router.PUT(baseURL+"/CreditNote/:creditNoteId/changeParameter", wrapper.UpdateCreditNoteTemplate)
	router.PUT(baseURL+"/CreditNote/:creditNoteId/enshrine", wrapper.CreditNoteEnshrine)
	router.GET(baseURL+"/CreditNote/:creditNoteId/getPdf", wrapper.CreditNoteGetPdf)
	router.PUT(baseURL+"/CreditNote/:creditNoteId/resetToDraft", wrapper.CreditNoteResetToDraft)
	router.PUT(baseURL+"/CreditNote/:creditNoteId/resetToOpen", wrapper.CreditNoteResetToOpen)
	router.PUT(baseURL+"/CreditNote/:creditNoteId/sendBy", wrapper.CreditNoteSendBy)
	router.GET(baseURL+"/CreditNote/:creditNoteId/sendByWithRender", wrapper.SendCreditNoteByPrinting)
	router.POST(baseURL+"/CreditNote/:creditNoteId/sendViaEmail", wrapper.SendCreditNoteViaEMail)
	router.GET(baseURL+"/CreditNotePos", wrapper.GetcreditNotePositions)
	router.GET(baseURL+"/DocServer/getLetterpapersWithThumb", wrapper.GetLetterpapersWithThumb)
	router.GET(baseURL+"/DocServer/getTemplatesWithThumb", wrapper.GetTemplates)
	router.GET(baseURL+"/Export/contactListCsv", wrapper.ExportContact)
	router.GET(baseURL+"/Export/creditNoteCsv", wrapper.ExportCreditNote)
	router.GET(baseURL+"/Export/datevCSV", wrapper.ExportDatev)
	router.GET(baseURL+"/Export/invoiceCsv", wrapper.ExportInvoice)
	router.GET(baseURL+"/Export/invoiceZip", wrapper.ExportInvoiceZip)
	router.GET(baseURL+"/Export/transactionsCsv", wrapper.ExportTransactions)
	router.GET(baseURL+"/Export/voucherListCsv", wrapper.ExportVoucher)
	router.GET(baseURL+"/Export/voucherZip", wrapper.ExportVoucherZip)
	router.GET(baseURL+"/Invoice", wrapper.GetInvoices)
	router.POST(baseURL+"/Invoice/Factory/createInvoiceFromOrder", wrapper.CreateInvoiceFromOrder)
	router.POST(baseURL+"/Invoice/Factory/createInvoiceReminder", wrapper.CreateInvoiceReminder)
	router.POST(baseURL+"/Invoice/Factory/saveInvoice", wrapper.CreateInvoiceByFactory)
	router.GET(baseURL+"/Invoice/:invoiceId", wrapper.GetInvoiceById)
	router.PUT(baseURL+"/Invoice/:invoiceId/bookAmount", wrapper.BookInvoice)
	router.POST(baseURL+"/Invoice/:invoiceId/cancelInvoice", wrapper.CancelInvoice)
	router.PUT(baseURL+"/Invoice/:invoiceId/changeParameter", wrapper.UpdateInvoiceTemplate)
	router.PUT(baseURL+"/Invoice/:invoiceId/enshrine", wrapper.InvoiceEnshrine)
	router.GET(baseURL+"/Invoice/:invoiceId/getIsPartiallyPaid", wrapper.GetIsInvoicePartiallyPaid)
	router.GET(baseURL+"/Invoice/:invoiceId/getPdf", wrapper.InvoiceGetPdf)
	router.GET(baseURL+"/Invoice/:invoiceId/getPositions", wrapper.GetInvoicePositionsById)
	router.GET(baseURL+"/Invoice/:invoiceId/getXml", wrapper.InvoiceGetXml)
	router.POST(baseURL+"/Invoice/:invoiceId/render", wrapper.InvoiceRender)
	router.PUT(baseURL+"/Invoice/:invoiceId/resetToDraft", wrapper.InvoiceResetToDraft)
	router.PUT(baseURL+"/Invoice/:invoiceId/resetToOpen", wrapper.InvoiceResetToOpen)
	router.PUT(baseURL+"/Invoice/:invoiceId/sendBy", wrapper.InvoiceSendBy)
	router.POST(baseURL+"/Invoice/:invoiceId/sendViaEmail", wrapper.SendInvoiceViaEMail)
	router.GET(baseURL+"/InvoicePos", wrapper.GetInvoicePos)
	router.GET(baseURL+"/Order", wrapper.GetOrders)
	router.POST(baseURL+"/Order/Factory/createContractNoteFromOrder", wrapper.CreateContractNoteFromOrder)
	router.POST(baseURL+"/Order/Factory/createPackingListFromOrder", wrapper.CreatePackingListFromOrder)
	router.POST(baseURL+"/Order/Factory/saveOrder", wrapper.CreateOrder)
	router.DELETE(baseURL+"/Order/:orderId", wrapper.DeleteOrder)
	router.GET(baseURL+"/Order/:orderId", wrapper.GetOrderById)
	router.PUT(baseURL+"/Order/:orderId", wrapper.UpdateOrder)
	router.PUT(baseURL+"/Order/:orderId/changeParameter", wrapper.UpdateOrderTemplate)
	router.GET(baseURL+"/Order/:orderId/getDiscounts", wrapper.GetDiscounts)
	router.GET(baseURL+"/Order/:orderId/getPdf", wrapper.OrderGetPdf)
	router.GET(baseURL+"/Order/:orderId/getPositions", wrapper.GetOrderPositionsById)
	router.GET(baseURL+"/Order/:orderId/getRelatedObjects", wrapper.GetRelatedObjects)
	router.PUT(baseURL+"/Order/:orderId/sendBy", wrapper.OrderSendBy)
	router.POST(baseURL+"/Order/:orderId/sendViaEmail", wrapper.SendorderViaEMail)
	router.GET(baseURL+"/OrderPos", wrapper.GetOrderPositions)
	router.DELETE(baseURL+"/OrderPos/:orderPosId", wrapper.DeleteOrderPos)
	router.GET(baseURL+"/OrderPos/:orderPosId", wrapper.GetOrderPositionById)
	router.PUT(baseURL+"/OrderPos/:orderPosId", wrapper.UpdateOrderPosition)
	router.GET(baseURL+"/Part", wrapper.GetParts)
	router.POST(baseURL+"/Part", wrapper.CreatePart)
	router.GET(baseURL+"/Part/:partId", wrapper.GetPartById)
	router.PUT(baseURL+"/Part/:partId", wrapper.UpdatePart)
	router.GET(baseURL+"/Part/:partId/getStock", wrapper.PartGetStock)
	router.GET(baseURL+"/ReceiptGuidance/forAccountNumber", wrapper.ForAccountNumber)
	router.GET(baseURL+"/ReceiptGuidance/forAllAccounts", wrapper.ForAllAccounts)
	router.GET(baseURL+"/ReceiptGuidance/forExpense", wrapper.ForExpense)
	router.GET(baseURL+"/ReceiptGuidance/forRevenue", wrapper.ForRevenue)
	router.GET(baseURL+"/ReceiptGuidance/forTaxRule", wrapper.ForTaxRule)
	router.GET(baseURL+"/Report/contactlist", wrapper.ReportContact)
	router.GET(baseURL+"/Report/invoicelist", wrapper.ReportInvoice)
	router.GET(baseURL+"/Report/orderlist", wrapper.ReportOrder)
	router.GET(baseURL+"/Report/voucherlist", wrapper.ReportVoucher)
	router.PUT(baseURL+"/SevClient/:SevClientId/updateExportConfig", wrapper.UpdateExportConfig)
	router.GET(baseURL+"/Tag", wrapper.GetTags)
	router.POST(baseURL+"/Tag/Factory/create", wrapper.CreateTag)
	router.DELETE(baseURL+"/Tag/:tagId", wrapper.DeleteTag)
	router.GET(baseURL+"/Tag/:tagId", wrapper.GetTagById)
	router.PUT(baseURL+"/Tag/:tagId", wrapper.UpdateTag)
	router.GET(baseURL+"/TagRelation", wrapper.GetTagRelations)
	router.GET(baseURL+"/Textparser/fetchDictionaryEntriesByType", wrapper.GetPlaceholder)
	router.GET(baseURL+"/Tools/bookkeepingSystemVersion", wrapper.BookkeepingSystemVersion)
	router.GET(baseURL+"/Voucher", wrapper.GetVouchers)
	router.POST(baseURL+"/Voucher/Factory/saveVoucher", wrapper.VoucherFactorySaveVoucher)
	router.POST(baseURL+"/Voucher/Factory/uploadTempFile", wrapper.VoucherUploadFile)
	router.GET(baseURL+"/Voucher/:voucherId", wrapper.GetVoucherById)
	router.PUT(baseURL+"/Voucher/:voucherId", wrapper.UpdateVoucher)
	router.PUT(baseURL+"/Voucher/:voucherId/bookAmount", wrapper.BookVoucher)
	router.PUT(baseURL+"/Voucher/:voucherId/enshrine", wrapper.VoucherEnshrine)
	router.PUT(baseURL+"/Voucher/:voucherId/resetToDraft", wrapper.VoucherResetToDraft)
	router.PUT(baseURL+"/Voucher/:voucherId/resetToOpen", wrapper.VoucherResetToOpen)
	router.GET(baseURL+"/VoucherPos", wrapper.GetVoucherPositions)

}
