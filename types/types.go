// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package types

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for ModelChangeLayoutKey.
const (
	Language    ModelChangeLayoutKey = "language"
	Letterpaper ModelChangeLayoutKey = "letterpaper"
	PayPal      ModelChangeLayoutKey = "payPal"
	Template    ModelChangeLayoutKey = "template"
)

// Defines values for ModelCheckAccountDefaultAccount.
const (
	ModelCheckAccountDefaultAccountN0 ModelCheckAccountDefaultAccount = 0
	ModelCheckAccountDefaultAccountN1 ModelCheckAccountDefaultAccount = 1
)

// Defines values for ModelCheckAccountImportType.
const (
	ModelCheckAccountImportTypeCSV         ModelCheckAccountImportType = "CSV"
	ModelCheckAccountImportTypeLessThannil ModelCheckAccountImportType = "<nil>"
	ModelCheckAccountImportTypeMT940       ModelCheckAccountImportType = "MT940"
)

// Defines values for ModelCheckAccountStatus.
const (
	ModelCheckAccountStatusN0   ModelCheckAccountStatus = 0
	ModelCheckAccountStatusN100 ModelCheckAccountStatus = 100
)

// Defines values for ModelCheckAccountType.
const (
	ModelCheckAccountTypeOffline ModelCheckAccountType = "offline"
	ModelCheckAccountTypeOnline  ModelCheckAccountType = "online"
)

// Defines values for ModelCheckAccountResponseImportType.
const (
	ModelCheckAccountResponseImportTypeCSV         ModelCheckAccountResponseImportType = "CSV"
	ModelCheckAccountResponseImportTypeLessThannil ModelCheckAccountResponseImportType = "<nil>"
	ModelCheckAccountResponseImportTypeMT940       ModelCheckAccountResponseImportType = "MT940"
)

// Defines values for ModelCheckAccountResponseStatus.
const (
	ModelCheckAccountResponseStatusN0   ModelCheckAccountResponseStatus = "0"
	ModelCheckAccountResponseStatusN100 ModelCheckAccountResponseStatus = "100"
)

// Defines values for ModelCheckAccountResponseType.
const (
	ModelCheckAccountResponseTypeOffline ModelCheckAccountResponseType = "offline"
	ModelCheckAccountResponseTypeOnline  ModelCheckAccountResponseType = "online"
)

// Defines values for ModelCheckAccountTransactionStatus.
const (
	ModelCheckAccountTransactionStatusN100 ModelCheckAccountTransactionStatus = 100
	ModelCheckAccountTransactionStatusN200 ModelCheckAccountTransactionStatus = 200
	ModelCheckAccountTransactionStatusN300 ModelCheckAccountTransactionStatus = 300
	ModelCheckAccountTransactionStatusN400 ModelCheckAccountTransactionStatus = 400
)

// Defines values for ModelCheckAccountTransactionResponseStatus.
const (
	ModelCheckAccountTransactionResponseStatusN100 ModelCheckAccountTransactionResponseStatus = "100"
	ModelCheckAccountTransactionResponseStatusN200 ModelCheckAccountTransactionResponseStatus = "200"
	ModelCheckAccountTransactionResponseStatusN300 ModelCheckAccountTransactionResponseStatus = "300"
	ModelCheckAccountTransactionResponseStatusN400 ModelCheckAccountTransactionResponseStatus = "400"
)

// Defines values for ModelCheckAccountTransactionUpdateStatus.
const (
	ModelCheckAccountTransactionUpdateStatusN100 ModelCheckAccountTransactionUpdateStatus = 100
	ModelCheckAccountTransactionUpdateStatusN200 ModelCheckAccountTransactionUpdateStatus = 200
	ModelCheckAccountTransactionUpdateStatusN300 ModelCheckAccountTransactionUpdateStatus = 300
	ModelCheckAccountTransactionUpdateStatusN400 ModelCheckAccountTransactionUpdateStatus = 400
)

// Defines values for ModelCheckAccountUpdateDefaultAccount.
const (
	ModelCheckAccountUpdateDefaultAccountN0 ModelCheckAccountUpdateDefaultAccount = 0
	ModelCheckAccountUpdateDefaultAccountN1 ModelCheckAccountUpdateDefaultAccount = 1
)

// Defines values for ModelCheckAccountUpdateImportType.
const (
	ModelCheckAccountUpdateImportTypeCSV         ModelCheckAccountUpdateImportType = "CSV"
	ModelCheckAccountUpdateImportTypeLessThannil ModelCheckAccountUpdateImportType = "<nil>"
	ModelCheckAccountUpdateImportTypeMT940       ModelCheckAccountUpdateImportType = "MT940"
)

// Defines values for ModelCheckAccountUpdateStatus.
const (
	ModelCheckAccountUpdateStatusN0   ModelCheckAccountUpdateStatus = 0
	ModelCheckAccountUpdateStatusN100 ModelCheckAccountUpdateStatus = 100
)

// Defines values for ModelCheckAccountUpdateType.
const (
	ModelCheckAccountUpdateTypeOffline ModelCheckAccountUpdateType = "offline"
	ModelCheckAccountUpdateTypeOnline  ModelCheckAccountUpdateType = "online"
)

// Defines values for ModelCommunicationWayType.
const (
	ModelCommunicationWayTypeEMAIL  ModelCommunicationWayType = "EMAIL"
	ModelCommunicationWayTypeMOBILE ModelCommunicationWayType = "MOBILE"
	ModelCommunicationWayTypePHONE  ModelCommunicationWayType = "PHONE"
	ModelCommunicationWayTypeWEB    ModelCommunicationWayType = "WEB"
)

// Defines values for ModelCommunicationWayResponseType.
const (
	ModelCommunicationWayResponseTypeEMAIL  ModelCommunicationWayResponseType = "EMAIL"
	ModelCommunicationWayResponseTypeMOBILE ModelCommunicationWayResponseType = "MOBILE"
	ModelCommunicationWayResponseTypePHONE  ModelCommunicationWayResponseType = "PHONE"
	ModelCommunicationWayResponseTypeWEB    ModelCommunicationWayResponseType = "WEB"
)

// Defines values for ModelCommunicationWayUpdateType.
const (
	ModelCommunicationWayUpdateTypeEMAIL  ModelCommunicationWayUpdateType = "EMAIL"
	ModelCommunicationWayUpdateTypeMOBILE ModelCommunicationWayUpdateType = "MOBILE"
	ModelCommunicationWayUpdateTypePHONE  ModelCommunicationWayUpdateType = "PHONE"
	ModelCommunicationWayUpdateTypeWEB    ModelCommunicationWayUpdateType = "WEB"
)

// Defines values for ModelCreateInvoiceFromOrderPartialType.
const (
	ModelCreateInvoiceFromOrderPartialTypeAR ModelCreateInvoiceFromOrderPartialType = "AR"
	ModelCreateInvoiceFromOrderPartialTypeRE ModelCreateInvoiceFromOrderPartialType = "RE"
	ModelCreateInvoiceFromOrderPartialTypeTR ModelCreateInvoiceFromOrderPartialType = "TR"
)

// Defines values for ModelCreateInvoiceFromOrderType.
const (
	Gross      ModelCreateInvoiceFromOrderType = "gross"
	Net        ModelCreateInvoiceFromOrderType = "net"
	Percentage ModelCreateInvoiceFromOrderType = "percentage"
)

// Defines values for ModelInvoiceInvoiceType.
const (
	ModelInvoiceInvoiceTypeER  ModelInvoiceInvoiceType = "ER"
	ModelInvoiceInvoiceTypeMA  ModelInvoiceInvoiceType = "MA"
	ModelInvoiceInvoiceTypeRE  ModelInvoiceInvoiceType = "RE"
	ModelInvoiceInvoiceTypeSR  ModelInvoiceInvoiceType = "SR"
	ModelInvoiceInvoiceTypeTR  ModelInvoiceInvoiceType = "TR"
	ModelInvoiceInvoiceTypeWKR ModelInvoiceInvoiceType = "WKR"
)

// Defines values for ModelInvoiceSendType.
const (
	ModelInvoiceSendTypeVM   ModelInvoiceSendType = "VM"
	ModelInvoiceSendTypeVP   ModelInvoiceSendType = "VP"
	ModelInvoiceSendTypeVPDF ModelInvoiceSendType = "VPDF"
	ModelInvoiceSendTypeVPR  ModelInvoiceSendType = "VPR"
)

// Defines values for ModelInvoiceStatus.
const (
	ModelInvoiceStatusN100  ModelInvoiceStatus = "100"
	ModelInvoiceStatusN1000 ModelInvoiceStatus = "1000"
	ModelInvoiceStatusN200  ModelInvoiceStatus = "200"
	ModelInvoiceStatusN50   ModelInvoiceStatus = "50"
	ModelInvoiceStatusN750  ModelInvoiceStatus = "750"
)

// Defines values for ModelInvoiceTaxRuleId.
const (
	ModelInvoiceTaxRuleIdN1  ModelInvoiceTaxRuleId = "1"
	ModelInvoiceTaxRuleIdN11 ModelInvoiceTaxRuleId = "11"
	ModelInvoiceTaxRuleIdN2  ModelInvoiceTaxRuleId = "2"
	ModelInvoiceTaxRuleIdN3  ModelInvoiceTaxRuleId = "3"
	ModelInvoiceTaxRuleIdN4  ModelInvoiceTaxRuleId = "4"
	ModelInvoiceTaxRuleIdN5  ModelInvoiceTaxRuleId = "5"
)

// Defines values for ModelInvoiceTaxRuleObjectName.
const (
	ModelInvoiceTaxRuleObjectNameTaxRule ModelInvoiceTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelInvoiceTaxType.
const (
	ModelInvoiceTaxTypeCustom  ModelInvoiceTaxType = "custom"
	ModelInvoiceTaxTypeDefault ModelInvoiceTaxType = "default"
	ModelInvoiceTaxTypeEu      ModelInvoiceTaxType = "eu"
	ModelInvoiceTaxTypeNoteu   ModelInvoiceTaxType = "noteu"
)

// Defines values for ModelInvoiceResponseInvoiceType.
const (
	ER  ModelInvoiceResponseInvoiceType = "ER"
	MA  ModelInvoiceResponseInvoiceType = "MA"
	RE  ModelInvoiceResponseInvoiceType = "RE"
	SR  ModelInvoiceResponseInvoiceType = "SR"
	TR  ModelInvoiceResponseInvoiceType = "TR"
	WKR ModelInvoiceResponseInvoiceType = "WKR"
)

// Defines values for ModelInvoiceResponseSendType.
const (
	ModelInvoiceResponseSendTypeVM   ModelInvoiceResponseSendType = "VM"
	ModelInvoiceResponseSendTypeVP   ModelInvoiceResponseSendType = "VP"
	ModelInvoiceResponseSendTypeVPDF ModelInvoiceResponseSendType = "VPDF"
	ModelInvoiceResponseSendTypeVPR  ModelInvoiceResponseSendType = "VPR"
)

// Defines values for ModelInvoiceResponseStatus.
const (
	ModelInvoiceResponseStatusN100  ModelInvoiceResponseStatus = "100"
	ModelInvoiceResponseStatusN1000 ModelInvoiceResponseStatus = "1000"
	ModelInvoiceResponseStatusN200  ModelInvoiceResponseStatus = "200"
	ModelInvoiceResponseStatusN50   ModelInvoiceResponseStatus = "50"
	ModelInvoiceResponseStatusN750  ModelInvoiceResponseStatus = "750"
)

// Defines values for ModelInvoiceResponseTaxRuleId.
const (
	ModelInvoiceResponseTaxRuleIdN1  ModelInvoiceResponseTaxRuleId = "1"
	ModelInvoiceResponseTaxRuleIdN11 ModelInvoiceResponseTaxRuleId = "11"
	ModelInvoiceResponseTaxRuleIdN2  ModelInvoiceResponseTaxRuleId = "2"
	ModelInvoiceResponseTaxRuleIdN3  ModelInvoiceResponseTaxRuleId = "3"
	ModelInvoiceResponseTaxRuleIdN4  ModelInvoiceResponseTaxRuleId = "4"
	ModelInvoiceResponseTaxRuleIdN5  ModelInvoiceResponseTaxRuleId = "5"
)

// Defines values for ModelInvoiceResponseTaxRuleObjectName.
const (
	ModelInvoiceResponseTaxRuleObjectNameTaxRule ModelInvoiceResponseTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelInvoiceResponseTaxType.
const (
	ModelInvoiceResponseTaxTypeCustom  ModelInvoiceResponseTaxType = "custom"
	ModelInvoiceResponseTaxTypeDefault ModelInvoiceResponseTaxType = "default"
	ModelInvoiceResponseTaxTypeEu      ModelInvoiceResponseTaxType = "eu"
	ModelInvoiceResponseTaxTypeNoteu   ModelInvoiceResponseTaxType = "noteu"
)

// Defines values for ModelOrderOrderType.
const (
	ModelOrderOrderTypeAB ModelOrderOrderType = "AB"
	ModelOrderOrderTypeAN ModelOrderOrderType = "AN"
	ModelOrderOrderTypeLI ModelOrderOrderType = "LI"
)

// Defines values for ModelOrderSendType.
const (
	ModelOrderSendTypeVM   ModelOrderSendType = "VM"
	ModelOrderSendTypeVP   ModelOrderSendType = "VP"
	ModelOrderSendTypeVPDF ModelOrderSendType = "VPDF"
	ModelOrderSendTypeVPR  ModelOrderSendType = "VPR"
)

// Defines values for ModelOrderStatus.
const (
	ModelOrderStatusN100  ModelOrderStatus = 100
	ModelOrderStatusN1000 ModelOrderStatus = 1000
	ModelOrderStatusN200  ModelOrderStatus = 200
	ModelOrderStatusN300  ModelOrderStatus = 300
	ModelOrderStatusN500  ModelOrderStatus = 500
	ModelOrderStatusN750  ModelOrderStatus = 750
)

// Defines values for ModelOrderTaxRuleId.
const (
	ModelOrderTaxRuleIdN1  ModelOrderTaxRuleId = "1"
	ModelOrderTaxRuleIdN11 ModelOrderTaxRuleId = "11"
	ModelOrderTaxRuleIdN2  ModelOrderTaxRuleId = "2"
	ModelOrderTaxRuleIdN3  ModelOrderTaxRuleId = "3"
	ModelOrderTaxRuleIdN4  ModelOrderTaxRuleId = "4"
	ModelOrderTaxRuleIdN5  ModelOrderTaxRuleId = "5"
)

// Defines values for ModelOrderTaxRuleObjectName.
const (
	ModelOrderTaxRuleObjectNameTaxRule ModelOrderTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelOrderResponseOrderType.
const (
	ModelOrderResponseOrderTypeAB ModelOrderResponseOrderType = "AB"
	ModelOrderResponseOrderTypeAN ModelOrderResponseOrderType = "AN"
	ModelOrderResponseOrderTypeLI ModelOrderResponseOrderType = "LI"
)

// Defines values for ModelOrderResponseSendType.
const (
	ModelOrderResponseSendTypeVM   ModelOrderResponseSendType = "VM"
	ModelOrderResponseSendTypeVP   ModelOrderResponseSendType = "VP"
	ModelOrderResponseSendTypeVPDF ModelOrderResponseSendType = "VPDF"
	ModelOrderResponseSendTypeVPR  ModelOrderResponseSendType = "VPR"
)

// Defines values for ModelOrderResponseStatus.
const (
	ModelOrderResponseStatusN100  ModelOrderResponseStatus = "100"
	ModelOrderResponseStatusN1000 ModelOrderResponseStatus = "1000"
	ModelOrderResponseStatusN200  ModelOrderResponseStatus = "200"
	ModelOrderResponseStatusN300  ModelOrderResponseStatus = "300"
	ModelOrderResponseStatusN500  ModelOrderResponseStatus = "500"
	ModelOrderResponseStatusN750  ModelOrderResponseStatus = "750"
)

// Defines values for ModelOrderResponseTaxRuleId.
const (
	ModelOrderResponseTaxRuleIdN1  ModelOrderResponseTaxRuleId = "1"
	ModelOrderResponseTaxRuleIdN11 ModelOrderResponseTaxRuleId = "11"
	ModelOrderResponseTaxRuleIdN2  ModelOrderResponseTaxRuleId = "2"
	ModelOrderResponseTaxRuleIdN3  ModelOrderResponseTaxRuleId = "3"
	ModelOrderResponseTaxRuleIdN4  ModelOrderResponseTaxRuleId = "4"
	ModelOrderResponseTaxRuleIdN5  ModelOrderResponseTaxRuleId = "5"
)

// Defines values for ModelOrderResponseTaxRuleObjectName.
const (
	ModelOrderResponseTaxRuleObjectNameTaxRule ModelOrderResponseTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelOrderUpdateOrderType.
const (
	ModelOrderUpdateOrderTypeAB ModelOrderUpdateOrderType = "AB"
	ModelOrderUpdateOrderTypeAN ModelOrderUpdateOrderType = "AN"
	ModelOrderUpdateOrderTypeLI ModelOrderUpdateOrderType = "LI"
)

// Defines values for ModelOrderUpdateSendType.
const (
	ModelOrderUpdateSendTypeVM   ModelOrderUpdateSendType = "VM"
	ModelOrderUpdateSendTypeVP   ModelOrderUpdateSendType = "VP"
	ModelOrderUpdateSendTypeVPDF ModelOrderUpdateSendType = "VPDF"
	ModelOrderUpdateSendTypeVPR  ModelOrderUpdateSendType = "VPR"
)

// Defines values for ModelOrderUpdateStatus.
const (
	ModelOrderUpdateStatusN100  ModelOrderUpdateStatus = 100
	ModelOrderUpdateStatusN1000 ModelOrderUpdateStatus = 1000
	ModelOrderUpdateStatusN200  ModelOrderUpdateStatus = 200
	ModelOrderUpdateStatusN300  ModelOrderUpdateStatus = 300
	ModelOrderUpdateStatusN500  ModelOrderUpdateStatus = 500
	ModelOrderUpdateStatusN750  ModelOrderUpdateStatus = 750
)

// Defines values for ModelOrderUpdateTaxRuleId.
const (
	ModelOrderUpdateTaxRuleIdN1  ModelOrderUpdateTaxRuleId = "1"
	ModelOrderUpdateTaxRuleIdN11 ModelOrderUpdateTaxRuleId = "11"
	ModelOrderUpdateTaxRuleIdN2  ModelOrderUpdateTaxRuleId = "2"
	ModelOrderUpdateTaxRuleIdN3  ModelOrderUpdateTaxRuleId = "3"
	ModelOrderUpdateTaxRuleIdN4  ModelOrderUpdateTaxRuleId = "4"
	ModelOrderUpdateTaxRuleIdN5  ModelOrderUpdateTaxRuleId = "5"
)

// Defines values for ModelOrderUpdateTaxRuleObjectName.
const (
	ModelOrderUpdateTaxRuleObjectNameTaxRule ModelOrderUpdateTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelPartStatus.
const (
	ModelPartStatusN100 ModelPartStatus = 100
	ModelPartStatusN50  ModelPartStatus = 50
)

// Defines values for ModelPartUpdateStatus.
const (
	ModelPartUpdateStatusN100 ModelPartUpdateStatus = 100
	ModelPartUpdateStatusN50  ModelPartUpdateStatus = 50
)

// Defines values for ModelTagCreateResponseObjectObjectName.
const (
	ModelTagCreateResponseObjectObjectNameCreditNote ModelTagCreateResponseObjectObjectName = "CreditNote"
	ModelTagCreateResponseObjectObjectNameInvoice    ModelTagCreateResponseObjectObjectName = "Invoice"
	ModelTagCreateResponseObjectObjectNameOrder      ModelTagCreateResponseObjectObjectName = "Order"
	ModelTagCreateResponseObjectObjectNameVoucher    ModelTagCreateResponseObjectObjectName = "Voucher"
)

// Defines values for ModelVoucherCreditDebit.
const (
	ModelVoucherCreditDebitC ModelVoucherCreditDebit = "C"
	ModelVoucherCreditDebitD ModelVoucherCreditDebit = "D"
)

// Defines values for ModelVoucherRecurringInterval.
const (
	ModelVoucherRecurringIntervalP0Y0M1W ModelVoucherRecurringInterval = "P0Y0M1W"
	ModelVoucherRecurringIntervalP0Y0M2W ModelVoucherRecurringInterval = "P0Y0M2W"
	ModelVoucherRecurringIntervalP0Y1M0W ModelVoucherRecurringInterval = "P0Y1M0W"
	ModelVoucherRecurringIntervalP0Y3M0W ModelVoucherRecurringInterval = "P0Y3M0W"
	ModelVoucherRecurringIntervalP0Y6M0W ModelVoucherRecurringInterval = "P0Y6M0W"
	ModelVoucherRecurringIntervalP1Y0M0W ModelVoucherRecurringInterval = "P1Y0M0W"
	ModelVoucherRecurringIntervalP2Y0M0W ModelVoucherRecurringInterval = "P2Y0M0W"
	ModelVoucherRecurringIntervalP3Y0M0W ModelVoucherRecurringInterval = "P3Y0M0W"
	ModelVoucherRecurringIntervalP4Y0M0W ModelVoucherRecurringInterval = "P4Y0M0W"
	ModelVoucherRecurringIntervalP5Y0M0W ModelVoucherRecurringInterval = "P5Y0M0W"
)

// Defines values for ModelVoucherStatus.
const (
	ModelVoucherStatusN100  ModelVoucherStatus = 100
	ModelVoucherStatusN1000 ModelVoucherStatus = 1000
	ModelVoucherStatusN50   ModelVoucherStatus = 50
)

// Defines values for ModelVoucherTaxRuleId.
const (
	ModelVoucherTaxRuleIdN1  ModelVoucherTaxRuleId = "1"
	ModelVoucherTaxRuleIdN11 ModelVoucherTaxRuleId = "11"
	ModelVoucherTaxRuleIdN2  ModelVoucherTaxRuleId = "2"
	ModelVoucherTaxRuleIdN3  ModelVoucherTaxRuleId = "3"
	ModelVoucherTaxRuleIdN4  ModelVoucherTaxRuleId = "4"
	ModelVoucherTaxRuleIdN5  ModelVoucherTaxRuleId = "5"
)

// Defines values for ModelVoucherTaxRuleObjectName.
const (
	ModelVoucherTaxRuleObjectNameTaxRule ModelVoucherTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelVoucherVoucherType.
const (
	ModelVoucherVoucherTypeRV  ModelVoucherVoucherType = "RV"
	ModelVoucherVoucherTypeVOU ModelVoucherVoucherType = "VOU"
)

// Defines values for ModelVoucherResponseCreditDebit.
const (
	ModelVoucherResponseCreditDebitC ModelVoucherResponseCreditDebit = "C"
	ModelVoucherResponseCreditDebitD ModelVoucherResponseCreditDebit = "D"
)

// Defines values for ModelVoucherResponseRecurringInterval.
const (
	ModelVoucherResponseRecurringIntervalP0Y0M1W ModelVoucherResponseRecurringInterval = "P0Y0M1W"
	ModelVoucherResponseRecurringIntervalP0Y0M2W ModelVoucherResponseRecurringInterval = "P0Y0M2W"
	ModelVoucherResponseRecurringIntervalP0Y1M0W ModelVoucherResponseRecurringInterval = "P0Y1M0W"
	ModelVoucherResponseRecurringIntervalP0Y3M0W ModelVoucherResponseRecurringInterval = "P0Y3M0W"
	ModelVoucherResponseRecurringIntervalP0Y6M0W ModelVoucherResponseRecurringInterval = "P0Y6M0W"
	ModelVoucherResponseRecurringIntervalP1Y0M0W ModelVoucherResponseRecurringInterval = "P1Y0M0W"
	ModelVoucherResponseRecurringIntervalP2Y0M0W ModelVoucherResponseRecurringInterval = "P2Y0M0W"
	ModelVoucherResponseRecurringIntervalP3Y0M0W ModelVoucherResponseRecurringInterval = "P3Y0M0W"
	ModelVoucherResponseRecurringIntervalP4Y0M0W ModelVoucherResponseRecurringInterval = "P4Y0M0W"
	ModelVoucherResponseRecurringIntervalP5Y0M0W ModelVoucherResponseRecurringInterval = "P5Y0M0W"
)

// Defines values for ModelVoucherResponseStatus.
const (
	ModelVoucherResponseStatusN100  ModelVoucherResponseStatus = "100"
	ModelVoucherResponseStatusN1000 ModelVoucherResponseStatus = "1000"
	ModelVoucherResponseStatusN50   ModelVoucherResponseStatus = "50"
)

// Defines values for ModelVoucherResponseTaxRuleId.
const (
	ModelVoucherResponseTaxRuleIdN1  ModelVoucherResponseTaxRuleId = "1"
	ModelVoucherResponseTaxRuleIdN11 ModelVoucherResponseTaxRuleId = "11"
	ModelVoucherResponseTaxRuleIdN2  ModelVoucherResponseTaxRuleId = "2"
	ModelVoucherResponseTaxRuleIdN3  ModelVoucherResponseTaxRuleId = "3"
	ModelVoucherResponseTaxRuleIdN4  ModelVoucherResponseTaxRuleId = "4"
	ModelVoucherResponseTaxRuleIdN5  ModelVoucherResponseTaxRuleId = "5"
)

// Defines values for ModelVoucherResponseTaxRuleObjectName.
const (
	ModelVoucherResponseTaxRuleObjectNameTaxRule ModelVoucherResponseTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelVoucherResponseVoucherType.
const (
	ModelVoucherResponseVoucherTypeRV  ModelVoucherResponseVoucherType = "RV"
	ModelVoucherResponseVoucherTypeVOU ModelVoucherResponseVoucherType = "VOU"
)

// Defines values for ModelVoucherUpdateCreditDebit.
const (
	ModelVoucherUpdateCreditDebitC ModelVoucherUpdateCreditDebit = "C"
	ModelVoucherUpdateCreditDebitD ModelVoucherUpdateCreditDebit = "D"
)

// Defines values for ModelVoucherUpdateStatus.
const (
	ModelVoucherUpdateStatusN100  ModelVoucherUpdateStatus = 100
	ModelVoucherUpdateStatusN1000 ModelVoucherUpdateStatus = 1000
	ModelVoucherUpdateStatusN50   ModelVoucherUpdateStatus = 50
)

// Defines values for ModelVoucherUpdateTaxRuleId.
const (
	ModelVoucherUpdateTaxRuleIdN1  ModelVoucherUpdateTaxRuleId = "1"
	ModelVoucherUpdateTaxRuleIdN11 ModelVoucherUpdateTaxRuleId = "11"
	ModelVoucherUpdateTaxRuleIdN2  ModelVoucherUpdateTaxRuleId = "2"
	ModelVoucherUpdateTaxRuleIdN3  ModelVoucherUpdateTaxRuleId = "3"
	ModelVoucherUpdateTaxRuleIdN4  ModelVoucherUpdateTaxRuleId = "4"
	ModelVoucherUpdateTaxRuleIdN5  ModelVoucherUpdateTaxRuleId = "5"
)

// Defines values for ModelVoucherUpdateTaxRuleObjectName.
const (
	ModelVoucherUpdateTaxRuleObjectNameTaxRule ModelVoucherUpdateTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelVoucherUpdateVoucherType.
const (
	RV  ModelVoucherUpdateVoucherType = "RV"
	VOU ModelVoucherUpdateVoucherType = "VOU"
)

// Defines values for ModelCreditNoteBookingCategory.
const (
	ACCOUNTINGTYPE    ModelCreditNoteBookingCategory = "ACCOUNTING_TYPE"
	PROVISION         ModelCreditNoteBookingCategory = "PROVISION"
	ROYALTYASSIGNED   ModelCreditNoteBookingCategory = "ROYALTY_ASSIGNED"
	ROYALTYUNASSIGNED ModelCreditNoteBookingCategory = "ROYALTY_UNASSIGNED"
	UNDERACHIEVEMENT  ModelCreditNoteBookingCategory = "UNDERACHIEVEMENT"
)

// Defines values for ModelCreditNoteSendType.
const (
	ModelCreditNoteSendTypeVM   ModelCreditNoteSendType = "VM"
	ModelCreditNoteSendTypeVP   ModelCreditNoteSendType = "VP"
	ModelCreditNoteSendTypeVPDF ModelCreditNoteSendType = "VPDF"
	ModelCreditNoteSendTypeVPR  ModelCreditNoteSendType = "VPR"
)

// Defines values for ModelCreditNoteStatus.
const (
	ModelCreditNoteStatusN100  ModelCreditNoteStatus = "100"
	ModelCreditNoteStatusN1000 ModelCreditNoteStatus = "1000"
	ModelCreditNoteStatusN200  ModelCreditNoteStatus = "200"
	ModelCreditNoteStatusN300  ModelCreditNoteStatus = "300"
	ModelCreditNoteStatusN500  ModelCreditNoteStatus = "500"
	ModelCreditNoteStatusN750  ModelCreditNoteStatus = "750"
)

// Defines values for ModelCreditNoteTaxRuleId.
const (
	ModelCreditNoteTaxRuleIdN1  ModelCreditNoteTaxRuleId = "1"
	ModelCreditNoteTaxRuleIdN11 ModelCreditNoteTaxRuleId = "11"
	ModelCreditNoteTaxRuleIdN2  ModelCreditNoteTaxRuleId = "2"
	ModelCreditNoteTaxRuleIdN3  ModelCreditNoteTaxRuleId = "3"
	ModelCreditNoteTaxRuleIdN4  ModelCreditNoteTaxRuleId = "4"
	ModelCreditNoteTaxRuleIdN5  ModelCreditNoteTaxRuleId = "5"
)

// Defines values for ModelCreditNoteTaxRuleObjectName.
const (
	ModelCreditNoteTaxRuleObjectNameTaxRule ModelCreditNoteTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelCreditNoteResponseSendType.
const (
	ModelCreditNoteResponseSendTypeVM   ModelCreditNoteResponseSendType = "VM"
	ModelCreditNoteResponseSendTypeVP   ModelCreditNoteResponseSendType = "VP"
	ModelCreditNoteResponseSendTypeVPDF ModelCreditNoteResponseSendType = "VPDF"
	ModelCreditNoteResponseSendTypeVPR  ModelCreditNoteResponseSendType = "VPR"
)

// Defines values for ModelCreditNoteResponseStatus.
const (
	ModelCreditNoteResponseStatusN100  ModelCreditNoteResponseStatus = "100"
	ModelCreditNoteResponseStatusN1000 ModelCreditNoteResponseStatus = "1000"
	ModelCreditNoteResponseStatusN200  ModelCreditNoteResponseStatus = "200"
	ModelCreditNoteResponseStatusN750  ModelCreditNoteResponseStatus = "750"
)

// Defines values for ModelCreditNoteResponseTaxRuleId.
const (
	ModelCreditNoteResponseTaxRuleIdN1  ModelCreditNoteResponseTaxRuleId = "1"
	ModelCreditNoteResponseTaxRuleIdN11 ModelCreditNoteResponseTaxRuleId = "11"
	ModelCreditNoteResponseTaxRuleIdN2  ModelCreditNoteResponseTaxRuleId = "2"
	ModelCreditNoteResponseTaxRuleIdN3  ModelCreditNoteResponseTaxRuleId = "3"
	ModelCreditNoteResponseTaxRuleIdN4  ModelCreditNoteResponseTaxRuleId = "4"
	ModelCreditNoteResponseTaxRuleIdN5  ModelCreditNoteResponseTaxRuleId = "5"
)

// Defines values for ModelCreditNoteResponseTaxRuleObjectName.
const (
	ModelCreditNoteResponseTaxRuleObjectNameTaxRule ModelCreditNoteResponseTaxRuleObjectName = "TaxRule"
)

// Defines values for ModelCreditNoteUpdateSendType.
const (
	ModelCreditNoteUpdateSendTypeVM   ModelCreditNoteUpdateSendType = "VM"
	ModelCreditNoteUpdateSendTypeVP   ModelCreditNoteUpdateSendType = "VP"
	ModelCreditNoteUpdateSendTypeVPDF ModelCreditNoteUpdateSendType = "VPDF"
	ModelCreditNoteUpdateSendTypeVPR  ModelCreditNoteUpdateSendType = "VPR"
)

// Defines values for ModelCreditNoteUpdateStatus.
const (
	ModelCreditNoteUpdateStatusN100  ModelCreditNoteUpdateStatus = "100"
	ModelCreditNoteUpdateStatusN1000 ModelCreditNoteUpdateStatus = "1000"
	ModelCreditNoteUpdateStatusN200  ModelCreditNoteUpdateStatus = "200"
	ModelCreditNoteUpdateStatusN750  ModelCreditNoteUpdateStatus = "750"
)

// Defines values for ModelCreditNoteUpdateTaxRuleId.
const (
	ModelCreditNoteUpdateTaxRuleIdN1  ModelCreditNoteUpdateTaxRuleId = "1"
	ModelCreditNoteUpdateTaxRuleIdN11 ModelCreditNoteUpdateTaxRuleId = "11"
	ModelCreditNoteUpdateTaxRuleIdN2  ModelCreditNoteUpdateTaxRuleId = "2"
	ModelCreditNoteUpdateTaxRuleIdN3  ModelCreditNoteUpdateTaxRuleId = "3"
	ModelCreditNoteUpdateTaxRuleIdN4  ModelCreditNoteUpdateTaxRuleId = "4"
	ModelCreditNoteUpdateTaxRuleIdN5  ModelCreditNoteUpdateTaxRuleId = "5"
)

// Defines values for ModelCreditNoteUpdateTaxRuleObjectName.
const (
	TaxRule ModelCreditNoteUpdateTaxRuleObjectName = "TaxRule"
)

// Defines values for CreateClearingAccountResponseDefaultAccount.
const (
	CreateClearingAccountResponseDefaultAccountN0 CreateClearingAccountResponseDefaultAccount = "0"
	CreateClearingAccountResponseDefaultAccountN1 CreateClearingAccountResponseDefaultAccount = "1"
)

// Defines values for CreateClearingAccountResponseStatus.
const (
	CreateClearingAccountResponseStatusN0   CreateClearingAccountResponseStatus = "0"
	CreateClearingAccountResponseStatusN100 CreateClearingAccountResponseStatus = "100"
)

// Defines values for CreateClearingAccountResponseType.
const (
	CreateClearingAccountResponseTypeOffline CreateClearingAccountResponseType = "offline"
	CreateClearingAccountResponseTypeOnline  CreateClearingAccountResponseType = "online"
)

// Defines values for CreateFileImportAccountImportType.
const (
	CreateFileImportAccountImportTypeCSV   CreateFileImportAccountImportType = "CSV"
	CreateFileImportAccountImportTypeMT940 CreateFileImportAccountImportType = "MT940"
)

// Defines values for CreateFileImportAccountResponseAutoMapTransactions.
const (
	CreateFileImportAccountResponseAutoMapTransactionsN0 CreateFileImportAccountResponseAutoMapTransactions = "0"
	CreateFileImportAccountResponseAutoMapTransactionsN1 CreateFileImportAccountResponseAutoMapTransactions = "1"
)

// Defines values for CreateFileImportAccountResponseDefaultAccount.
const (
	CreateFileImportAccountResponseDefaultAccountN0 CreateFileImportAccountResponseDefaultAccount = "0"
	CreateFileImportAccountResponseDefaultAccountN1 CreateFileImportAccountResponseDefaultAccount = "1"
)

// Defines values for CreateFileImportAccountResponseImportType.
const (
	CSV   CreateFileImportAccountResponseImportType = "CSV"
	MT940 CreateFileImportAccountResponseImportType = "MT940"
)

// Defines values for CreateFileImportAccountResponseStatus.
const (
	CreateFileImportAccountResponseStatusN0   CreateFileImportAccountResponseStatus = "0"
	CreateFileImportAccountResponseStatusN100 CreateFileImportAccountResponseStatus = "100"
)

// Defines values for CreateFileImportAccountResponseType.
const (
	Offline CreateFileImportAccountResponseType = "offline"
	Online  CreateFileImportAccountResponseType = "online"
)

// Defines values for GetCommunicationWaysParamsType.
const (
	GetCommunicationWaysParamsTypeEMAIL  GetCommunicationWaysParamsType = "EMAIL"
	GetCommunicationWaysParamsTypeMOBILE GetCommunicationWaysParamsType = "MOBILE"
	GetCommunicationWaysParamsTypePHONE  GetCommunicationWaysParamsType = "PHONE"
	GetCommunicationWaysParamsTypeWEB    GetCommunicationWaysParamsType = "WEB"
)

// Defines values for GetCommunicationWaysParamsMain.
const (
	GetCommunicationWaysParamsMainN0 GetCommunicationWaysParamsMain = "0"
	GetCommunicationWaysParamsMainN1 GetCommunicationWaysParamsMain = "1"
)

// Defines values for GetContactsParamsDepth.
const (
	N0 GetContactsParamsDepth = "0"
	N1 GetContactsParamsDepth = "1"
)

// Defines values for GetCreditNotesParamsStatus.
const (
	GetCreditNotesParamsStatusN100  GetCreditNotesParamsStatus = "100"
	GetCreditNotesParamsStatusN1000 GetCreditNotesParamsStatus = "1000"
	GetCreditNotesParamsStatusN200  GetCreditNotesParamsStatus = "200"
	GetCreditNotesParamsStatusN300  GetCreditNotesParamsStatus = "300"
	GetCreditNotesParamsStatusN500  GetCreditNotesParamsStatus = "500"
	GetCreditNotesParamsStatusN750  GetCreditNotesParamsStatus = "750"
)

// Defines values for BookCreditNoteJSONBodyType.
const (
	BookCreditNoteJSONBodyTypeCB          BookCreditNoteJSONBodyType = "CB"
	BookCreditNoteJSONBodyTypeCF          BookCreditNoteJSONBodyType = "CF"
	BookCreditNoteJSONBodyTypeFULLPAYMENT BookCreditNoteJSONBodyType = "FULL_PAYMENT"
	BookCreditNoteJSONBodyTypeMTC         BookCreditNoteJSONBodyType = "MTC"
	BookCreditNoteJSONBodyTypeN           BookCreditNoteJSONBodyType = "N"
	BookCreditNoteJSONBodyTypeO           BookCreditNoteJSONBodyType = "O"
	BookCreditNoteJSONBodyTypeOF          BookCreditNoteJSONBodyType = "OF"
)

// Defines values for CreditNoteSendByJSONBodySendType.
const (
	CreditNoteSendByJSONBodySendTypeVM   CreditNoteSendByJSONBodySendType = "VM"
	CreditNoteSendByJSONBodySendTypeVP   CreditNoteSendByJSONBodySendType = "VP"
	CreditNoteSendByJSONBodySendTypeVPDF CreditNoteSendByJSONBodySendType = "VPDF"
	CreditNoteSendByJSONBodySendTypeVPR  CreditNoteSendByJSONBodySendType = "VPR"
)

// Defines values for GetTemplatesParamsType.
const (
	GetTemplatesParamsTypeContractnote    GetTemplatesParamsType = "Contractnote"
	GetTemplatesParamsTypeCreditnote      GetTemplatesParamsType = "Creditnote"
	GetTemplatesParamsTypeInvoice         GetTemplatesParamsType = "Invoice"
	GetTemplatesParamsTypeInvoicereminder GetTemplatesParamsType = "invoicereminder"
	GetTemplatesParamsTypeLetter          GetTemplatesParamsType = "Letter"
	GetTemplatesParamsTypeOrder           GetTemplatesParamsType = "Order"
	GetTemplatesParamsTypePackinglist     GetTemplatesParamsType = "Packinglist"
)

// Defines values for GetInvoicesParamsStatus.
const (
	GetInvoicesParamsStatusN100  GetInvoicesParamsStatus = 100
	GetInvoicesParamsStatusN1000 GetInvoicesParamsStatus = 1000
	GetInvoicesParamsStatusN200  GetInvoicesParamsStatus = 200
)

// Defines values for BookInvoiceJSONBodyType.
const (
	BookInvoiceJSONBodyTypeCB          BookInvoiceJSONBodyType = "CB"
	BookInvoiceJSONBodyTypeCF          BookInvoiceJSONBodyType = "CF"
	BookInvoiceJSONBodyTypeFULLPAYMENT BookInvoiceJSONBodyType = "FULL_PAYMENT"
	BookInvoiceJSONBodyTypeMTC         BookInvoiceJSONBodyType = "MTC"
	BookInvoiceJSONBodyTypeN           BookInvoiceJSONBodyType = "N"
	BookInvoiceJSONBodyTypeO           BookInvoiceJSONBodyType = "O"
	BookInvoiceJSONBodyTypeOF          BookInvoiceJSONBodyType = "OF"
)

// Defines values for InvoiceSendByJSONBodySendType.
const (
	InvoiceSendByJSONBodySendTypeVM   InvoiceSendByJSONBodySendType = "VM"
	InvoiceSendByJSONBodySendTypeVP   InvoiceSendByJSONBodySendType = "VP"
	InvoiceSendByJSONBodySendTypeVPDF InvoiceSendByJSONBodySendType = "VPDF"
	InvoiceSendByJSONBodySendTypeVPR  InvoiceSendByJSONBodySendType = "VPR"
)

// Defines values for GetOrdersParamsStatus.
const (
	GetOrdersParamsStatusN100  GetOrdersParamsStatus = 100
	GetOrdersParamsStatusN1000 GetOrdersParamsStatus = 1000
	GetOrdersParamsStatusN200  GetOrdersParamsStatus = 200
	GetOrdersParamsStatusN300  GetOrdersParamsStatus = 300
	GetOrdersParamsStatusN500  GetOrdersParamsStatus = 500
	GetOrdersParamsStatusN750  GetOrdersParamsStatus = 750
)

// Defines values for OrderSendByJSONBodySendType.
const (
	VM   OrderSendByJSONBodySendType = "VM"
	VP   OrderSendByJSONBodySendType = "VP"
	VPDF OrderSendByJSONBodySendType = "VPDF"
	VPR  OrderSendByJSONBodySendType = "VPR"
)

// Defines values for ReportOrderParamsSevQueryFilterOrderType.
const (
	ReportOrderParamsSevQueryFilterOrderTypeAB ReportOrderParamsSevQueryFilterOrderType = "AB"
	ReportOrderParamsSevQueryFilterOrderTypeAN ReportOrderParamsSevQueryFilterOrderType = "AN"
	ReportOrderParamsSevQueryFilterOrderTypeLI ReportOrderParamsSevQueryFilterOrderType = "LI"
)

// Defines values for CreateTagJSONBodyObjectObjectName.
const (
	CreateTagJSONBodyObjectObjectNameCreditNote CreateTagJSONBodyObjectObjectName = "CreditNote"
	CreateTagJSONBodyObjectObjectNameInvoice    CreateTagJSONBodyObjectObjectName = "Invoice"
	CreateTagJSONBodyObjectObjectNameOrder      CreateTagJSONBodyObjectObjectName = "Order"
	CreateTagJSONBodyObjectObjectNameVoucher    CreateTagJSONBodyObjectObjectName = "Voucher"
)

// Defines values for GetPlaceholderParamsObjectName.
const (
	GetPlaceholderParamsObjectNameContact    GetPlaceholderParamsObjectName = "Contact"
	GetPlaceholderParamsObjectNameCreditNote GetPlaceholderParamsObjectName = "CreditNote"
	GetPlaceholderParamsObjectNameEmail      GetPlaceholderParamsObjectName = "Email"
	GetPlaceholderParamsObjectNameInvoice    GetPlaceholderParamsObjectName = "Invoice"
	GetPlaceholderParamsObjectNameLetter     GetPlaceholderParamsObjectName = "Letter"
	GetPlaceholderParamsObjectNameOrder      GetPlaceholderParamsObjectName = "Order"
)

// Defines values for GetPlaceholderParamsSubObjectName.
const (
	Contact    GetPlaceholderParamsSubObjectName = "Contact"
	CreditNote GetPlaceholderParamsSubObjectName = "CreditNote"
	Invoice    GetPlaceholderParamsSubObjectName = "Invoice"
	Letter     GetPlaceholderParamsSubObjectName = "Letter"
	Order      GetPlaceholderParamsSubObjectName = "Order"
)

// Defines values for GetVouchersParamsStatus.
const (
	GetVouchersParamsStatusN100  GetVouchersParamsStatus = 100
	GetVouchersParamsStatusN1000 GetVouchersParamsStatus = 1000
	GetVouchersParamsStatusN50   GetVouchersParamsStatus = 50
)

// Defines values for GetVouchersParamsCreditDebit.
const (
	GetVouchersParamsCreditDebitC GetVouchersParamsCreditDebit = "C"
	GetVouchersParamsCreditDebitD GetVouchersParamsCreditDebit = "D"
)

// Defines values for BookVoucherJSONBodyType.
const (
	CB          BookVoucherJSONBodyType = "CB"
	CF          BookVoucherJSONBodyType = "CF"
	FULLPAYMENT BookVoucherJSONBodyType = "FULL_PAYMENT"
	MTC         BookVoucherJSONBodyType = "MTC"
	N           BookVoucherJSONBodyType = "N"
	O           BookVoucherJSONBodyType = "O"
	OF          BookVoucherJSONBodyType = "OF"
)

// ModelAccountingContact Accounting contact model
type ModelAccountingContact struct {
	// Contact The contact to which this accounting contact belongs.
	Contact struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// CreditorNumber Creditor number of the accounting contact.
	CreditorNumber *int `json:"creditorNumber"`

	// DebitorNumber Debitor number of the accounting contact.
	DebitorNumber *int `json:"debitorNumber"`
}

// ModelAccountingContactResponse Accounting contact model
type ModelAccountingContactResponse struct {
	// Contact The contact to which this accounting contact belongs.
	Contact *struct {
		// Id Unique identifier of the contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// Create Date of accounting contact creation
	Create *time.Time `json:"create,omitempty"`

	// CreditorNumber Creditor number of the accounting contact.
	CreditorNumber *string `json:"creditorNumber,omitempty"`

	// DebitorNumber Debitor number of the accounting contact.
	DebitorNumber *string `json:"debitorNumber,omitempty"`

	// Id The accounting contact id
	Id *string `json:"id,omitempty"`

	// ObjectName The accounting contact object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which accounting contact belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Update Date of last accounting contact update
	Update *time.Time `json:"update,omitempty"`
}

// ModelAccountingContactUpdate Accounting contact model
type ModelAccountingContactUpdate struct {
	// Contact The contact to which this accounting contact belongs.
	Contact *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// CreditorNumber Creditor number of the accounting contact.
	CreditorNumber *int `json:"creditorNumber"`

	// DebitorNumber Debitor number of the accounting contact.
	DebitorNumber *int `json:"debitorNumber"`
}

// ModelChangeLayout Layout model
type ModelChangeLayout struct {
	// Key the type to be changed
	Key ModelChangeLayoutKey `json:"key"`

	// Value the id/value of the template/letterpaper/language/payPal.
	Value string `json:"value"`
}

// ModelChangeLayoutKey the type to be changed
type ModelChangeLayoutKey string

// ModelChangeLayoutResponse Layout model
type ModelChangeLayoutResponse struct {
	Metadaten *struct {
		// DocId the id of the document
		DocId *string `json:"docId,omitempty"`

		// Pages the number of pages in the document
		Pages *int `json:"pages,omitempty"`

		// Thumbs the pdf file
		Thumbs *[]struct {
			Key    *string `json:"key,omitempty"`
			Name   *string `json:"name,omitempty"`
			Values *[]struct {
				Name            *string `json:"name,omitempty"`
				TranslationCode *string `json:"translationCode,omitempty"`
				Value           *string `json:"value,omitempty"`
			} `json:"values,omitempty"`
		} `json:"thumbs,omitempty"`
	} `json:"metadaten,omitempty"`
	Result *string `json:"result,omitempty"`
}

// ModelCheckAccount CheckAccount model. Responsible for the payment accounts.
type ModelCheckAccount struct {
	// AccountingNumber The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
	AccountingNumber *string `json:"accountingNumber,omitempty"`

	// AutoMapTransactions Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
	AutoMapTransactions *int `json:"autoMapTransactions"`

	// BankServer Bank server of check account
	BankServer *string `json:"bankServer,omitempty"`

	// Create Date of check account creation
	Create *time.Time `json:"create,omitempty"`

	// Currency The currency of the check account.
	Currency string `json:"currency"`

	// DefaultAccount Defines if this check account is the default account.
	DefaultAccount *ModelCheckAccountDefaultAccount `json:"defaultAccount,omitempty"`

	// Id The check account id
	Id *int `json:"id,omitempty"`

	// ImportType Import type. Transactions can be imported by this method on the check account.
	ImportType *ModelCheckAccountImportType `json:"importType"`

	// Name Name of the check account
	Name string `json:"name"`

	// ObjectName The check account object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which check account belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Status of the check account. 0 <-> Archived - 100 <-> Active
	Status ModelCheckAccountStatus `json:"status"`

	// Type The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
	//      Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
	//      to a bank application can not be managed over the API.
	Type ModelCheckAccountType `json:"type"`

	// Update Date of last check account update
	Update *time.Time `json:"update,omitempty"`
}

// ModelCheckAccountDefaultAccount Defines if this check account is the default account.
type ModelCheckAccountDefaultAccount int

// ModelCheckAccountImportType Import type. Transactions can be imported by this method on the check account.
type ModelCheckAccountImportType string

// ModelCheckAccountStatus Status of the check account. 0 <-> Archived - 100 <-> Active
type ModelCheckAccountStatus int

// ModelCheckAccountType The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
//
//	Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
//	to a bank application can not be managed over the API.
type ModelCheckAccountType string

// ModelCheckAccountResponse CheckAccount model. Responsible for the payment accounts.
type ModelCheckAccountResponse struct {
	// AccountingNumber The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
	AccountingNumber *string `json:"accountingNumber,omitempty"`

	// AutoMapTransactions Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
	AutoMapTransactions *string `json:"autoMapTransactions"`

	// BankServer Bank server of check account, only set if the account is connected to a data provider
	BankServer *string `json:"bankServer"`

	// Create Date of check account creation
	Create *time.Time `json:"create,omitempty"`

	// Currency The currency of the check account.
	Currency *string `json:"currency,omitempty"`

	// DefaultAccount Defines if this check account is the default account.
	DefaultAccount *string `json:"defaultAccount,omitempty"`

	// Iban The IBAN of the account
	Iban *string `json:"iban"`

	// Id The check account id
	Id *string `json:"id,omitempty"`

	// ImportType Import type, for accounts that are type "online" but not connected to a data provider. Transactions can be imported by this method on the check account.
	ImportType *ModelCheckAccountResponseImportType `json:"importType"`

	// Name Name of the check account
	Name *string `json:"name,omitempty"`

	// ObjectName The check account object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which check account belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Status of the check account. 0 <-> Archived - 100 <-> Active
	Status *ModelCheckAccountResponseStatus `json:"status,omitempty"`

	// Type The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
	//      Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
	//      to a bank application can not be managed over the API.
	Type *ModelCheckAccountResponseType `json:"type,omitempty"`

	// Update Date of last check account update
	Update *time.Time `json:"update,omitempty"`
}

// ModelCheckAccountResponseImportType Import type, for accounts that are type "online" but not connected to a data provider. Transactions can be imported by this method on the check account.
type ModelCheckAccountResponseImportType string

// ModelCheckAccountResponseStatus Status of the check account. 0 <-> Archived - 100 <-> Active
type ModelCheckAccountResponseStatus string

// ModelCheckAccountResponseType The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
//
//	Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
//	to a bank application can not be managed over the API.
type ModelCheckAccountResponseType string

// ModelCheckAccountTransaction CheckAccountTransaction model. Responsible for the transactions on payment accounts.
type ModelCheckAccountTransaction struct {
	// Amount Amount of the transaction
	Amount float32 `json:"amount"`

	// CheckAccount The check account to which the transaction belongs
	CheckAccount struct {
		// Id Unique identifier of the check account
		Id int `json:"id"`

		// ObjectName Model name, which is 'CheckAccount'
		ObjectName string `json:"objectName"`
	} `json:"checkAccount"`

	// Create Date of check account transaction creation
	Create *time.Time `json:"create,omitempty"`

	// EntryDate Date the check account transaction was imported
	EntryDate *time.Time `json:"entryDate"`

	// Id The check account transaction id
	Id *int `json:"id,omitempty"`

	// ObjectName The check account transaction object name
	ObjectName *string `json:"objectName,omitempty"`

	// PayeePayerAcctNo IBAN or account number of the other party
	PayeePayerAcctNo *string `json:"payeePayerAcctNo"`

	// PayeePayerBankCode BIC or bank code of the other party
	PayeePayerBankCode *string `json:"payeePayerBankCode"`

	// PayeePayerName Name of the other party
	PayeePayerName *string `json:"payeePayerName"`

	// PaymtPurpose The purpose of the transaction
	PaymtPurpose *string `json:"paymtPurpose"`

	// SevClient Client to which check account transaction belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SourceTransaction The check account transaction serving as the source of the rebooking
	SourceTransaction *struct {
		// Id Unique identifier of the check account transaction
		Id int `json:"id"`

		// ObjectName Model name, which is 'CheckAccountTransaction'
		ObjectName string `json:"objectName"`
	} `json:"sourceTransaction"`

	// Status Status of the check account transaction.<br>
	//      100 <-> Created<br>
	//      200 <-> Linked<br>
	//      300 <-> Private<br>
	//      400 <-> Booked
	Status ModelCheckAccountTransactionStatus `json:"status"`

	// TargetTransaction The check account transaction serving as the target of the rebooking
	TargetTransaction *struct {
		// Id Unique identifier of the check account transaction
		Id int `json:"id"`

		// ObjectName Model name, which is 'CheckAccountTransaction'
		ObjectName string `json:"objectName"`
	} `json:"targetTransaction"`

	// Update Date of last check account transaction update
	Update *time.Time `json:"update,omitempty"`

	// ValueDate Date the check account transaction was booked
	ValueDate time.Time `json:"valueDate"`
}

// ModelCheckAccountTransactionStatus Status of the check account transaction.<br>
//
//	100 <-> Created<br>
//	200 <-> Linked<br>
//	300 <-> Private<br>
//	400 <-> Booked
type ModelCheckAccountTransactionStatus int

// ModelCheckAccountTransactionResponse CheckAccountTransaction model. Responsible for the transactions on payment accounts.
type ModelCheckAccountTransactionResponse struct {
	// Amount Amount of the transaction
	Amount *string `json:"amount,omitempty"`

	// CheckAccount The check account to which the transaction belongs
	CheckAccount *struct {
		// Id Unique identifier of the check account
		Id string `json:"id"`

		// ObjectName Model name, which is 'CheckAccount'
		ObjectName string `json:"objectName"`
	} `json:"checkAccount,omitempty"`

	// Create Date of check account transaction creation
	Create *time.Time `json:"create,omitempty"`

	// Enshrined Can only be set via [CheckAccountTransaction/{checkAccountTransactionId}/enshrine](#tag/CheckAccountTransaction/operation/checkAccountTransactionEnshrine)
	Enshrined *time.Time `json:"enshrined,omitempty"`

	// EntryDate Date the check account transaction was booked
	EntryDate *time.Time `json:"entryDate"`

	// Id The check account transaction id
	Id *string `json:"id,omitempty"`

	// ObjectName The check account transaction object name
	ObjectName *string `json:"objectName,omitempty"`

	// PayeePayerAcctNo IBAN or account number of the other party
	PayeePayerAcctNo *string `json:"payeePayerAcctNo"`

	// PayeePayerBankCode BIC or bank code of the other party
	PayeePayerBankCode *string `json:"payeePayerBankCode"`

	// PayeePayerName Name of the other party
	PayeePayerName *string `json:"payeePayerName"`

	// PaymtPurpose The purpose of the transaction
	PaymtPurpose *string `json:"paymtPurpose"`

	// SevClient Client to which check account transaction belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SourceTransaction The check account transaction serving as the source of the rebooking
	SourceTransaction *struct {
		// Id Unique identifier of the check account transaction
		Id string `json:"id"`

		// ObjectName Model name, which is 'CheckAccountTransaction'
		ObjectName string `json:"objectName"`
	} `json:"sourceTransaction,omitempty"`

	// Status Status of the check account transaction.<br>
	//      100 <-> Created<br>
	//      200 <-> Linked<br>
	//      300 <-> Private<br>
	//      400 <-> Booked
	Status *ModelCheckAccountTransactionResponseStatus `json:"status,omitempty"`

	// TargetTransaction The check account transaction serving as the target of the rebooking
	TargetTransaction *struct {
		// Id Unique identifier of the check account transaction
		Id string `json:"id"`

		// ObjectName Model name, which is 'CheckAccountTransaction'
		ObjectName string `json:"objectName"`
	} `json:"targetTransaction,omitempty"`

	// Update Date of last check account transaction update
	Update *time.Time `json:"update,omitempty"`

	// ValueDate Date the check account transaction was imported
	ValueDate *time.Time `json:"valueDate,omitempty"`
}

// ModelCheckAccountTransactionResponseStatus Status of the check account transaction.<br>
//
//	100 <-> Created<br>
//	200 <-> Linked<br>
//	300 <-> Private<br>
//	400 <-> Booked
type ModelCheckAccountTransactionResponseStatus string

// ModelCheckAccountTransactionUpdate CheckAccountTransaction model. Responsible for the transactions on payment accounts.
type ModelCheckAccountTransactionUpdate struct {
	// Amount Amount of the transaction
	Amount *float32 `json:"amount"`

	// CheckAccount The check account to which the transaction belongs
	CheckAccount *struct {
		// Id Unique identifier of the check account
		Id int `json:"id"`

		// ObjectName Model name, which is 'CheckAccount'
		ObjectName string `json:"objectName"`
	} `json:"checkAccount,omitempty"`

	// EntryDate Date the check account transaction was imported
	EntryDate *time.Time `json:"entryDate"`

	// PayeePayerName Name of the payee/payer
	PayeePayerName *string `json:"payeePayerName"`

	// PaymtPurpose the purpose of the transaction
	PaymtPurpose *string `json:"paymtPurpose,omitempty"`

	// SourceTransaction The check account transaction serving as the source of the rebooking
	SourceTransaction *struct {
		// Id Unique identifier of the check account transaction
		Id int `json:"id"`

		// ObjectName Model name, which is 'CheckAccountTransaction'
		ObjectName string `json:"objectName"`
	} `json:"sourceTransaction"`

	// Status Status of the check account transaction.<br>
	//      100 <-> Created<br>
	//      200 <-> Linked<br>
	//      300 <-> Private<br>
	//      400 <-> Booked
	Status *ModelCheckAccountTransactionUpdateStatus `json:"status,omitempty"`

	// TargetTransaction The check account transaction serving as the target of the rebooking
	TargetTransaction *struct {
		// Id Unique identifier of the check account transaction
		Id int `json:"id"`

		// ObjectName Model name, which is 'CheckAccountTransaction'
		ObjectName string `json:"objectName"`
	} `json:"targetTransaction"`

	// ValueDate Date the check account transaction was booked
	ValueDate *time.Time `json:"valueDate,omitempty"`
}

// ModelCheckAccountTransactionUpdateStatus Status of the check account transaction.<br>
//
//	100 <-> Created<br>
//	200 <-> Linked<br>
//	300 <-> Private<br>
//	400 <-> Booked
type ModelCheckAccountTransactionUpdateStatus int

// ModelCheckAccountUpdate CheckAccount model. Responsible for the payment accounts.
type ModelCheckAccountUpdate struct {
	// AccountingNumber The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
	AccountingNumber *string `json:"accountingNumber,omitempty"`

	// AutoMapTransactions Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
	AutoMapTransactions *int `json:"autoMapTransactions"`

	// Currency The currency of the check account.
	Currency *string `json:"currency,omitempty"`

	// DefaultAccount Defines if this check account is the default account.
	DefaultAccount *ModelCheckAccountUpdateDefaultAccount `json:"defaultAccount,omitempty"`

	// ImportType Import type. Transactions can be imported by this method on the check account.
	ImportType *ModelCheckAccountUpdateImportType `json:"importType"`

	// Name Name of the check account
	Name *string `json:"name,omitempty"`

	// Status Status of the check account. 0 <-> Archived - 100 <-> Active
	Status *ModelCheckAccountUpdateStatus `json:"status,omitempty"`

	// Type The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
	//      Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
	//      to a bank application can not be managed over the API.
	Type *ModelCheckAccountUpdateType `json:"type,omitempty"`
}

// ModelCheckAccountUpdateDefaultAccount Defines if this check account is the default account.
type ModelCheckAccountUpdateDefaultAccount int

// ModelCheckAccountUpdateImportType Import type. Transactions can be imported by this method on the check account.
type ModelCheckAccountUpdateImportType string

// ModelCheckAccountUpdateStatus Status of the check account. 0 <-> Archived - 100 <-> Active
type ModelCheckAccountUpdateStatus int

// ModelCheckAccountUpdateType The type of the check account. Account with a CSV or MT940 import are regarded as online.<br>
//
//	Apart from that, created check accounts over the API need to be offline, as online accounts with an active connection
//	to a bank application can not be managed over the API.
type ModelCheckAccountUpdateType string

// ModelCommunicationWay Contact communication way model
type ModelCommunicationWay struct {
	// Contact The contact to which this communication way belongs.
	Contact *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// Create Date of communication way creation
	Create *time.Time `json:"create,omitempty"`

	// Id The communication way id
	Id *int `json:"id,omitempty"`

	// Key The key of the communication way.<br>
	// Similar to the category of addresses.<br>
	// For all communication way keys please send a GET to /CommunicationWayKey.
	Key struct {
		// Id Unique identifier of the key
		Id int `json:"id"`

		// ObjectName Model name, which is 'CommunicationWayKey'
		ObjectName string `json:"objectName"`
	} `json:"key"`

	// Main Defines whether the communication way is the main communication way for the contact.
	Main *bool `json:"main"`

	// ObjectName The communication way object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which communication way key belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Type Type of the communication way
	Type ModelCommunicationWayType `json:"type"`

	// Update Date of last communication way update
	Update *time.Time `json:"update,omitempty"`

	// Value The value of the communication way.<br>
	//      For example the phone number, e-mail address or website.
	Value string `json:"value"`
}

// ModelCommunicationWayType Type of the communication way
type ModelCommunicationWayType string

// ModelCommunicationWayResponse Contact communication way model
type ModelCommunicationWayResponse struct {
	// Contact The contact to which this communication way belongs.
	Contact *struct {
		// Id Unique identifier of the contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// Create Date of communication way creation
	Create *time.Time `json:"create,omitempty"`

	// Id The communication way id
	Id *string `json:"id,omitempty"`

	// Key The key of the communication way.<br>
	// Similar to the category of addresses.<br>
	// For all communication way keys please send a GET to /CommunicationWayKey.
	Key *struct {
		// Id Unique identifier of the key
		Id string `json:"id"`

		// ObjectName Model name, which is 'CommunicationWayKey'
		ObjectName string `json:"objectName"`
	} `json:"key,omitempty"`

	// Main Defines whether the communication way is the main communication way for the contact.
	Main *string `json:"main,omitempty"`

	// ObjectName The communication way object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which communication way key belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Type Type of the communication way
	Type *ModelCommunicationWayResponseType `json:"type,omitempty"`

	// Update Date of last communication way update
	Update *time.Time `json:"update,omitempty"`

	// Value The value of the communication way.<br>
	//      For example the phone number, e-mail address or website.
	Value *string `json:"value,omitempty"`
}

// ModelCommunicationWayResponseType Type of the communication way
type ModelCommunicationWayResponseType string

// ModelCommunicationWayUpdate Contact communication way model
type ModelCommunicationWayUpdate struct {
	// Contact The contact to which this communication way belongs.
	Contact *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// Key The key of the communication way.<br>
	// Similar to the category of addresses.<br>
	// For all communication way keys please send a GET to /CommunicationWayKey.
	Key *struct {
		// Id Unique identifier of the key
		Id int `json:"id"`

		// ObjectName Model name, which is 'CommunicationWayKey'
		ObjectName string `json:"objectName"`
	} `json:"key"`

	// Main Defines whether the communication way is the main communication way for the contact.
	Main *bool `json:"main"`

	// Type Type of the communication way
	Type *ModelCommunicationWayUpdateType `json:"type,omitempty"`

	// Value The value of the communication way.<br>
	//      For example the phone number, e-mail address or website.
	Value *string `json:"value,omitempty"`
}

// ModelCommunicationWayUpdateType Type of the communication way
type ModelCommunicationWayUpdateType string

// ModelContact Contact model
type ModelContact struct {
	// AcademicTitle A academic title for the contact.
	// Not to be used for organizations.
	AcademicTitle *string `json:"academicTitle"`

	// BankAccount Bank account number (IBAN) of the contact.
	BankAccount *string `json:"bankAccount"`

	// BankNumber Bank number of the bank used by the contact.
	BankNumber *string `json:"bankNumber"`

	// Birthday Birthday of the contact.<br>
	// Not to be used for organizations.
	Birthday *openapi_types.Date `json:"birthday"`

	// BuyerReference Buyer reference of the contact.
	BuyerReference *string `json:"buyerReference"`

	// Category Category of the contact.<br> For more information,
	//      see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>.
	Category struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// CustomerNumber The customer number
	CustomerNumber *string `json:"customerNumber"`

	// DefaultCashbackPercent Percentage of the invoice sum the contact gets back if he paid invoices in time.
	DefaultCashbackPercent *float32 `json:"defaultCashbackPercent"`

	// DefaultCashbackTime Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.
	DefaultCashbackTime *int `json:"defaultCashbackTime"`

	// DefaultDiscountAmount The default discount the contact gets for every invoice.<br>
	// Depending on defaultDiscountPercentage attribute, in percent or absolute value.
	DefaultDiscountAmount *float32 `json:"defaultDiscountAmount"`

	// DefaultDiscountPercentage Defines if the discount is a percentage (true) or an absolute value (false).
	DefaultDiscountPercentage *bool `json:"defaultDiscountPercentage"`

	// DefaultTimeToPay The payment goal in days which is set for every invoice of the contact.
	DefaultTimeToPay *int `json:"defaultTimeToPay"`

	// Description A description for the contact.
	Description *string `json:"description"`

	// ExemptVat Defines if the contact is freed from paying vat.
	ExemptVat *bool `json:"exemptVat"`

	// Familyname The last name of the contact.<br>
	// Not to be used for organizations.
	Familyname *string `json:"familyname"`

	// Gender Gender of the contact.<br>
	// Not to be used for organizations.
	Gender *string `json:"gender"`

	// GovernmentAgency Defines whether the contact is a government agency (true) or not (false).
	GovernmentAgency *bool `json:"governmentAgency"`

	// Name The organization name.<br>
	// Be aware that the type of contact will depend on this attribute.<br>
	// If it holds a value, the contact will be regarded as an organization.
	Name *string `json:"name"`

	// Name2 Second name of the contact.<br>
	// Not to be used for organizations.
	Name2 *string `json:"name2"`

	// Parent The parent contact to which this contact belongs. Must be an organization.
	Parent *struct {
		// Id Unique identifier of the parent contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"parent"`

	// Status Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.
	Status *int `json:"status"`

	// Surename The <b>first</b> name of the contact.<br>
	// Yeah... not quite right in literally every way. We know.<br>
	// Not to be used for organizations.
	Surename *string `json:"surename"`

	// TaxNumber The tax number of the contact.
	TaxNumber *string `json:"taxNumber"`

	// TaxOffice The tax office of the contact (only for greek customers).
	TaxOffice *string `json:"taxOffice"`

	// Titel A non-academic title for the contact.
	// Not to be used for organizations.
	Titel *string `json:"titel"`

	// VatNumber Vat number of the contact.
	VatNumber *string `json:"vatNumber"`
}

// ModelContactAddress ContactAddress model
type ModelContactAddress struct {
	// Category Category of the contact address.<br>
	//      For all categories, send a GET to /Category?objectType=ContactAddress.
	Category *struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// City City name
	City *string `json:"city"`

	// Contact The contact to which this contact address belongs.
	Contact struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// Country Country of the contact address.<br>
	//     For all countries, send a GET to /StaticCountry
	Country struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"country"`

	// Create Date of contact address creation
	Create *time.Time `json:"create,omitempty"`

	// Id The contact address id
	Id *int `json:"id,omitempty"`

	// Name Name in address
	Name *string `json:"name"`

	// Name2 Second name in address
	Name2 *string `json:"name2,omitempty"`

	// Name3 Third name in address
	Name3 *string `json:"name3"`

	// Name4 Fourth name in address
	Name4 *string `json:"name4"`

	// ObjectName The contact address object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which contact address belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Street Street name
	Street *string `json:"street"`

	// Update Date of last contact address update
	Update *time.Time `json:"update,omitempty"`

	// Zip Zib code
	Zip *string `json:"zip"`
}

// ModelContactAddressResponse ContactAddress model
type ModelContactAddressResponse struct {
	// Category Category of the contact address.<br>
	//      For all categories, send a GET to /Category?objectType=ContactAddress.
	Category *struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// City City name
	City *string `json:"city"`

	// Contact The contact to which this contact address belongs.
	Contact struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// Country Country of the contact address.<br>
	//     For all countries, send a GET to /StaticCountry
	Country struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"country"`

	// Create Date of contact address creation
	Create *time.Time `json:"create,omitempty"`

	// Id The contact address id
	Id *int `json:"id,omitempty"`

	// Name Name in address
	Name *string `json:"name"`

	// Name2 Second name in address
	Name2 *string `json:"name2,omitempty"`

	// Name3 Third name in address
	Name3 *string `json:"name3"`

	// Name4 Fourth name in address
	Name4 *string `json:"name4"`

	// ObjectName The contact address object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which contact address belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Street Street name
	Street *string `json:"street"`

	// Update Date of last contact address update
	Update *time.Time `json:"update,omitempty"`

	// Zip Zib code
	Zip *string `json:"zip"`
}

// ModelContactAddressUpdate ContactAddress model
type ModelContactAddressUpdate struct {
	// Category Category of the contact address.<br>
	//      For all categories, send a GET to /Category?objectType=ContactAddress.
	Category *struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// City City name
	City *string `json:"city"`

	// Contact The contact to which this contact address belongs.
	Contact *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// Country Country of the contact address.<br>
	//     For all countries, send a GET to /StaticCountry
	Country *struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"country"`

	// Name Name in address
	Name *string `json:"name"`

	// Name2 Second name in address
	Name2 *string `json:"name2,omitempty"`

	// Name3 Third name in address
	Name3 *string `json:"name3"`

	// Name4 Fourth name in address
	Name4 *string `json:"name4"`

	// Street Street name
	Street *string `json:"street"`

	// Zip Zib code
	Zip *string `json:"zip"`
}

// ModelContactCustomField Contact fields model
type ModelContactCustomField struct {
	// Contact name of the contact
	Contact struct {
		// Id Unique identifier of contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactCustomFieldSetting name of the contact custom field setting
	ContactCustomFieldSetting struct {
		// Id Unique identifier of contact custom field setting
		Id int `json:"id"`

		// ObjectName Model name, which is 'ContactCustomFieldSetting'
		ObjectName string `json:"objectName"`
	} `json:"contactCustomFieldSetting"`

	// ObjectName Internal object name which is 'ContactCustomField'.
	ObjectName string `json:"objectName"`

	// Value The value of the contact field
	Value string `json:"value"`
}

// ModelContactCustomFieldResponse contact fields model
type ModelContactCustomFieldResponse struct {
	// Contact name of the contact
	Contact *struct {
		// Id Unique identifier of contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// ContactCustomFieldSetting the contact custom field setting
	ContactCustomFieldSetting *ModelContactCustomFieldSettingResponse `json:"contactCustomFieldSetting,omitempty"`

	// Create Date of contact field creation
	Create *time.Time `json:"create,omitempty"`

	// Id id of the contact field
	Id *string `json:"id,omitempty"`

	// ObjectName Internal object name which is 'ContactCustomField'.
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which contact field belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Update Date of contact field update
	Update *time.Time `json:"update,omitempty"`

	// Value The value of the contact field
	Value *string `json:"value,omitempty"`
}

// ModelContactCustomFieldSetting contact field settings model
type ModelContactCustomFieldSetting struct {
	// Description The description of the contact field
	Description *string `json:"description,omitempty"`

	// Name name of the contact fields
	Name string `json:"name"`

	// ObjectName Internal object name which is 'ContactCustomFieldSetting'.
	ObjectName *string `json:"objectName,omitempty"`
}

// ModelContactCustomFieldSettingResponse contact fields model
type ModelContactCustomFieldSettingResponse struct {
	// Create Date of contact field creation
	Create *time.Time `json:"create,omitempty"`

	// Description The description of the contact field
	Description *string `json:"description,omitempty"`

	// Id Id of the contact field
	Id *string `json:"id,omitempty"`

	// Identifier Unique identifier for the contact field
	Identifier *string `json:"identifier,omitempty"`

	// Name name of the contact fields
	Name *string `json:"name,omitempty"`

	// ObjectName Internal object name which is 'ContactCustomFieldSetting'.
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which invoice belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Update Date of contact field updated
	Update *time.Time `json:"update,omitempty"`
}

// ModelContactCustomFieldSettingUpdate contact fields model
type ModelContactCustomFieldSettingUpdate struct {
	// Description The description of the contact field
	Description *string `json:"description,omitempty"`

	// Name name of the contact fields
	Name *string `json:"name,omitempty"`

	// ObjectName Internal object name which is 'ContactCustomFieldSetting'.
	ObjectName *string `json:"objectName,omitempty"`
}

// ModelContactCustomFieldUpdate contact fields model
type ModelContactCustomFieldUpdate struct {
	// Contact name of the contact
	Contact *struct {
		// Id Unique identifier of contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// ContactCustomFieldSetting name of the contact custom field setting
	ContactCustomFieldSetting *struct {
		// Id Unique identifier of contact custom field setting
		Id int `json:"id"`

		// ObjectName Model name, which is 'contactCustomFieldSetting'
		ObjectName string `json:"objectName"`
	} `json:"contactCustomFieldSetting,omitempty"`

	// ObjectName Internal object name which is 'ContactCustomField'.
	ObjectName *string `json:"objectName,omitempty"`

	// Value The value of the contact field
	Value *string `json:"value,omitempty"`
}

// ModelContactResponse Contact model
type ModelContactResponse struct {
	// AcademicTitle A academic title for the contact.
	// Not to be used for organizations.
	AcademicTitle *string `json:"academicTitle,omitempty"`

	// AdditionalInformation Additional information stored for the contact.
	// Deprecated:
	AdditionalInformation *string `json:"additionalInformation,omitempty"`

	// BankAccount Bank account number (IBAN) of the contact.
	BankAccount *string `json:"bankAccount,omitempty"`

	// BankNumber Bank number of the bank used by the contact.
	BankNumber *string `json:"bankNumber,omitempty"`

	// Birthday Birthday of the contact.<br>
	// Not to be used for organizations.
	Birthday *openapi_types.Date `json:"birthday,omitempty"`

	// BuyerReference Buyer reference of the contact.
	BuyerReference *string `json:"buyerReference,omitempty"`

	// Category Category of the contact.<br> For more information,
	//      see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>.
	Category *struct {
		// Id Unique identifier of the category
		Id string `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category,omitempty"`

	// Create Date of contact creation
	Create *time.Time `json:"create,omitempty"`

	// CustomerNumber The customer number
	CustomerNumber *string `json:"customerNumber,omitempty"`

	// DefaultCashbackPercent Percentage of the invoice sum the contact gets back if he paid invoices in time.
	DefaultCashbackPercent *string `json:"defaultCashbackPercent,omitempty"`

	// DefaultCashbackTime Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.
	DefaultCashbackTime *string `json:"defaultCashbackTime,omitempty"`

	// DefaultDiscountAmount The default discount the contact gets for every invoice.<br>
	// Depending on defaultDiscountPercentage attribute, in percent or absolute value.
	DefaultDiscountAmount *string `json:"defaultDiscountAmount,omitempty"`

	// DefaultDiscountPercentage Defines if the discount is a percentage (true) or an absolute value (false).
	DefaultDiscountPercentage *string `json:"defaultDiscountPercentage,omitempty"`

	// DefaultTimeToPay The payment goal in days which is set for every invoice of the contact.
	DefaultTimeToPay *string `json:"defaultTimeToPay,omitempty"`

	// Description A description for the contact.
	Description *string `json:"description,omitempty"`

	// ExemptVat Defines if the contact is freed from paying vat.
	ExemptVat *string `json:"exemptVat,omitempty"`

	// Familyname The last name of the contact.<br>
	// Not to be used for organizations.
	Familyname *string `json:"familyname,omitempty"`

	// Gender Gender of the contact.<br>
	// Not to be used for organizations.
	Gender *string `json:"gender,omitempty"`

	// GovernmentAgency Defines whether the contact is a government agency (true) or not (false).
	GovernmentAgency *string `json:"governmentAgency,omitempty"`

	// Id The contact id
	Id *string `json:"id,omitempty"`

	// Name The organization name.<br>
	// Be aware that the type of contact will depend on this attribute.<br>
	// If it holds a value, the contact will be regarded as an organization.
	Name *string `json:"name,omitempty"`

	// Name2 Second name of the contact.<br>
	// Not to be used for organizations.
	Name2 *string `json:"name2,omitempty"`

	// ObjectName The contact object name
	ObjectName *string `json:"objectName,omitempty"`

	// Parent The parent contact to which this contact belongs. Must be an organization.
	Parent *struct {
		// Id Unique identifier of the parent contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"parent,omitempty"`

	// SevClient Client to which contact belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.
	Status *string `json:"status,omitempty"`

	// Surename The <b>first</b> name of the contact.<br>
	// Yeah... not quite right in literally every way. We know.<br>
	// Not to be used for organizations.
	Surename *string `json:"surename,omitempty"`

	// TaxNumber The tax number of the contact.
	TaxNumber *string `json:"taxNumber,omitempty"`

	// TaxOffice The tax office of the contact (only for greek customers).
	TaxOffice *string `json:"taxOffice,omitempty"`

	// Titel A non-academic title for the contact.
	// Not to be used for organizations.
	Titel *string `json:"titel,omitempty"`

	// Update Date of last contact update
	Update *time.Time `json:"update,omitempty"`

	// VatNumber Vat number of the contact.
	VatNumber *string `json:"vatNumber,omitempty"`
}

// ModelContactUpdate Contact model
type ModelContactUpdate struct {
	// AcademicTitle A academic title for the contact.
	// Not to be used for organizations.
	AcademicTitle *string `json:"academicTitle"`

	// BankAccount Bank account number (IBAN) of the contact.
	BankAccount *string `json:"bankAccount"`

	// BankNumber Bank number of the bank used by the contact.
	BankNumber *string `json:"bankNumber"`

	// Birthday Birthday of the contact.<br>
	// Not to be used for organizations.
	Birthday *openapi_types.Date `json:"birthday"`

	// BuyerReference Buyer reference of the contact.
	BuyerReference *string `json:"buyerReference"`

	// Category Category of the contact.<br> For more information,
	//      see <a href='https://my.sevdesk.de/apiOverview/index.html#/doc-contacts#types'>here</a>.
	Category *struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// CustomerNumber The customer number
	CustomerNumber *string `json:"customerNumber"`

	// DefaultCashbackPercent Percentage of the invoice sum the contact gets back if he paid invoices in time.
	DefaultCashbackPercent *float32 `json:"defaultCashbackPercent"`

	// DefaultCashbackTime Absolute time in days which the contact has to pay his invoices and subsequently get a cashback.
	DefaultCashbackTime *int `json:"defaultCashbackTime"`

	// DefaultDiscountAmount The default discount the contact gets for every invoice.<br>
	// Depending on defaultDiscountPercentage attribute, in percent or absolute value.
	DefaultDiscountAmount *float32 `json:"defaultDiscountAmount"`

	// DefaultDiscountPercentage Defines if the discount is a percentage (true) or an absolute value (false).
	DefaultDiscountPercentage *bool `json:"defaultDiscountPercentage"`

	// DefaultTimeToPay The payment goal in days which is set for every invoice of the contact.
	DefaultTimeToPay *int `json:"defaultTimeToPay"`

	// Description A description for the contact.
	Description *string `json:"description"`

	// ExemptVat Defines if the contact is freed from paying vat.
	ExemptVat *bool `json:"exemptVat"`

	// Familyname The last name of the contact.<br>
	// Not to be used for organizations.
	Familyname *string `json:"familyname"`

	// Gender Gender of the contact.<br>
	// Not to be used for organizations.
	Gender *string `json:"gender"`

	// GovernmentAgency Defines whether the contact is a government agency (true) or not (false).
	GovernmentAgency *bool `json:"governmentAgency"`

	// Name The organization name.<br>
	// Be aware that the type of contact will depend on this attribute.<br>
	// If it holds a value, the contact will be regarded as an organization.
	Name *string `json:"name"`

	// Name2 Second name of the contact.<br>
	// Not to be used for organizations.
	Name2 *string `json:"name2"`

	// Parent The parent contact to which this contact belongs. Must be an organization.
	Parent *struct {
		// Id Unique identifier of the parent contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"parent"`

	// Status Defines the status of the contact. 100 <-> Lead - 500 <-> Pending - 1000 <-> Active.
	Status *int `json:"status"`

	// Surename The <b>first</b> name of the contact.<br>
	// Yeah... not quite right in literally every way. We know.<br>
	// Not to be used for organizations.
	Surename *string `json:"surename"`

	// TaxNumber The tax number of the contact.
	TaxNumber *string `json:"taxNumber"`

	// TaxOffice The tax office of the contact (only for greek customers).
	TaxOffice *string `json:"taxOffice"`

	// Titel A non-academic title for the contact.
	// Not to be used for organizations.
	Titel *string `json:"titel"`

	// VatNumber Vat number of the contact.
	VatNumber *string `json:"vatNumber"`
}

// ModelCreateInvoiceFromOrder Invoice model
type ModelCreateInvoiceFromOrder struct {
	// Amount Amount which has already been paid for this Invoice
	Amount *float32 `json:"amount"`

	// Order select the order for which you want to create the invoice
	Order struct {
		// Id Unique identifier of the order
		Id int `json:"id"`

		// ObjectName Model name, which is 'Order'
		ObjectName string `json:"objectName"`
	} `json:"order"`

	// PartialType defines the type of the invoice
	// 1. RE - Schlussrechnung
	// 2. TR - Teilrechnung
	// 3. AR - Abschlagsrechnung
	PartialType *ModelCreateInvoiceFromOrderPartialType `json:"partialType"`

	// Type defines the type of amount
	Type *ModelCreateInvoiceFromOrderType `json:"type"`
}

// ModelCreateInvoiceFromOrderPartialType defines the type of the invoice
// 1. RE - Schlussrechnung
// 2. TR - Teilrechnung
// 3. AR - Abschlagsrechnung
type ModelCreateInvoiceFromOrderPartialType string

// ModelCreateInvoiceFromOrderType defines the type of amount
type ModelCreateInvoiceFromOrderType string

// ModelCreatePackingListFromOrder order model
type ModelCreatePackingListFromOrder struct {
	// Id Unique identifier of the order
	Id int `json:"id"`

	// ObjectName Model name, which is 'Order'
	ObjectName string `json:"objectName"`
}

// ModelCreditNoteSendByWithRender defines model for Model_CreditNote_sendByWithRender.
type ModelCreditNoteSendByWithRender struct {
	DocId      *string `json:"docId,omitempty"`
	Pages      *int    `json:"pages,omitempty"`
	Parameters *[]struct {
		Key    *string `json:"key,omitempty"`
		Name   *string `json:"name,omitempty"`
		Value  *string `json:"value,omitempty"`
		Values *[]struct {
			Name            *string `json:"name,omitempty"`
			TranslationCade *string `json:"translationCade,omitempty"`
			Value           *string `json:"value,omitempty"`
		} `json:"values,omitempty"`
		Visible *bool `json:"visible,omitempty"`
	} `json:"parameters,omitempty"`
	Thumbs *[]interface{} `json:"thumbs,omitempty"`
}

// ModelDiscount Discount model
type ModelDiscount struct {
	// Create Date of discount creation
	Create *time.Time `json:"create,omitempty"`

	// Id the id of the discount
	Id *string `json:"id,omitempty"`

	// IsNet Defines is the Discount net or gross
	// 0 - gross
	// 1 - net
	IsNet *string `json:"isNet,omitempty"`

	// Object The order used for the discount
	Object *struct {
		// Id Unique identifier of the order
		Id string `json:"id"`

		// ObjectName Model name, which is 'Order'
		ObjectName string `json:"objectName"`
	} `json:"object,omitempty"`

	// ObjectName Model name, which is 'Discounts'
	ObjectName *string `json:"objectName,omitempty"`

	// Percentage Defines if this is a percentage or an absolute discount
	Percentage *string `json:"percentage,omitempty"`

	// SevClient Client to which invoice belongs. Will be filled automatically
	SevClient *string `json:"sevClient,omitempty"`

	// Text A text describing your position.
	Text *string `json:"text,omitempty"`

	// Update Date of last discount update
	Update *time.Time `json:"update,omitempty"`

	// Value Value of the discount
	Value *string `json:"value,omitempty"`
}

// ModelEmail Email model
type ModelEmail struct {
	// Arrived Date the mail arrived
	Arrived *time.Time `json:"arrived"`

	// Bcc A list of mail addresses which are in the bcc
	Bcc *string `json:"bcc"`

	// Cc A list of mail addresses which are in the cc
	Cc *string `json:"cc"`

	// Create Date of mail creation
	Create *time.Time `json:"create,omitempty"`

	// From The sender of the email
	From string `json:"from"`

	// Id The email id
	Id *int `json:"id,omitempty"`

	// Object Invoice model
	Object *ModelInvoiceResponse `json:"object,omitempty"`

	// ObjectName The email object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which mail belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Subject The subject of the email
	Subject string `json:"subject"`

	// Text The text of the email
	Text *string `json:"text"`

	// To The recipient of the email
	To string `json:"to"`

	// Update Date of last mail update
	Update *time.Time `json:"update,omitempty"`
}

// ModelEmailOrder Email model
type ModelEmailOrder struct {
	// Arrived Date the mail arrived
	Arrived *time.Time `json:"arrived"`

	// Bcc A list of mail addresses which are in the bcc
	Bcc *string `json:"bcc"`

	// Cc A list of mail addresses which are in the cc
	Cc *string `json:"cc"`

	// Create Date of mail creation
	Create *time.Time `json:"create,omitempty"`

	// From The sender of the email
	From string `json:"from"`

	// Id The email id
	Id *int `json:"id,omitempty"`

	// Object Order model
	Object *ModelOrderResponse `json:"object,omitempty"`

	// ObjectName The email object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which mail belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Subject The subject of the email
	Subject string `json:"subject"`

	// Text The text of the email
	Text *string `json:"text"`

	// To The recipient of the email
	To string `json:"to"`

	// Update Date of last mail update
	Update *time.Time `json:"update,omitempty"`
}

// ModelInvoice Invoice model
type ModelInvoice struct {
	// AccountIntervall The interval in which recurring invoices are due as ISO-8601 duration.<br>
	//      Necessary attribute for all recurring invoices.
	AccountIntervall *string `json:"accountIntervall"`

	// AccountNextInvoice Timestamp when the next invoice will be generated by this recurring invoice.
	AccountNextInvoice *int `json:"accountNextInvoice"`

	// Address Complete address of the recipient including name, street, city, zip and country.
	//      * Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// Contact The contact used in the invoice
	Contact struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactPerson The user who acts as a contact person for the invoice
	ContactPerson struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson"`

	// Create Date of invoice creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// Currency Currency used in the invoice. Needs to be currency code according to ISO-4217
	Currency string `json:"currency"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
	DeliveryDate *time.Time `json:"deliveryDate"`

	// DeliveryDateUntil If the delivery date should be a time range, another timestamp can be provided in this attribute
	//      * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
	DeliveryDateUntil *int `json:"deliveryDateUntil"`

	// Discount If you want to give a discount, define the percentage here. Otherwise provide zero as value
	Discount int `json:"discount"`

	// DunningLevel Defines how many reminders have already been sent for the invoice.
	//     Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
	DunningLevel *int `json:"dunningLevel"`

	// Enshrined Enshrined invoices cannot be changed. Can only be set via [Invoice/{invoiceId}/enshrine](#tag/Invoice/operation/invoiceEnshrine). This operation cannot be undone.
	Enshrined *time.Time `json:"enshrined,omitempty"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the invoice number
	Header *string `json:"header"`

	// Id The invoice id. <span style='color:red'>Required</span> if you want to create or update an invoice position for an existing invoice
	Id *int `json:"id"`

	// InvoiceDate Needs to be provided as timestamp or dd.mm.yyyy
	//
	// **Requirements:**
	// * For final invoices (invoiceType = 'ER'), the invoiceDate must be later than or equal to the invoiceDate of related advance (invoiceType = 'AR') / partial (invoiceType = 'TR') invoices.</li>
	InvoiceDate string `json:"invoiceDate"`

	// InvoiceNumber The invoice number
	InvoiceNumber *string `json:"invoiceNumber"`

	// InvoiceType Type of the invoice. For more information on the different types, check
	//      <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
	InvoiceType ModelInvoiceInvoiceType `json:"invoiceType"`
	MapAll      bool                    `json:"mapAll"`

	// ObjectName The invoice object name.
	ObjectName *string `json:"objectName,omitempty"`

	// Origin Origin of the invoice. Could f.e. be an order
	Origin *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name, which could be 'Order'
		ObjectName string `json:"objectName"`
	} `json:"origin"`

	// PaidAmount Amount which has already been paid for this invoice by the customer
	PaidAmount *float32 `json:"paidAmount"`

	// PayDate Needs to be timestamp or dd.mm.yyyy
	PayDate *time.Time `json:"payDate"`

	// PaymentMethod Payment method used for the invoice
	PaymentMethod *struct {
		// Id Unique identifier of the payment method
		Id int `json:"id"`

		// ObjectName Model name, which is 'PaymentMethod'
		ObjectName string `json:"objectName"`
	} `json:"paymentMethod,omitempty"`

	// PropertyIsEInvoice If true, the invoice will be created as e-invoice.
	//
	// To create a valid e-invoice some extra data are required
	// - sevClient
	//     - addressStreet
	//     - addressZip
	//     - addressCity
	//     - bankIban
	//     - bankBic
	//     - contactEmail
	//     - contactPhone
	//     - taxNumber
	//     - vatNumber
	// - contact
	//     - buyerReference
	//     - email
	// - invoice
	//     - paymentMethod
	//     - addressStreet
	//     - addressZip
	//     - addressCity
	//     - addressCountry
	//     - contact
	PropertyIsEInvoice *bool `json:"propertyIsEInvoice"`

	// SendDate The date the invoice was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the invoice.
	SendType *ModelInvoiceSendType `json:"sendType"`

	// SevClient Client to which invoice belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the invoice must not contain any vat
	SmallSettlement *bool `json:"smallSettlement"`

	// Status Please have a look in our
	//      <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
	//      to see what the different status codes mean
	Status ModelInvoiceStatus `json:"status"`

	// SumDiscounts Sum of all discounts in the invoice
	SumDiscounts *float32 `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the invoice in the foreign currency
	SumDiscountsForeignCurrency *float32 `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the invoice
	SumGross *float32 `json:"sumGross,omitempty"`

	// SumGrossAccounting Gross accounting sum of the invoice. Is usually the same as sumGross
	SumGrossAccounting *float32 `json:"sumGrossAccounting,omitempty"`

	// SumGrossForeignCurrency Gross sum of the invoice in the foreign currency
	SumGrossForeignCurrency *float32 `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the invoice
	SumNet *float32 `json:"sumNet,omitempty"`

	// SumNetAccounting Net accounting sum of the invoice. Is usually the same as sumNet
	SumNetAccounting *float32 `json:"sumNetAccounting,omitempty"`

	// SumNetForeignCurrency Net sum of the invoice in the foreign currency
	SumNetForeignCurrency *float32 `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the invoice
	SumTax *float32 `json:"sumTax,omitempty"`

	// SumTaxAccounting Tax accounting sum of the invoice. Is usually the same as sumTax
	SumTaxAccounting *float32 `json:"sumTaxAccounting,omitempty"`

	// SumTaxForeignCurrency Tax sum of the invoice in the foreign currency
	SumTaxForeignCurrency *float32 `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate float32 `json:"taxRate"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//     - "Nicht im Inland steuerbare Leistung" is not available for:
		//       - advance invoice (`"invoiceType": "AR"`)
		//       - partial invoice (`"invoiceType": "TR"`)
		//       - final invoice (`"invoiceType": "ER"`)
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelInvoiceTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelInvoiceTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the invoice. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText string `json:"taxText"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the invoice.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType ModelInvoiceTaxType `json:"taxType"`

	// TimeToPay The time the customer has to pay the invoice in days
	TimeToPay *int `json:"timeToPay"`

	// Update Date of last invoice update
	Update *time.Time `json:"update,omitempty"`
}

// ModelInvoiceInvoiceType Type of the invoice. For more information on the different types, check
//
//	<a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
type ModelInvoiceInvoiceType string

// ModelInvoiceSendType Type which was used to send the invoice.
type ModelInvoiceSendType string

// ModelInvoiceStatus Please have a look in our
//
//	<a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
//	to see what the different status codes mean
type ModelInvoiceStatus string

// ModelInvoiceTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//   - "Nicht im Inland steuerbare Leistung" is not available for:
//   - advance invoice (`"invoiceType": "AR"`)
//   - partial invoice (`"invoiceType": "TR"`)
//   - final invoice (`"invoiceType": "ER"`)
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelInvoiceTaxRuleId string

// ModelInvoiceTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelInvoiceTaxRuleObjectName string

// ModelInvoiceTaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
//
// Tax type of the invoice.
// There are four tax types:
// 1. default - Umsatzsteuer ausweisen
// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
// 4. custom - Using custom tax set
// 5. ss - Not subject to VAT according to §19 1 UStG
// Tax rates are heavily connected to the tax type used.
type ModelInvoiceTaxType string

// ModelInvoicePos Invoice position model
type ModelInvoicePos struct {
	// Create Date of invoice position creation
	Create *time.Time `json:"create,omitempty"`

	// Discount An optional discount of the position.
	Discount *float32 `json:"discount"`

	// Id The invoice position id. <span style='color:red'>Required</span> if you want to update an invoice position for an existing invoice
	Id *int `json:"id,omitempty"`

	// Invoice The invoice to which the position belongs.
	Invoice *struct {
		// Id Unique identifier of the invoice
		Id int `json:"id"`

		// ObjectName Model name, which is 'Invoice'
		ObjectName string `json:"objectName"`
	} `json:"invoice,omitempty"`
	MapAll bool `json:"mapAll"`

	// Name Name of the article/part.
	Name *string `json:"name"`

	// ObjectName The invoice position object name
	ObjectName string `json:"objectName"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id int `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to order multiple positions.
	PositionNumber *int `json:"positionNumber"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *float32 `json:"price"`

	// PriceGross Gross price of the part
	PriceGross *float32 `json:"priceGross"`

	// PriceNet Net price of the part
	PriceNet *float32 `json:"priceNet"`

	// PriceTax Tax on the price of the part
	PriceTax *float32 `json:"priceTax"`

	// Quantity Quantity of the article/part
	Quantity float32 `json:"quantity"`

	// SevClient Client to which invoice position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *float32 `json:"sumDiscount"`

	// SumGrossAccounting Gross accounting sum of the position
	SumGrossAccounting *float32 `json:"sumGrossAccounting"`

	// SumNetAccounting Net accounting sum of the position
	SumNetAccounting *float32 `json:"sumNetAccounting"`

	// SumTaxAccounting Tax accounting sum of the position
	SumTaxAccounting *float32 `json:"sumTaxAccounting"`

	// TaxRate Tax rate of the position.
	TaxRate float32 `json:"taxRate"`

	// Text A text describing your position.
	Text *string `json:"text"`

	// Unity The unit in which the positions part is measured
	Unity struct {
		// Id Unique identifier of the unit
		Id int `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity"`

	// Update Date of last invoice position update
	Update *time.Time `json:"update,omitempty"`
}

// ModelInvoicePosResponse Invoice position model
type ModelInvoicePosResponse struct {
	// Create Date of invoice position creation
	Create *time.Time `json:"create,omitempty"`

	// Discount An optional discount of the position.
	Discount *string `json:"discount,omitempty"`

	// Id The invoice position id
	Id *string `json:"id,omitempty"`

	// Invoice The invoice to which the position belongs.
	Invoice *struct {
		// Id Unique identifier of the invoice
		Id string `json:"id"`

		// ObjectName Model name, which is 'Invoice'
		ObjectName string `json:"objectName"`
	} `json:"invoice,omitempty"`

	// Name Name of the article/part.
	Name *string `json:"name,omitempty"`

	// ObjectName The invoice position object name
	ObjectName *string `json:"objectName,omitempty"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id string `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to order multiple positions.
	PositionNumber *string `json:"positionNumber,omitempty"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *string `json:"price,omitempty"`

	// PriceGross Gross price of the part
	PriceGross *string `json:"priceGross,omitempty"`

	// PriceNet Net price of the part
	PriceNet *string `json:"priceNet,omitempty"`

	// PriceTax Tax on the price of the part
	PriceTax *string `json:"priceTax,omitempty"`

	// Quantity Quantity of the article/part
	Quantity *bool `json:"quantity,omitempty"`

	// SevClient Client to which invoice position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *string `json:"sumDiscount,omitempty"`

	// SumGrossAccounting Gross accounting sum of the position
	SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

	// SumNetAccounting Net accounting sum of the position
	SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

	// SumTaxAccounting Tax accounting sum of the position
	SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

	// TaxRate Tax rate of the position.
	TaxRate *string `json:"taxRate,omitempty"`

	// Text A text describing your position.
	Text *string `json:"text,omitempty"`

	// Unity The unit in which the positions part is measured
	Unity *struct {
		// Id Unique identifier of the unit
		Id string `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity,omitempty"`

	// Update Date of last invoice position update
	Update *time.Time `json:"update,omitempty"`
}

// ModelInvoiceResponse Invoice model
type ModelInvoiceResponse struct {
	// AccountIntervall The interval in which recurring invoices are due as ISO-8601 duration.<br>
	//      Necessary attribute for all recurring invoices.
	AccountIntervall *string `json:"accountIntervall,omitempty"`

	// AccountNextInvoice Timestamp when the next invoice will be generated by this recurring invoice.
	AccountNextInvoice *string `json:"accountNextInvoice,omitempty"`

	// Address Complete address of the recipient including name, street, city, zip and country.
	//      * Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address,omitempty"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry *struct {
		// Id Unique identifier of the country
		Id string `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry,omitempty"`

	// Contact The contact used in the invoice
	Contact *struct {
		// Id Unique identifier of the contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// ContactPerson The user who acts as a contact person for the invoice
	ContactPerson *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson,omitempty"`

	// CostCentre Cost centre for the invoice
	CostCentre *struct {
		// Id Unique identifier of the cost centre
		Id string `json:"id"`

		// ObjectName Model name, which is 'CostCentre'
		ObjectName string `json:"objectName"`
	} `json:"costCentre,omitempty"`

	// Create Date of invoice creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// Currency Currency used in the invoice. Needs to be currency code according to ISO-4217
	Currency *string `json:"currency,omitempty"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote,omitempty"`

	// DatevConnectOnline Internal attribute
	DatevConnectOnline *map[string]interface{} `json:"datevConnectOnline,omitempty"`

	// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

	// DeliveryDateUntil If the delivery date should be a time range, another timestamp can be provided in this attribute
	//      * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
	DeliveryDateUntil *string `json:"deliveryDateUntil,omitempty"`

	// Discount If you want to give a discount, define the percentage here. Otherwise provide zero as value
	Discount *string `json:"discount,omitempty"`

	// DiscountTime If a value other than zero is used for the discount attribute,
	//     you need to specify the amount of days for which the discount is granted.
	DiscountTime *string `json:"discountTime,omitempty"`

	// DunningLevel Defines how many reminders have already been sent for the invoice.
	//     Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
	DunningLevel *string `json:"dunningLevel,omitempty"`

	// Enshrined Enshrined invoices cannot be changed. Can only be set via [Invoice/{invoiceId}/enshrine](#tag/Invoice/operation/invoiceEnshrine). This operation cannot be undone.
	Enshrined *time.Time `json:"enshrined,omitempty"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText,omitempty"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText,omitempty"`

	// Header Normally consist of prefix plus the invoice number
	Header *string `json:"header,omitempty"`

	// Id The invoice id
	Id *string `json:"id,omitempty"`

	// InvoiceDate The invoice date.
	InvoiceDate *string `json:"invoiceDate,omitempty"`

	// InvoiceNumber The invoice number
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// InvoiceType Type of the invoice. For more information on the different types, check
	//      <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
	InvoiceType *ModelInvoiceResponseInvoiceType `json:"invoiceType,omitempty"`

	// ObjectName The invoice object name
	ObjectName *string `json:"objectName,omitempty"`

	// Origin Origin of the invoice. Could f.e. be an order
	Origin *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name. Could f.e. be 'Order''
		ObjectName string `json:"objectName"`
	} `json:"origin,omitempty"`

	// PaidAmount Amount which has already been paid for this invoice by the customer
	PaidAmount *float32 `json:"paidAmount,omitempty"`

	// PayDate Needs to be timestamp or dd.mm.yyyy
	PayDate *time.Time `json:"payDate,omitempty"`

	// PaymentMethod Payment method used for the invoice
	PaymentMethod *struct {
		// Id Unique identifier of the payment method
		Id string `json:"id"`

		// ObjectName Model name, which is 'PaymentMethod'
		ObjectName string `json:"objectName"`
	} `json:"paymentMethod,omitempty"`

	// ReminderCharge The additional reminder charge
	ReminderCharge *string `json:"reminderCharge,omitempty"`

	// ReminderDeadline Deadline of the reminder as timestamp
	ReminderDeadline *time.Time `json:"reminderDeadline,omitempty"`

	// ReminderDebit Debit of the reminder
	ReminderDebit *string `json:"reminderDebit,omitempty"`

	// ReminderTotal Total reminder amount
	ReminderTotal *string `json:"reminderTotal,omitempty"`

	// SendDate The date the invoice was sent to the customer
	SendDate *time.Time `json:"sendDate,omitempty"`

	// SendPaymentReceivedNotificationDate Internal attribute
	SendPaymentReceivedNotificationDate *string `json:"sendPaymentReceivedNotificationDate,omitempty"`

	// SendType Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelInvoiceResponseSendType `json:"sendType,omitempty"`

	// SevClient Client to which invoice belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the invoice must not contain any vat
	SmallSettlement *bool `json:"smallSettlement,omitempty"`

	// Status Please have a look in our
	//      <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
	//      to see what the different status codes mean
	Status *ModelInvoiceResponseStatus `json:"status,omitempty"`

	// SumDiscounts Sum of all discounts in the invoice
	SumDiscounts *string `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the invoice in the foreign currency
	SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the invoice
	SumGross *string `json:"sumGross,omitempty"`

	// SumGrossAccounting Gross accounting sum of the invoice. Is usually the same as sumGross
	SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

	// SumGrossForeignCurrency Gross sum of the invoice in the foreign currency
	SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the invoice
	SumNet *string `json:"sumNet,omitempty"`

	// SumNetAccounting Net accounting sum of the invoice. Is usually the same as sumNet
	SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

	// SumNetForeignCurrency Net sum of the invoice in the foreign currency
	SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the invoice
	SumTax *string `json:"sumTax,omitempty"`

	// SumTaxAccounting Tax accounting sum of the invoice. Is usually the same as sumTax
	SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

	// SumTaxForeignCurrency Tax sum of the invoice in the foreign currency
	SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate *string `json:"taxRate,omitempty"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//     - "Nicht im Inland steuerbare Leistung" is not available for:
		//       - advance invoice (`"invoiceType": "AR"`)
		//       - partial invoice (`"invoiceType": "TR"`)
		//       - final invoice (`"invoiceType": "ER"`)
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelInvoiceResponseTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelInvoiceResponseTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the invoice. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet,omitempty"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText *string `json:"taxText,omitempty"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the invoice.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *ModelInvoiceResponseTaxType `json:"taxType,omitempty"`

	// TimeToPay The time the customer has to pay the invoice in days
	TimeToPay *string `json:"timeToPay,omitempty"`

	// Update Date of last invoice update
	Update *time.Time `json:"update,omitempty"`
}

// ModelInvoiceResponseInvoiceType Type of the invoice. For more information on the different types, check
//
//	<a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
type ModelInvoiceResponseInvoiceType string

// ModelInvoiceResponseSendType Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelInvoiceResponseSendType string

// ModelInvoiceResponseStatus Please have a look in our
//
//	<a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
//	to see what the different status codes mean
type ModelInvoiceResponseStatus string

// ModelInvoiceResponseTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//   - "Nicht im Inland steuerbare Leistung" is not available for:
//   - advance invoice (`"invoiceType": "AR"`)
//   - partial invoice (`"invoiceType": "TR"`)
//   - final invoice (`"invoiceType": "ER"`)
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelInvoiceResponseTaxRuleId string

// ModelInvoiceResponseTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelInvoiceResponseTaxRuleObjectName string

// ModelInvoiceResponseTaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
//
// Tax type of the invoice.
// There are four tax types:
// 1. default - Umsatzsteuer ausweisen
// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
// 4. custom - Using custom tax set
// 5. ss - Not subject to VAT according to §19 1 UStG
// Tax rates are heavily connected to the tax type used.
type ModelInvoiceResponseTaxType string

// ModelOrder Order model
type ModelOrder struct {
	// Address Complete address of the recipient including name, street, city, zip and country.<br>
	//      Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// Contact The contact used in the order
	Contact struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactPerson The user who acts as a contact person for the order
	ContactPerson struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson"`

	// Create Date of order creation
	Create *time.Time `json:"create,omitempty"`

	// Currency Currency used in the order. Needs to be currency code according to ISO-4217
	Currency string `json:"currency"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// DeliveryTerms Delivery terms of the order
	DeliveryTerms *string `json:"deliveryTerms"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the order number
	Header string `json:"header"`

	// Id The order id
	Id     *int `json:"id,omitempty"`
	MapAll bool `json:"mapAll"`

	// ObjectName The order object name
	ObjectName *string `json:"objectName,omitempty"`

	// OrderDate Needs to be provided as timestamp or dd.mm.yyyy
	OrderDate time.Time `json:"orderDate"`

	// OrderNumber The order number
	OrderNumber string `json:"orderNumber"`

	// OrderType Type of the order. For more information on the different types, check
	//     <a href='#tag/Order/Types-and-status-of-orders'>this</a>
	OrderType *ModelOrderOrderType `json:"orderType,omitempty"`

	// Origin Object from which the order was created. For example an offer.
	Origin *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name of the object. Could be 'Order'.
		ObjectName string `json:"objectName"`
	} `json:"origin"`

	// PaymentTerms Payment terms of the order
	PaymentTerms *string `json:"paymentTerms"`

	// SendDate The date the order was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the order. IMPORTANT: Please refer to the order section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelOrderSendType `json:"sendType"`

	// ShowNet If true, the net amount of each position will be shown on the order. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the order must not contain any vat
	SmallSettlement *bool `json:"smallSettlement,omitempty"`

	// Status Please have a look in
	//     <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
	//     to see what the different status codes mean
	Status ModelOrderStatus `json:"status"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate float32 `json:"taxRate"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//     - If \"Nicht im Inland steuerbare Leistung\" is used, no advance or partial invoice can be created from this order
		//     - See the example request ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder)) to create a normal invoice `"invoiceType": "RE"` from such an order
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelOrderTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelOrderTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the order. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText string `json:"taxText"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the order.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType string `json:"taxType"`

	// Update Date of last order update
	Update *time.Time `json:"update,omitempty"`

	// Version Version of the order.<br>
	//     Can be used if you have multiple drafts for the same order.<br>
	//     Should start with 0
	Version int `json:"version"`
}

// ModelOrderOrderType Type of the order. For more information on the different types, check
//
//	<a href='#tag/Order/Types-and-status-of-orders'>this</a>
type ModelOrderOrderType string

// ModelOrderSendType Type which was used to send the order. IMPORTANT: Please refer to the order section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelOrderSendType string

// ModelOrderStatus Please have a look in
//
//	<a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
//	to see what the different status codes mean
type ModelOrderStatus int

// ModelOrderTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//   - If \"Nicht im Inland steuerbare Leistung\" is used, no advance or partial invoice can be created from this order
//   - See the example request ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder)) to create a normal invoice `"invoiceType": "RE"` from such an order
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelOrderTaxRuleId string

// ModelOrderTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelOrderTaxRuleObjectName string

// ModelOrderPos Order position model
type ModelOrderPos struct {
	// Create Date of order position creation
	Create *string `json:"create,omitempty"`

	// Discount An optional discount of the position.
	Discount *float32 `json:"discount"`

	// Id The order position id
	Id *int `json:"id,omitempty"`

	// Name Name of the article/part.
	Name *string `json:"name"`

	// ObjectName The order position object name
	ObjectName *string `json:"objectName,omitempty"`

	// Optional Defines if the position is optional.
	Optional *bool `json:"optional"`

	// Order The order to which the position belongs.
	Order *struct {
		// Id Unique identifier of the order
		Id int `json:"id"`

		// ObjectName Model name, which is 'Order'
		ObjectName string `json:"objectName"`
	} `json:"order,omitempty"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id int `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to order multiple positions.
	PositionNumber *int `json:"positionNumber"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *float32 `json:"price"`

	// PriceGross Gross price of the part
	PriceGross *float32 `json:"priceGross"`

	// PriceNet Net price of the part
	PriceNet *float32 `json:"priceNet"`

	// PriceTax Tax on the price of the part
	PriceTax *float32 `json:"priceTax"`

	// Quantity Quantity of the article/part
	Quantity float32 `json:"quantity"`

	// SevClient Client to which order position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *float32 `json:"sumDiscount"`

	// TaxRate Tax rate of the position.
	TaxRate float32 `json:"taxRate"`

	// Text A text describing your position.
	Text *string `json:"text"`

	// Unity The unit in which the positions part is measured
	Unity struct {
		// Id Unique identifier of the unit
		Id int `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity"`

	// Update Date of last order position update
	Update *string `json:"update,omitempty"`
}

// ModelOrderPosResponse Order position model
type ModelOrderPosResponse struct {
	// Create Date of order position creation
	Create *time.Time `json:"create,omitempty"`

	// Discount An optional discount of the position.
	Discount *string `json:"discount"`

	// Id The order position id
	Id *string `json:"id,omitempty"`

	// Name Name of the article/part.
	Name *string `json:"name"`

	// ObjectName The order position object name
	ObjectName *string `json:"objectName,omitempty"`

	// Optional Defines if the position is optional.
	Optional *bool `json:"optional"`

	// Order The order to which the position belongs.
	Order *struct {
		// Id Unique identifier of the order
		Id string `json:"id"`

		// ObjectName Model name, which is 'Order'
		ObjectName string `json:"objectName"`
	} `json:"order,omitempty"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id string `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to order multiple positions.
	PositionNumber *string `json:"positionNumber"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *string `json:"price"`

	// PriceGross Gross price of the part
	PriceGross *string `json:"priceGross"`

	// PriceNet Net price of the part
	PriceNet *string `json:"priceNet"`

	// PriceTax Tax on the price of the part
	PriceTax *string `json:"priceTax"`

	// Quantity Quantity of the article/part
	Quantity *string `json:"quantity,omitempty"`

	// SevClient Client to which order position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *string `json:"sumDiscount"`

	// TaxRate Tax rate of the position.
	TaxRate *string `json:"taxRate,omitempty"`

	// Text A text describing your position.
	Text *string `json:"text"`

	// Unity The unit in which the positions part is measured
	Unity *struct {
		// Id Unique identifier of the unit
		Id string `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity,omitempty"`

	// Update Date of last order position update
	Update *time.Time `json:"update,omitempty"`
}

// ModelOrderPosUpdate Order position model
type ModelOrderPosUpdate struct {
	// Create Date of order position creation
	Create *time.Time `json:"create,omitempty"`

	// Discount An optional discount of the position.
	Discount *float32 `json:"discount"`

	// Id The order position id
	Id *int `json:"id,omitempty"`

	// Name Name of the article/part.
	Name *string `json:"name"`

	// ObjectName The order position object name
	ObjectName *string `json:"objectName,omitempty"`

	// Optional Defines if the position is optional.
	Optional *bool `json:"optional"`

	// Order The order to which the position belongs.
	Order *struct {
		// Id Unique identifier of the order
		Id int `json:"id"`

		// ObjectName Model name, which is 'Order'
		ObjectName string `json:"objectName"`
	} `json:"order,omitempty"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id int `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to order multiple positions.
	PositionNumber *int `json:"positionNumber"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *float32 `json:"price"`

	// PriceGross Gross price of the part
	PriceGross *float32 `json:"priceGross"`

	// PriceNet Net price of the part
	PriceNet *float32 `json:"priceNet"`

	// PriceTax Tax on the price of the part
	PriceTax *float32 `json:"priceTax"`

	// Quantity Quantity of the article/part
	Quantity *float32 `json:"quantity"`

	// SevClient Client to which order position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *float32 `json:"sumDiscount"`

	// TaxRate Tax rate of the position.
	TaxRate *float32 `json:"taxRate"`

	// Text A text describing your position.
	Text *string `json:"text"`

	// Unity The unit in which the positions part is measured
	Unity *struct {
		// Id Unique identifier of the unit
		Id int `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity,omitempty"`

	// Update Date of last order position update
	Update *time.Time `json:"update,omitempty"`
}

// ModelOrderResponse Order model
type ModelOrderResponse struct {
	// Address Complete address of the recipient including name, street, city, zip and country.<br>
	//      Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry *struct {
		// Id Unique identifier of the country
		Id string `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// Contact The contact used in the order
	Contact *struct {
		// Id Unique identifier of the contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact,omitempty"`

	// ContactPerson The user who acts as a contact person for the order
	ContactPerson *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson,omitempty"`

	// Create Date of order creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// Currency Currency used in the order. Needs to be currency code according to ISO-4217
	Currency *string `json:"currency,omitempty"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// DeliveryTerms Delivery terms of the order
	DeliveryTerms *string `json:"deliveryTerms"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the order number
	Header *string `json:"header,omitempty"`

	// Id The order id
	Id *string `json:"id,omitempty"`

	// ObjectName The order object name
	ObjectName *string `json:"objectName,omitempty"`

	// OrderDate Needs to be provided as timestamp or dd.mm.yyyy
	OrderDate *time.Time `json:"orderDate,omitempty"`

	// OrderNumber The order number
	OrderNumber *string `json:"orderNumber,omitempty"`

	// OrderType Type of the order. For more information on the different types, check
	//     <a href='#tag/Order/Types-and-status-of-orders'>this</a>
	OrderType *ModelOrderResponseOrderType `json:"orderType,omitempty"`

	// Origin Object from which the order was created. For example an offer.
	Origin *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name of the object. Could be 'Order'.
		ObjectName string `json:"objectName"`
	} `json:"origin"`

	// PaymentTerms Payment terms of the order
	PaymentTerms *string `json:"paymentTerms"`

	// SendDate The date the order was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the order. IMPORTANT: Please refer to the order section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelOrderResponseSendType `json:"sendType"`

	// SevClient Client to which order belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the order. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the order must not contain any vat
	SmallSettlement *bool `json:"smallSettlement,omitempty"`

	// Status Please have a look in
	//     <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
	//     to see what the different status codes mean
	Status *ModelOrderResponseStatus `json:"status,omitempty"`

	// SumDiscounts Sum of all discounts in the order
	SumDiscounts *string `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the order in the foreign currency
	SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the order
	SumGross *string `json:"sumGross,omitempty"`

	// SumGrossForeignCurrency Gross sum of the order in the foreign currency
	SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the order
	SumNet *string `json:"sumNet,omitempty"`

	// SumNetForeignCurrency Net sum of the order in the foreign currency
	SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the order
	SumTax *string `json:"sumTax,omitempty"`

	// SumTaxForeignCurrency Tax sum of the order in the foreign currency
	SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate *string `json:"taxRate,omitempty"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//     - If \"Nicht im Inland steuerbare Leistung\" is used, no advance or partial invoice can be created from this order
		//     - See the example request ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder)) to create a normal invoice `"invoiceType": "RE"` from such an order
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelOrderResponseTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelOrderResponseTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the order. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText *string `json:"taxText,omitempty"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the order.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *string `json:"taxType,omitempty"`

	// Update Date of last order update
	Update *time.Time `json:"update,omitempty"`

	// Version Version of the order.<br>
	//     Can be used if you have multiple drafts for the same order.<br>
	//     Should start with 0
	Version *string `json:"version,omitempty"`
}

// ModelOrderResponseOrderType Type of the order. For more information on the different types, check
//
//	<a href='#tag/Order/Types-and-status-of-orders'>this</a>
type ModelOrderResponseOrderType string

// ModelOrderResponseSendType Type which was used to send the order. IMPORTANT: Please refer to the order section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelOrderResponseSendType string

// ModelOrderResponseStatus Please have a look in
//
//	<a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
//	to see what the different status codes mean
type ModelOrderResponseStatus string

// ModelOrderResponseTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//   - If \"Nicht im Inland steuerbare Leistung\" is used, no advance or partial invoice can be created from this order
//   - See the example request ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder)) to create a normal invoice `"invoiceType": "RE"` from such an order
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelOrderResponseTaxRuleId string

// ModelOrderResponseTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelOrderResponseTaxRuleObjectName string

// ModelOrderUpdate Order model
type ModelOrderUpdate struct {
	// Address Complete address of the recipient including name, street, city, zip and country.<br>
	//      Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry *struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// Contact The contact used in the order
	Contact *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactPerson The user who acts as a contact person for the order
	ContactPerson *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson,omitempty"`

	// Create Date of order creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// Currency Currency used in the order. Needs to be currency code according to ISO-4217
	Currency *string `json:"currency"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// DeliveryTerms Delivery terms of the order
	DeliveryTerms *string `json:"deliveryTerms"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the order number
	Header *string `json:"header"`

	// Id The order id
	Id *int `json:"id,omitempty"`

	// ObjectName The order object name
	ObjectName *string `json:"objectName,omitempty"`

	// OrderDate Needs to be provided as timestamp or dd.mm.yyyy
	OrderDate *time.Time `json:"orderDate"`

	// OrderNumber The order number
	OrderNumber *string `json:"orderNumber,omitempty"`

	// OrderType Type of the order. For more information on the different types, check
	//     <a href='#tag/Order/Types-and-status-of-orders'>this</a>
	OrderType *ModelOrderUpdateOrderType `json:"orderType"`

	// Origin Object from which the order was created. For example an offer.
	Origin *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name of the object. Could be 'Order'.
		ObjectName string `json:"objectName"`
	} `json:"origin"`

	// PaymentTerms Payment terms of the order
	PaymentTerms *string `json:"paymentTerms"`

	// SendDate The date the order was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the order. IMPORTANT: Please refer to the order section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelOrderUpdateSendType `json:"sendType"`

	// SevClient Client to which order belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the order. Otherwise gross amount
	ShowNet *bool `json:"showNet"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the order must not contain any vat
	SmallSettlement *bool `json:"smallSettlement"`

	// Status Please have a look in
	//     <a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
	//     to see what the different status codes mean
	Status *ModelOrderUpdateStatus `json:"status"`

	// SumDiscounts Sum of all discounts in the order
	SumDiscounts *float32 `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the order in the foreign currency
	SumDiscountsForeignCurrency *float32 `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the order
	SumGross *float32 `json:"sumGross,omitempty"`

	// SumGrossForeignCurrency Gross sum of the order in the foreign currency
	SumGrossForeignCurrency *float32 `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the order
	SumNet *float32 `json:"sumNet,omitempty"`

	// SumNetForeignCurrency Net sum of the order in the foreign currency
	SumNetForeignCurrency *float32 `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the order
	SumTax *float32 `json:"sumTax,omitempty"`

	// SumTaxForeignCurrency Tax sum of the order in the foreign currency
	SumTaxForeignCurrency *float32 `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate *float32 `json:"taxRate"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//     - If \"Nicht im Inland steuerbare Leistung\" is used, no advance or partial invoice can be created from this order
		//     - See the example request ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder)) to create a normal invoice `"invoiceType": "RE"` from such an order
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelOrderUpdateTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelOrderUpdateTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the order. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText *string `json:"taxText"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the order.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *string `json:"taxType"`

	// Update Date of last order update
	Update *time.Time `json:"update,omitempty"`

	// Version Version of the order.<br>
	//     Can be used if you have multiple drafts for the same order.<br>
	//     Should start with 0
	Version *int `json:"version"`
}

// ModelOrderUpdateOrderType Type of the order. For more information on the different types, check
//
//	<a href='#tag/Order/Types-and-status-of-orders'>this</a>
type ModelOrderUpdateOrderType string

// ModelOrderUpdateSendType Type which was used to send the order. IMPORTANT: Please refer to the order section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelOrderUpdateSendType string

// ModelOrderUpdateStatus Please have a look in
//
//	<a href='#tag/Order/Types-and-status-of-orders'>status of orders</a>
//	to see what the different status codes mean
type ModelOrderUpdateStatus int

// ModelOrderUpdateTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//   - If \"Nicht im Inland steuerbare Leistung\" is used, no advance or partial invoice can be created from this order
//   - See the example request ([Invoice/Factory/createInvoiceFromOrder](#tag/Invoice/operation/createInvoiceFromOrder)) to create a normal invoice `"invoiceType": "RE"` from such an order
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelOrderUpdateTaxRuleId string

// ModelOrderUpdateTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelOrderUpdateTaxRuleObjectName string

// ModelPart Part model
type ModelPart struct {
	// Category Category of the part.<br>
	//     For all categories, send a GET to /Category?objectType=Part
	Category *struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// Create Date of part creation
	Create *time.Time `json:"create,omitempty"`

	// Id The part id
	Id *int `json:"id,omitempty"`

	// InternalComment An internal comment for the part.<br>
	//      Does not appear on invoices and orders.
	InternalComment *string `json:"internalComment"`

	// Name Name of the part
	Name string `json:"name"`

	// ObjectName The part object name
	ObjectName *string `json:"objectName,omitempty"`

	// PartNumber The part number
	PartNumber string `json:"partNumber"`

	// Price Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.
	Price *float32 `json:"price"`

	// PriceGross Gross price for which the part is sold
	PriceGross *float32 `json:"priceGross"`

	// PriceNet Net price for which the part is sold
	PriceNet *float32 `json:"priceNet"`

	// PricePurchase Purchase price of the part
	PricePurchase *float32 `json:"pricePurchase"`

	// SevClient Client to which part belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Status of the part. 50 <-> Inactive - 100 <-> Active
	Status *ModelPartStatus `json:"status"`

	// Stock The stock of the part
	Stock float32 `json:"stock"`

	// StockEnabled Defines if the stock should be enabled
	StockEnabled *bool `json:"stockEnabled,omitempty"`

	// TaxRate Tax rate of the part
	TaxRate float32 `json:"taxRate"`

	// Text A text describing the part
	Text *string `json:"text"`

	// Unity The unit in which the part is measured
	Unity struct {
		// Id Unique identifier of the unit
		Id int `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity"`

	// Update Date of last part update
	Update *time.Time `json:"update,omitempty"`
}

// ModelPartStatus Status of the part. 50 <-> Inactive - 100 <-> Active
type ModelPartStatus int

// ModelPartUpdate Part model
type ModelPartUpdate struct {
	// Category Category of the part.<br>
	//     For all categories, send a GET to /Category?objectType=Part
	Category *struct {
		// Id Unique identifier of the category
		Id int `json:"id"`

		// ObjectName Model name, which is 'Category'
		ObjectName string `json:"objectName"`
	} `json:"category"`

	// Create Date of part creation
	Create *time.Time `json:"create,omitempty"`

	// Id The part id
	Id *int `json:"id"`

	// InternalComment An internal comment for the part.<br>
	//      Does not appear on invoices and orders.
	InternalComment *string `json:"internalComment"`

	// Name Name of the part
	Name *string `json:"name,omitempty"`

	// ObjectName The part object name
	ObjectName *string `json:"objectName"`

	// PartNumber The part number
	PartNumber *string `json:"partNumber,omitempty"`

	// Price Net price for which the part is sold. we will change this parameter so that the gross price is calculated automatically, until then the priceGross parameter must be used.
	Price *float32 `json:"price"`

	// PriceGross Gross price for which the part is sold
	PriceGross *float32 `json:"priceGross"`

	// PriceNet Net price for which the part is sold
	PriceNet *float32 `json:"priceNet"`

	// PricePurchase Purchase price of the part
	PricePurchase *float32 `json:"pricePurchase"`

	// SevClient Client to which part belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Status of the part. 50 <-> Inactive - 100 <-> Active
	Status *ModelPartUpdateStatus `json:"status"`

	// Stock The stock of the part
	Stock *float32 `json:"stock,omitempty"`

	// StockEnabled Defines if the stock should be enabled
	StockEnabled *bool `json:"stockEnabled"`

	// TaxRate Tax rate of the part
	TaxRate *float32 `json:"taxRate,omitempty"`

	// Text A text describing the part
	Text *string `json:"text"`

	// Unity The unit in which the part is measured
	Unity *struct {
		// Id Unique identifier of the unit
		Id int `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity,omitempty"`

	// Update Date of last part update
	Update *time.Time `json:"update,omitempty"`
}

// ModelPartUpdateStatus Status of the part. 50 <-> Inactive - 100 <-> Active
type ModelPartUpdateStatus int

// ModelTagCreateResponse tag model
type ModelTagCreateResponse struct {
	AdditionalInformation *string `json:"additionalInformation,omitempty"`

	// Create Date of tag creation
	Create *time.Time `json:"create,omitempty"`

	// Id Id of the tag
	Id     *string `json:"id,omitempty"`
	Object *struct {
		// Id Id of the invoice/order/voucher/creditNote
		Id int `json:"id"`

		// ObjectName Model name
		ObjectName ModelTagCreateResponseObjectObjectName `json:"objectName"`
	} `json:"object,omitempty"`

	// ObjectName Internal object name which is 'TagRelation'.
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which invoice belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Tag The tag information
	Tag *struct {
		// Id Unique identifier of the tag
		Id string `json:"id"`

		// ObjectName Model name, which is 'Tag'
		ObjectName string `json:"objectName"`
	} `json:"tag,omitempty"`
}

// ModelTagCreateResponseObjectObjectName Model name
type ModelTagCreateResponseObjectObjectName string

// ModelTagResponse tag model
type ModelTagResponse struct {
	AdditionalInformation *string `json:"additionalInformation,omitempty"`

	// Create Date of tag creation
	Create *time.Time `json:"create,omitempty"`

	// Id Id of the tag
	Id *string `json:"id,omitempty"`

	// Name name of the tag
	Name *string `json:"name,omitempty"`

	// ObjectName Internal object name which is 'Tag'.
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which invoice belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`
}

// ModelTextparserFetchDictionaryEntriesByTypeResponse Textparser fetchDictionaryEntriesByType model
type ModelTextparserFetchDictionaryEntriesByTypeResponse struct {
	Key   *string `json:"key,omitempty"`
	Value *[]struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"value,omitempty"`
}

// ModelVoucher Voucher model
type ModelVoucher struct {
	// CostCentre Cost centre for the voucher
	CostCentre *struct {
		// Id Unique identifier of the cost centre
		Id int `json:"id"`

		// ObjectName Model name, which is 'CostCentre'
		ObjectName string `json:"objectName"`
	} `json:"costCentre,omitempty"`

	// Create Date of voucher creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser User who created the voucher. Will be filled automatically.
	CreateUser *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// CreditDebit Defines if your voucher is a credit (C) or debit (D)
	CreditDebit ModelVoucherCreditDebit `json:"creditDebit"`

	// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
	Currency *string `json:"currency"`

	// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

	// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
	DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

	// Description The description of the voucher. Essentially the voucher number.
	Description *string `json:"description"`

	// Document The document of the voucher.
	Document *struct {
		// Id Unique identifier of the document
		Id int `json:"id"`

		// ObjectName Model name, which is 'Document'
		ObjectName string `json:"objectName"`
	} `json:"document"`

	// Enshrined Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
	Enshrined *time.Time `json:"enshrined,omitempty"`

	// Id The voucher id
	Id     *int `json:"id,omitempty"`
	MapAll bool `json:"mapAll"`

	// ObjectName The voucher object name
	ObjectName string `json:"objectName"`

	// PaidAmount Amount which has already been paid for this voucher by the customer
	PaidAmount *float32 `json:"paidAmount"`

	// PayDate Needs to be timestamp or dd.mm.yyyy
	PayDate *time.Time `json:"payDate"`

	// PaymentDeadline Payment deadline of the voucher.
	PaymentDeadline *time.Time `json:"paymentDeadline"`

	// PropertyExchangeRate Defines the exchange rate
	PropertyExchangeRate *float32 `json:"propertyExchangeRate"`

	// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
	PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

	// RecurringEndDate The date when the recurring vouchers end being generated.<br>
	//     Necessary attribute for all recurring vouchers.
	RecurringEndDate *time.Time `json:"recurringEndDate"`

	// RecurringInterval The DateInterval in which recurring vouchers are generated.<br>
	//      Necessary attribute for all recurring vouchers.
	RecurringInterval *ModelVoucherRecurringInterval `json:"recurringInterval"`

	// RecurringLastVoucher The date when the last voucher was generated.
	RecurringLastVoucher *time.Time `json:"recurringLastVoucher"`

	// RecurringNextVoucher The date when the next voucher should be generated.<br>
	//      Necessary attribute for all recurring vouchers.
	RecurringNextVoucher *time.Time `json:"recurringNextVoucher"`

	// RecurringStartDate The date when the recurring vouchers start being generated.<br>
	//      Necessary attribute for all recurring vouchers.
	RecurringStartDate *time.Time `json:"recurringStartDate"`

	// SevClient Client to which voucher belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Please have a look in
	//     <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>
	//     to see what the different status codes mean
	Status ModelVoucherStatus `json:"status"`

	// SumDiscounts Sum of all discounts in the voucher
	SumDiscounts *float32 `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the voucher in the foreign currency
	SumDiscountsForeignCurrency *float32 `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the voucher
	SumGross *float32 `json:"sumGross,omitempty"`

	// SumGrossAccounting Gross accounting sum of the voucher. Is usually the same as sumGross
	SumGrossAccounting *float32 `json:"sumGrossAccounting,omitempty"`

	// SumNet Net sum of the voucher
	SumNet *float32 `json:"sumNet,omitempty"`

	// SumNetAccounting Net accounting sum of the voucher. Is usually the same as sumNet
	SumNetAccounting *float32 `json:"sumNetAccounting,omitempty"`

	// SumTax Tax sum of the voucher
	SumTax *float32 `json:"sumTax,omitempty"`

	// SumTaxAccounting Tax accounting sum of the voucher. Is usually the same as sumTax
	SumTaxAccounting *float32 `json:"sumTaxAccounting,omitempty"`

	// Supplier The contact used in the voucher as a supplier.<br>
	// If you don't have a contact as a supplier, you can set this object to null.
	Supplier *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"supplier"`

	// SupplierName The supplier name.<br>
	//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
	SupplierName *string `json:"supplierName"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren (tax rates: 0.0)
		//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
		//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
		Id ModelVoucherTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelVoucherTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule"`

	// TaxSet ** Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	//
	// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
	TaxSet *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the voucher.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType string `json:"taxType"`

	// Update Date of last voucher update
	Update *time.Time `json:"update,omitempty"`

	// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
	VoucherDate *time.Time `json:"voucherDate"`

	// VoucherType Type of the voucher. For more information on the different types, check
	//      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
	VoucherType ModelVoucherVoucherType `json:"voucherType"`
}

// ModelVoucherCreditDebit Defines if your voucher is a credit (C) or debit (D)
type ModelVoucherCreditDebit string

// ModelVoucherRecurringInterval The DateInterval in which recurring vouchers are generated.<br>
//
//	Necessary attribute for all recurring vouchers.
type ModelVoucherRecurringInterval string

// ModelVoucherStatus Please have a look in
//
//	<a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>
//	to see what the different status codes mean
type ModelVoucherStatus float32

// ModelVoucherTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
//   - `2` - Ausfuhren (tax rates: 0.0)
//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
type ModelVoucherTaxRuleId string

// ModelVoucherTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelVoucherTaxRuleObjectName string

// ModelVoucherVoucherType Type of the voucher. For more information on the different types, check
//
//	<a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
type ModelVoucherVoucherType string

// ModelVoucherPos Voucher position model
type ModelVoucherPos struct {
	// AccountDatev <b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b>
	//      The account datev to which the position belongs.<br>
	//      An account datev is the booking account to which the position belongs.<br>
	//      For more information, please refer to
	//  <a href='#tag/Voucher/Account-Datev'>this</a> section.
	AccountDatev struct {
		// Id Unique identifier of the account datev
		Id int `json:"id"`

		// ObjectName Model name, which is 'AccountDatev'
		ObjectName string `json:"objectName"`
	} `json:"accountDatev"`

	// AccountingType The accounting type to which the position belongs.<br>
	//      An accounting type is the booking account to which the position belongs.<br>
	//      For more information, please refer to
	//  <a href='#tag/Voucher/Accounting-type'>this</a> section.
	AccountingType struct {
		// Id Unique identifier of the accounting type
		Id int `json:"id"`

		// ObjectName Model name, which is 'AccountingType'
		ObjectName string `json:"objectName"`
	} `json:"accountingType"`

	// Comment Comment for the voucher position.
	Comment *string `json:"comment"`

	// Create Date of voucher position creation
	Create *string `json:"create,omitempty"`

	// EstimatedAccountingType The accounting type to which the position belongs estimated by our voucher recognition.<br>
	//     An accounting type is the booking account to which the position belongs.<br>
	//     For more information, please refer to
	//     <a href='#tag/Voucher/Accounting-type'>this</a> section.
	EstimatedAccountingType *struct {
		// Id Unique identifier of the accounting type
		Id int `json:"id"`

		// ObjectName Model name, which is 'AccountingType'
		ObjectName string `json:"objectName"`
	} `json:"estimatedAccountingType,omitempty"`

	// Id The voucher position id
	Id *int `json:"id,omitempty"`

	// IsAsset Determines whether position is regarded as an asset which can be depreciated.
	IsAsset *bool `json:"isAsset,omitempty"`
	MapAll  bool  `json:"mapAll"`

	// Net Determines whether 'sumNet' or 'sumGross' is regarded.<br>
	//      If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.
	//  All positions must be either net or gross, a mixture of the two is not possible.
	Net bool `json:"net"`

	// ObjectName The voucher position object name
	ObjectName string `json:"objectName"`

	// SevClient Client to which voucher position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumGross Gross sum of the voucher position.<br>
	//     Only regarded if 'net' is 'false', otherwise its readOnly.
	SumGross float32 `json:"sumGross"`

	// SumGrossAccounting Gross accounting sum. Is equal to sumGross.
	SumGrossAccounting *float32 `json:"sumGrossAccounting,omitempty"`

	// SumNet Net sum of the voucher position.<br>
	//     Only regarded if 'net' is 'true', otherwise its readOnly.
	SumNet float32 `json:"sumNet"`

	// SumNetAccounting Net accounting sum. Is equal to sumNet.
	SumNetAccounting *float32 `json:"sumNetAccounting,omitempty"`

	// SumTax Tax sum of the voucher position.
	SumTax *float32 `json:"sumTax,omitempty"`

	// SumTaxAccounting Tax accounting sum. Is equal to sumTax.
	SumTaxAccounting *float32 `json:"sumTaxAccounting,omitempty"`

	// TaxRate Tax rate of the voucher position.
	TaxRate float32 `json:"taxRate"`

	// Update Date of last voucher position update
	Update *string `json:"update,omitempty"`

	// Voucher The voucher to which the position belongs.
	Voucher *struct {
		// Id Unique identifier of the voucher
		Id int `json:"id"`

		// ObjectName Model name, which is 'Voucher'
		ObjectName string `json:"objectName"`
	} `json:"voucher,omitempty"`
}

// ModelVoucherPosResponse Voucher position model
type ModelVoucherPosResponse struct {
	// AccountDatev <b>Use this in sevdesk-Update 2.0 (replaces accountingType).</b>
	//      The account datev to which the position belongs.<br>
	//      An account datev is the booking account to which the position belongs.<br>
	//      For more information, please refer to
	//  <a href='#tag/Voucher/Account-Datev'>this</a> section.
	AccountDatev struct {
		// Id Unique identifier of the account datev
		Id int `json:"id"`

		// ObjectName Model name, which is 'AccountDatev'
		ObjectName string `json:"objectName"`
	} `json:"accountDatev"`

	// AccountingType The accounting type to which the position belongs.<br>
	//      An accounting type is the booking account to which the position belongs.<br>
	//      For more information, please refer to
	//  <a href='#tag/Voucher/Accounting-type'>this</a> section.
	AccountingType struct {
		// Id Unique identifier of the accounting type
		Id string `json:"id"`

		// ObjectName Model name, which is 'AccountingType'
		ObjectName string `json:"objectName"`
	} `json:"accountingType"`

	// Comment Comment for the voucher position.
	Comment *string `json:"comment"`

	// Create Date of voucher position creation
	Create *string `json:"create,omitempty"`

	// EstimatedAccountingType The accounting type to which the position belongs estimated by our voucher recognition.<br>
	//     An accounting type is the booking account to which the position belongs.<br>
	//     For more information, please refer to
	//     <a href='#tag/Voucher/Accounting-type'>this</a> section.
	EstimatedAccountingType *struct {
		// Id Unique identifier of the accounting type
		Id string `json:"id"`

		// ObjectName Model name, which is 'AccountingType'
		ObjectName string `json:"objectName"`
	} `json:"estimatedAccountingType,omitempty"`

	// Id The voucher position id
	Id *string `json:"id,omitempty"`

	// IsAsset Determines whether position is regarded as an asset which can be depreciated.
	IsAsset *bool `json:"isAsset,omitempty"`

	// Net Determines whether 'sumNet' or 'sumGross' is regarded.<br>
	//      If both are not given, 'sum' is regarded and treated as net or gross depending on 'net'.
	//  All positions must be either net or gross, a mixture of the two is not possible.
	Net bool `json:"net"`

	// ObjectName The voucher position object name
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which voucher position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumGross Gross sum of the voucher position.<br>
	//     Only regarded if 'net' is 'false', otherwise its readOnly.
	SumGross string `json:"sumGross"`

	// SumGrossAccounting Gross accounting sum. Is equal to sumGross.
	SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

	// SumNet Net sum of the voucher position.<br>
	//     Only regarded if 'net' is 'true', otherwise its readOnly.
	SumNet string `json:"sumNet"`

	// SumNetAccounting Net accounting sum. Is equal to sumNet.
	SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

	// SumTax Tax sum of the voucher position.
	SumTax *string `json:"sumTax,omitempty"`

	// SumTaxAccounting Tax accounting sum. Is equal to sumTax.
	SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

	// TaxRate Tax rate of the voucher position.
	TaxRate string `json:"taxRate"`

	// Update Date of last voucher position update
	Update *string `json:"update,omitempty"`

	// Voucher The voucher to which the position belongs.
	Voucher *struct {
		// Id Unique identifier of the voucher
		Id string `json:"id"`

		// ObjectName Model name, which is 'Voucher'
		ObjectName string `json:"objectName"`
	} `json:"voucher,omitempty"`
}

// ModelVoucherResponse Voucher model
type ModelVoucherResponse struct {
	// CostCentre Cost centre for the voucher
	CostCentre *struct {
		// Id Unique identifier of the cost centre
		Id string `json:"id"`

		// ObjectName Model name, which is 'CostCentre'
		ObjectName string `json:"objectName"`
	} `json:"costCentre,omitempty"`

	// Create Date of voucher creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser User who created the voucher. Will be filled automatically.
	CreateUser *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// CreditDebit Defines if your voucher is a credit (C) or debit (D)
	CreditDebit *ModelVoucherResponseCreditDebit `json:"creditDebit"`

	// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
	Currency *string `json:"currency"`

	// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

	// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
	DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

	// Description The description of the voucher. Essentially the voucher number.
	Description *string `json:"description"`

	// Document The document of the voucher.
	Document *struct {
		// Id Unique identifier of the document
		Id string `json:"id"`

		// ObjectName Model name, which is 'Document'
		ObjectName string `json:"objectName"`
	} `json:"document"`

	// Enshrined Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
	Enshrined *time.Time `json:"enshrined,omitempty"`

	// Id The voucher id
	Id     *string `json:"id,omitempty"`
	MapAll *bool   `json:"mapAll,omitempty"`

	// ObjectName The voucher object name
	ObjectName *string `json:"objectName,omitempty"`

	// PaidAmount Amount which has already been paid for this voucher by the customer
	PaidAmount *float32 `json:"paidAmount"`

	// PayDate Needs to be timestamp or dd.mm.yyyy
	PayDate *time.Time `json:"payDate"`

	// PaymentDeadline Payment deadline of the voucher.
	PaymentDeadline *time.Time `json:"paymentDeadline"`

	// PropertyExchangeRate Defines the exchange rate
	PropertyExchangeRate *string `json:"propertyExchangeRate"`

	// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
	PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

	// RecurringEndDate The date when the recurring vouchers end being generated.<br>
	//     Necessary attribute for all recurring vouchers.
	RecurringEndDate *time.Time `json:"recurringEndDate"`

	// RecurringInterval The DateInterval in which recurring vouchers are generated.<br>
	//      Necessary attribute for all recurring vouchers.
	RecurringInterval *ModelVoucherResponseRecurringInterval `json:"recurringInterval"`

	// RecurringLastVoucher The date when the last voucher was generated.
	RecurringLastVoucher *time.Time `json:"recurringLastVoucher"`

	// RecurringNextVoucher The date when the next voucher should be generated.<br>
	//      Necessary attribute for all recurring vouchers.
	RecurringNextVoucher *time.Time `json:"recurringNextVoucher"`

	// RecurringStartDate The date when the recurring vouchers start being generated.<br>
	//      Necessary attribute for all recurring vouchers.
	RecurringStartDate *time.Time `json:"recurringStartDate"`

	// SevClient Client to which voucher belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Please have a look in
	//     <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>
	//     to see what the different status codes mean
	Status *ModelVoucherResponseStatus `json:"status"`

	// SumDiscounts Sum of all discounts in the voucher
	SumDiscounts *string `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the voucher in the foreign currency
	SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the voucher
	SumGross *string `json:"sumGross,omitempty"`

	// SumGrossAccounting Gross accounting sum of the voucher. Is usually the same as sumGross
	SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

	// SumNet Net sum of the voucher
	SumNet *string `json:"sumNet,omitempty"`

	// SumNetAccounting Net accounting sum of the voucher. Is usually the same as sumNet
	SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

	// SumTax Tax sum of the voucher
	SumTax *string `json:"sumTax,omitempty"`

	// SumTaxAccounting Tax accounting sum of the voucher. Is usually the same as sumTax
	SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

	// Supplier The contact used in the voucher as a supplier.<br>
	// If you don't have a contact as a supplier, you can set this object to null.
	Supplier *struct {
		// Id Unique identifier of the contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"supplier"`

	// SupplierName The supplier name.<br>
	//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
	SupplierName *string `json:"supplierName"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren (tax rates: 0.0)
		//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
		//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
		Id ModelVoucherResponseTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelVoucherResponseTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	//
	// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
	TaxSet *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the voucher.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *string `json:"taxType"`

	// Update Date of last voucher update
	Update *time.Time `json:"update,omitempty"`

	// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
	VoucherDate *time.Time `json:"voucherDate"`

	// VoucherType Type of the voucher. For more information on the different types, check
	//      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
	VoucherType *ModelVoucherResponseVoucherType `json:"voucherType"`
}

// ModelVoucherResponseCreditDebit Defines if your voucher is a credit (C) or debit (D)
type ModelVoucherResponseCreditDebit string

// ModelVoucherResponseRecurringInterval The DateInterval in which recurring vouchers are generated.<br>
//
//	Necessary attribute for all recurring vouchers.
type ModelVoucherResponseRecurringInterval string

// ModelVoucherResponseStatus Please have a look in
//
//	<a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>
//	to see what the different status codes mean
type ModelVoucherResponseStatus string

// ModelVoucherResponseTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
//   - `2` - Ausfuhren (tax rates: 0.0)
//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
type ModelVoucherResponseTaxRuleId string

// ModelVoucherResponseTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelVoucherResponseTaxRuleObjectName string

// ModelVoucherResponseVoucherType Type of the voucher. For more information on the different types, check
//
//	<a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
type ModelVoucherResponseVoucherType string

// ModelVoucherUpdate Voucher model
type ModelVoucherUpdate struct {
	// CostCentre Cost centre for the voucher
	CostCentre *struct {
		// Id Unique identifier of the cost centre
		Id int `json:"id"`

		// ObjectName Model name, which is 'CostCentre'
		ObjectName string `json:"objectName"`
	} `json:"costCentre,omitempty"`

	// CreditDebit Defines if your voucher is a credit (C) or debit (D)
	CreditDebit *ModelVoucherUpdateCreditDebit `json:"creditDebit,omitempty"`

	// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
	Currency *string `json:"currency"`

	// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

	// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
	DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

	// Description The description of the voucher. Essentially the voucher number.
	Description *string `json:"description"`

	// Document The document of the voucher.
	Document *struct {
		// Id Unique identifier of the document
		Id int `json:"id"`

		// ObjectName Model name, which is 'Document'
		ObjectName string `json:"objectName"`
	} `json:"document"`

	// PaidAmount Amount which has already been paid for this voucher by the customer
	PaidAmount *float32 `json:"paidAmount"`

	// PayDate Needs to be timestamp or dd.mm.yyyy
	PayDate *time.Time `json:"payDate"`

	// PaymentDeadline Payment deadline of the voucher.
	PaymentDeadline *time.Time `json:"paymentDeadline"`

	// PropertyExchangeRate Defines the exchange rate
	PropertyExchangeRate *float32 `json:"propertyExchangeRate"`

	// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
	PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

	// Status <b>Not supported in sevdesk-Update 2.0.</b><br><br>    Please have a look in <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>    to see what the different status codes mean
	Status *ModelVoucherUpdateStatus `json:"status,omitempty"`

	// Supplier The contact used in the voucher as a supplier.<br>
	// If you don't have a contact as a supplier, you can set this object to null.
	Supplier *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"supplier"`

	// SupplierName The supplier name.<br>
	//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
	SupplierName *string `json:"supplierName"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren (tax rates: 0.0)
		//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
		//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
		Id ModelVoucherUpdateTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelVoucherUpdateTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	//
	// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
	TaxSet *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the voucher.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *string `json:"taxType,omitempty"`

	// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
	VoucherDate *time.Time `json:"voucherDate"`

	// VoucherType Type of the voucher. For more information on the different types, check
	//  <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
	VoucherType *ModelVoucherUpdateVoucherType `json:"voucherType,omitempty"`
}

// ModelVoucherUpdateCreditDebit Defines if your voucher is a credit (C) or debit (D)
type ModelVoucherUpdateCreditDebit string

// ModelVoucherUpdateStatus <b>Not supported in sevdesk-Update 2.0.</b><br><br>    Please have a look in <a href='#tag/Voucher/Types-and-status-of-vouchers'>status of vouchers</a>    to see what the different status codes mean
type ModelVoucherUpdateStatus float32

// ModelVoucherUpdateTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
//   - `2` - Ausfuhren (tax rates: 0.0)
//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
type ModelVoucherUpdateTaxRuleId string

// ModelVoucherUpdateTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelVoucherUpdateTaxRuleObjectName string

// ModelVoucherUpdateVoucherType Type of the voucher. For more information on the different types, check
//
//	<a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
type ModelVoucherUpdateVoucherType string

// ModelCreditNote creditNote model
type ModelCreditNote struct {
	// Address Complete address of the recipient including name, street, city, zip and country.<br>
	//      Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry *struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// BookingCategory Defines the booking category, for more information see the section [Credit note booking categories](#tag/CreditNote/Credit-note-booking-categories)
	//
	// The booking category of the credit note.
	//
	// **Must be <code>UNDERACHIEVEMENT</code> in sevdesk-Update 2.0.**
	BookingCategory ModelCreditNoteBookingCategory `json:"bookingCategory"`

	// Contact The contact used in the creditNote
	Contact struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactPerson The user who acts as a contact person for the creditNote
	ContactPerson struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson"`

	// Create Date of creditNote creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// CreditNoteDate Needs to be provided as timestamp or dd.mm.yyyy
	CreditNoteDate time.Time `json:"creditNoteDate"`

	// CreditNoteNumber The creditNote number
	CreditNoteNumber string `json:"creditNoteNumber"`

	// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
	Currency string `json:"currency"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the creditNote number
	Header string `json:"header"`

	// Id The creditNote id. <span style='color:red'>Required</span> if you want to create/update an credit note position for an existing credit note"
	Id     *int `json:"id,omitempty"`
	MapAll bool `json:"mapAll"`

	// ObjectName The creditNote object name
	ObjectName string `json:"objectName"`

	// SendDate The date the creditNote was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelCreditNoteSendType `json:"sendType"`

	// SevClient Client to which creditNote belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the creditNote must not contain any vat
	SmallSettlement *bool `json:"smallSettlement"`

	// Status Please have a look in
	//     <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
	//     to see what the different status codes mean
	Status ModelCreditNoteStatus `json:"status"`

	// SumDiscounts Sum of all discounts in the creditNote
	SumDiscounts *float32 `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
	SumDiscountsForeignCurrency *float32 `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the creditNote
	SumGross *float32 `json:"sumGross,omitempty"`

	// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
	SumGrossForeignCurrency *float32 `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the creditNote
	SumNet *float32 `json:"sumNet,omitempty"`

	// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
	SumNetForeignCurrency *float32 `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the creditNote
	SumTax *float32 `json:"sumTax,omitempty"`

	// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
	SumTaxForeignCurrency *float32 `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate float32 `json:"taxRate"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelCreditNoteTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelCreditNoteTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the creditNote. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText string `json:"taxText"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the creditNote.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType string `json:"taxType"`

	// Update Date of last creditNote update
	Update *time.Time `json:"update,omitempty"`
}

// ModelCreditNoteBookingCategory Defines the booking category, for more information see the section [Credit note booking categories](#tag/CreditNote/Credit-note-booking-categories)
//
// The booking category of the credit note.
//
// **Must be <code>UNDERACHIEVEMENT</code> in sevdesk-Update 2.0.**
type ModelCreditNoteBookingCategory string

// ModelCreditNoteSendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelCreditNoteSendType string

// ModelCreditNoteStatus Please have a look in
//
//	<a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
//	to see what the different status codes mean
type ModelCreditNoteStatus string

// ModelCreditNoteTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelCreditNoteTaxRuleId string

// ModelCreditNoteTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelCreditNoteTaxRuleObjectName string

// ModelCreditNotePos creditNote position model
type ModelCreditNotePos struct {
	// Create Date of creditNote position creation
	Create *string `json:"create,omitempty"`

	// CreditNote The creditNote to which the position belongs.  <span style='color:red'>Required</span> if you want to create/update an credit note position for an existing credit note"
	CreditNote *struct {
		// Id Unique identifier of the creditNote
		Id int `json:"id"`

		// ObjectName Model name, which is 'creditNote'
		ObjectName string `json:"objectName"`
	} `json:"creditNote,omitempty"`

	// Discount An optional discount of the position.
	Discount *float32 `json:"discount"`

	// Id The creditNote position id.
	Id     *int `json:"id"`
	MapAll bool `json:"mapAll"`

	// Name Name of the article/part.
	Name *string `json:"name"`

	// ObjectName The creditNote position object name
	ObjectName string `json:"objectName"`

	// Optional Defines if the position is optional.
	Optional *bool `json:"optional"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id int `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to creditNote multiple positions.
	PositionNumber *int `json:"positionNumber"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *float32 `json:"price"`

	// PriceGross Gross price of the part
	PriceGross *float32 `json:"priceGross"`

	// PriceNet Net price of the part
	PriceNet *float32 `json:"priceNet"`

	// PriceTax Tax on the price of the part
	PriceTax *float32 `json:"priceTax"`

	// Quantity Quantity of the article/part
	Quantity float32 `json:"quantity"`

	// SevClient Client to which creditNote position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *float32 `json:"sumDiscount"`

	// TaxRate Tax rate of the position.
	TaxRate float32 `json:"taxRate"`

	// Text A text describing your position.
	Text *string `json:"text"`

	// Unity The unit in which the positions part is measured
	Unity struct {
		// Id Unique identifier of the unit
		Id int `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity"`

	// Update Date of last creditNote position update
	Update *string `json:"update,omitempty"`
}

// ModelCreditNotePosResponse creditNote position model
type ModelCreditNotePosResponse struct {
	// Create Date of creditNote position creation
	Create *string `json:"create,omitempty"`

	// CreditNote The creditNote to which the position belongs.
	CreditNote struct {
		// Id Unique identifier of the creditNote
		Id string `json:"id"`

		// ObjectName Model name, which is 'creditNote'
		ObjectName string `json:"objectName"`
	} `json:"creditNote"`

	// Discount An optional discount of the position.
	Discount *string `json:"discount"`

	// Id The creditNote position id
	Id *string `json:"id,omitempty"`

	// Name Name of the article/part.
	Name *string `json:"name"`

	// ObjectName The creditNote position object name
	ObjectName *string `json:"objectName,omitempty"`

	// Optional Defines if the position is optional.
	Optional *bool `json:"optional"`

	// Part Part from your inventory which is used in the position.
	Part *struct {
		// Id Unique identifier of the part
		Id string `json:"id"`

		// ObjectName Model name, which is 'Part'
		ObjectName string `json:"objectName"`
	} `json:"part,omitempty"`

	// PositionNumber Position number of your position. Can be used to creditNote multiple positions.
	PositionNumber *string `json:"positionNumber"`

	// Price Price of the article/part. Is either gross or net, depending on the sevdesk account setting.
	Price *string `json:"price"`

	// PriceGross Gross price of the part
	PriceGross *string `json:"priceGross"`

	// PriceNet Net price of the part
	PriceNet *string `json:"priceNet"`

	// PriceTax Tax on the price of the part
	PriceTax *string `json:"priceTax"`

	// Quantity Quantity of the article/part
	Quantity string `json:"quantity"`

	// SevClient Client to which creditNote position belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// SumDiscount Discount sum of the position
	SumDiscount *string `json:"sumDiscount"`

	// TaxRate Tax rate of the position.
	TaxRate string `json:"taxRate"`

	// Text A text describing your position.
	Text *string `json:"text"`

	// Unity The unit in which the positions part is measured
	Unity struct {
		// Id Unique identifier of the unit
		Id string `json:"id"`

		// ObjectName Model name, which is 'Unity'
		ObjectName string `json:"objectName"`
	} `json:"unity"`

	// Update Date of last creditNote position update
	Update *string `json:"update,omitempty"`
}

// ModelCreditNoteResponse creditNote model
type ModelCreditNoteResponse struct {
	// Address Complete address of the recipient including name, street, city, zip and country.<br>
	//      Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry *struct {
		// Id Unique identifier of the country
		Id string `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// Contact The contact used in the creditNote
	Contact *struct {
		// Id Unique identifier of the contact
		Id string `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactPerson The user who acts as a contact person for the creditNote
	ContactPerson *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson"`

	// Create Date of creditNote creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// CreditNoteDate The credit note date
	CreditNoteDate *time.Time `json:"creditNoteDate,omitempty"`

	// CreditNoteNumber The creditNote number
	CreditNoteNumber *string `json:"creditNoteNumber"`

	// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
	Currency *string `json:"currency"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the creditNote number
	Header *string `json:"header"`

	// Id The creditNote id
	Id *string `json:"id,omitempty"`

	// ObjectName The creditNote object name
	ObjectName *string `json:"objectName,omitempty"`

	// SendDate The date the creditNote was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelCreditNoteResponseSendType `json:"sendType"`

	// SevClient Client to which creditNote belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the creditNote must not contain any vat
	SmallSettlement *bool `json:"smallSettlement"`

	// Status Please have a look in
	//     <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
	//     to see what the different status codes mean
	Status *ModelCreditNoteResponseStatus `json:"status,omitempty"`

	// SumDiscounts Sum of all discounts in the creditNote
	SumDiscounts *string `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
	SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the creditNote
	SumGross *string `json:"sumGross,omitempty"`

	// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
	SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the creditNote
	SumNet *string `json:"sumNet,omitempty"`

	// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
	SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the creditNote
	SumTax *string `json:"sumTax,omitempty"`

	// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
	SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate *string `json:"taxRate"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelCreditNoteResponseTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelCreditNoteResponseTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the creditNote. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id string `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText *string `json:"taxText"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the creditNote.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *string `json:"taxType"`

	// Update Date of last creditNote update
	Update *time.Time `json:"update,omitempty"`
}

// ModelCreditNoteResponseSendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelCreditNoteResponseSendType string

// ModelCreditNoteResponseStatus Please have a look in
//
//	<a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
//	to see what the different status codes mean
type ModelCreditNoteResponseStatus string

// ModelCreditNoteResponseTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelCreditNoteResponseTaxRuleId string

// ModelCreditNoteResponseTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelCreditNoteResponseTaxRuleObjectName string

// ModelCreditNoteUpdate creditNote model
type ModelCreditNoteUpdate struct {
	// Address Complete address of the recipient including name, street, city, zip and country.<br>
	//      Line breaks can be used and will be displayed on the invoice pdf.
	Address *string `json:"address"`

	// AddressCountry Can be omitted as complete address is defined in address attribute
	AddressCountry *struct {
		// Id Unique identifier of the country
		Id int `json:"id"`

		// ObjectName Model name, which is 'StaticCountry'
		ObjectName string `json:"objectName"`
	} `json:"addressCountry"`

	// Contact The contact used in the creditNote
	Contact *struct {
		// Id Unique identifier of the contact
		Id int `json:"id"`

		// ObjectName Model name, which is 'Contact'
		ObjectName string `json:"objectName"`
	} `json:"contact"`

	// ContactPerson The user who acts as a contact person for the creditNote
	ContactPerson *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"contactPerson"`

	// Create Date of creditNote creation
	Create *time.Time `json:"create,omitempty"`

	// CreateUser Will be filled automatically by our system and can't be changed
	CreateUser *struct {
		// Id Unique identifier of the user
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevUser'
		ObjectName string `json:"objectName"`
	} `json:"createUser,omitempty"`

	// CreditNoteDate Needs to be provided as timestamp or dd.mm.yyyy
	CreditNoteDate *time.Time `json:"creditNoteDate,omitempty"`

	// CreditNoteNumber The creditNote number
	CreditNoteNumber *string `json:"creditNoteNumber"`

	// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
	Currency *string `json:"currency"`

	// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
	CustomerInternalNote *string `json:"customerInternalNote"`

	// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
	DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

	// FootText Certain html tags can be used here to format your text
	FootText *string `json:"footText"`

	// HeadText Certain html tags can be used here to format your text
	HeadText *string `json:"headText"`

	// Header Normally consist of prefix plus the creditNote number
	Header *string `json:"header"`

	// Id The creditNote id
	Id *int `json:"id,omitempty"`

	// ObjectName The creditNote object name
	ObjectName *string `json:"objectName,omitempty"`

	// SendDate The date the creditNote was sent to the customer
	SendDate *time.Time `json:"sendDate"`

	// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
	//      *     API-Overview to understand how this attribute can be used before using it!
	SendType *ModelCreditNoteUpdateSendType `json:"sendType"`

	// SevClient Client to which creditNote belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
	ShowNet *bool `json:"showNet,omitempty"`

	// SmallSettlement Defines if the client uses the small settlement scheme.
	//     If yes, the creditNote must not contain any vat
	SmallSettlement *bool `json:"smallSettlement"`

	// Status Please have a look in
	//     <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
	//     to see what the different status codes mean
	Status *ModelCreditNoteUpdateStatus `json:"status,omitempty"`

	// SumDiscounts Sum of all discounts in the creditNote
	SumDiscounts *float32 `json:"sumDiscounts,omitempty"`

	// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
	SumDiscountsForeignCurrency *float32 `json:"sumDiscountsForeignCurrency,omitempty"`

	// SumGross Gross sum of the creditNote
	SumGross *float32 `json:"sumGross,omitempty"`

	// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
	SumGrossForeignCurrency *float32 `json:"sumGrossForeignCurrency,omitempty"`

	// SumNet Net sum of the creditNote
	SumNet *float32 `json:"sumNet,omitempty"`

	// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
	SumNetForeignCurrency *float32 `json:"sumNetForeignCurrency,omitempty"`

	// SumTax Tax sum of the creditNote
	SumTax *float32 `json:"sumTax,omitempty"`

	// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
	SumTaxForeignCurrency *float32 `json:"sumTaxForeignCurrency,omitempty"`

	// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
	TaxRate *float32 `json:"taxRate"`

	// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
	TaxRule *struct {
		// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
		//
		// Defines the vat-regulation.
		// For "Regelbesteuerung" it can be one of:
		//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
		//   - `2` - Ausfuhren - allowedTaxRates: 0.0
		//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
		//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
		//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
		//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
		//
		// For small business owner ("Kleinunternehmer") it can be:
		//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
		Id ModelCreditNoteUpdateTaxRuleId `json:"id"`

		// ObjectName Name of the object. Must always be TaxRule
		ObjectName ModelCreditNoteUpdateTaxRuleObjectName `json:"objectName"`
	} `json:"taxRule,omitempty"`

	// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax set of the creditNote. Needs to be added if you chose the tax type custom
	TaxSet *struct {
		// Id Unique identifier of the object
		Id int `json:"id"`

		// ObjectName Model name, which is 'TaxSet'
		ObjectName string `json:"objectName"`
	} `json:"taxSet"`

	// TaxText A common tax text would be 'Umsatzsteuer 19%'
	TaxText *string `json:"taxText"`

	// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
	//
	// Tax type of the creditNote.
	// There are four tax types:
	// 1. default - Umsatzsteuer ausweisen
	// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
	// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
	// 4. custom - Using custom tax set
	// 5. ss - Not subject to VAT according to §19 1 UStG
	// Tax rates are heavily connected to the tax type used.
	TaxType *string `json:"taxType"`

	// Update Date of last creditNote update
	Update *time.Time `json:"update,omitempty"`
}

// ModelCreditNoteUpdateSendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
//   - API-Overview to understand how this attribute can be used before using it!
type ModelCreditNoteUpdateSendType string

// ModelCreditNoteUpdateStatus Please have a look in
//
//	<a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
//	to see what the different status codes mean
type ModelCreditNoteUpdateStatus string

// ModelCreditNoteUpdateTaxRuleId **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
//
// Defines the vat-regulation.
// For "Regelbesteuerung" it can be one of:
//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
//   - `2` - Ausfuhren - allowedTaxRates: 0.0
//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
//
// For small business owner ("Kleinunternehmer") it can be:
//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
type ModelCreditNoteUpdateTaxRuleId string

// ModelCreditNoteUpdateTaxRuleObjectName Name of the object. Must always be TaxRule
type ModelCreditNoteUpdateTaxRuleObjectName string

// ModelCreditNoteMailResponse defines model for Model_creditNote_mailResponse.
type ModelCreditNoteMailResponse struct {
	AdditionalInformation *string `json:"additionalInformation,omitempty"`

	// Create Date of email creation
	Create *time.Time `json:"create,omitempty"`
	From   *string    `json:"from,omitempty"`
	Id     *int       `json:"id,omitempty"`

	// Object creditNote model
	Object     *ModelCreditNoteResponse `json:"object,omitempty"`
	ObjectName *string                  `json:"objectName,omitempty"`

	// SevClient Client to which creditNote belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id int `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`
	Subject *string `json:"subject,omitempty"`
	Text    *string `json:"text,omitempty"`
	To      *string `json:"to,omitempty"`

	// Update Date of last email update
	Update *time.Time `json:"update,omitempty"`
}

// ModelDiscountsResponse defines model for Model_discountsResponse.
type ModelDiscountsResponse struct {
	// Create Date of discount creation
	Create *string `json:"create,omitempty"`

	// Discount Indicates that this is a discount or a surcharge (0 = surcharge, 1 = discount)
	Discount *string `json:"discount,omitempty"`

	// Id The id of the discount
	Id *int `json:"id,omitempty"`

	// IsNet Defines is the Discount net or gross (0 = net, 1 = gross)
	IsNet *string `json:"isNet,omitempty"`

	// ObjectName Model name, which is 'Discounts'
	ObjectName *string `json:"objectName,omitempty"`

	// Percentage Defines if this is a percentage or an absolute discount
	Percentage *string `json:"percentage,omitempty"`

	// SevClient Client to which the discount belongs
	SevClient *string `json:"sevClient,omitempty"`

	// Text A text describing your position.
	Text *string `json:"text,omitempty"`

	// Update Date of last discount update
	Update *string `json:"update,omitempty"`

	// Value Value of the discount
	Value *string `json:"value,omitempty"`
}

// ReceiptGuideDto Model holds data about a single selectable account with additional information matching to that account.
type ReceiptGuideDto struct {
	// AccountDatevId The ID of the matching account datev
	AccountDatevId *int `json:"accountDatevId,omitempty"`

	// AccountName The name of the account
	AccountName *string `json:"accountName,omitempty"`

	// AccountNumber The account number of the account datev (dependent on the active accounting system of the client)
	AccountNumber *string `json:"accountNumber,omitempty"`

	// AllowedReceiptTypes An array that holds the viable receipt types for this account
	AllowedReceiptTypes *[]string `json:"allowedReceiptTypes,omitempty"`

	// AllowedTaxRules An array that holds all possible tax rules for this account
	AllowedTaxRules *[]struct {
		// Description A readable description of the tax rule
		Description *string `json:"description,omitempty"`

		// Id The id of the tax rule to use in different scenarios
		Id *int `json:"id,omitempty"`

		// Name The name of the tax rule
		Name *string `json:"name,omitempty"`

		// TaxRates An array of tax rates which are combinable with this tax rule
		TaxRates *[]string `json:"taxRates,omitempty"`
	} `json:"allowedTaxRules,omitempty"`

	// Description The description of the account and/or what the account is used for
	Description *string `json:"description,omitempty"`
}

// CreateClearingAccount defines model for createClearingAccount.
type CreateClearingAccount struct {
	// AccountingNumber The booking account used for this clearing account, e.g. 3320 in SKR04 and 1723 in SKR03. Must be unique among all your CheckAccounts. Ask your tax consultant what to choose.
	AccountingNumber *int `json:"accountingNumber"`

	// Name Name of the check account
	Name *string `json:"name,omitempty"`
}

// CreateClearingAccountResponse CheckAccount model. Showing the properties relevant to clearing accounts.
type CreateClearingAccountResponse struct {
	// AccountingNumber The booking account used for this clearing account.
	AccountingNumber *string `json:"accountingNumber,omitempty"`

	// Create Date of check account creation
	Create *time.Time `json:"create,omitempty"`

	// Currency The currency of the check account.
	Currency *string `json:"currency,omitempty"`

	// DefaultAccount Defines if this check account is the default account.
	DefaultAccount *CreateClearingAccountResponseDefaultAccount `json:"defaultAccount,omitempty"`

	// Id The check account id
	Id *string `json:"id,omitempty"`

	// Name Name of the check account
	Name *string `json:"name,omitempty"`

	// ObjectName The check account object name, always 'CheckAccount'
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which check account belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Status of the check account. 0 <-> Archived - 100 <-> Active
	Status *CreateClearingAccountResponseStatus `json:"status,omitempty"`

	// Type The type of the check account. Clearing accounts are regarded as offline.
	Type *CreateClearingAccountResponseType `json:"type,omitempty"`

	// Update Date of last check account update
	Update *time.Time `json:"update,omitempty"`
}

// CreateClearingAccountResponseDefaultAccount Defines if this check account is the default account.
type CreateClearingAccountResponseDefaultAccount string

// CreateClearingAccountResponseStatus Status of the check account. 0 <-> Archived - 100 <-> Active
type CreateClearingAccountResponseStatus string

// CreateClearingAccountResponseType The type of the check account. Clearing accounts are regarded as offline.
type CreateClearingAccountResponseType string

// CreateFileImportAccount defines model for createFileImportAccount.
type CreateFileImportAccount struct {
	// AccountingNumber The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
	AccountingNumber *int `json:"accountingNumber"`

	// Iban IBAN of the bank account, without spaces
	Iban *string `json:"iban"`

	// ImportType Import type. Transactions can be imported by this method on the check account.
	ImportType *CreateFileImportAccountImportType `json:"importType,omitempty"`

	// Name Name of the check account
	Name *string `json:"name,omitempty"`
}

// CreateFileImportAccountImportType Import type. Transactions can be imported by this method on the check account.
type CreateFileImportAccountImportType string

// CreateFileImportAccountResponse CheckAccount model. Showing the properties relevant to file import accounts.
type CreateFileImportAccountResponse struct {
	// AccountingNumber The booking account used for this bank account, e.g. 1800 in SKR04 and 1200 in SKR03. Must be unique among all your CheckAccounts. Ignore to use a sensible default.
	AccountingNumber *string `json:"accountingNumber,omitempty"`

	// AutoMapTransactions Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
	AutoMapTransactions *CreateFileImportAccountResponseAutoMapTransactions `json:"autoMapTransactions,omitempty"`

	// Create Date of check account creation
	Create *time.Time `json:"create,omitempty"`

	// Currency The currency of the check account.
	Currency *string `json:"currency,omitempty"`

	// DefaultAccount Defines if this check account is the default account.
	DefaultAccount *CreateFileImportAccountResponseDefaultAccount `json:"defaultAccount,omitempty"`

	// Iban The IBAN of the account
	Iban *string `json:"iban"`

	// Id The check account id
	Id *string `json:"id,omitempty"`

	// ImportType Import type, for accounts that are type "online" but not connected to a data provider. Transactions can be imported by this method on the check account.
	ImportType *CreateFileImportAccountResponseImportType `json:"importType,omitempty"`

	// Name Name of the check account
	Name *string `json:"name,omitempty"`

	// ObjectName The check account object name, always 'CheckAccount'
	ObjectName *string `json:"objectName,omitempty"`

	// SevClient Client to which check account belongs. Will be filled automatically
	SevClient *struct {
		// Id Unique identifier of the client
		Id string `json:"id"`

		// ObjectName Model name, which is 'SevClient'
		ObjectName string `json:"objectName"`
	} `json:"sevClient,omitempty"`

	// Status Status of the check account. 0 <-> Archived - 100 <-> Active
	Status *CreateFileImportAccountResponseStatus `json:"status,omitempty"`

	// Type The type of the check account. Account with a CSV or MT940 import are regarded as online.
	Type *CreateFileImportAccountResponseType `json:"type,omitempty"`

	// Update Date of last check account update
	Update *time.Time `json:"update,omitempty"`
}

// CreateFileImportAccountResponseAutoMapTransactions Defines if transactions on this account are automatically mapped to invoice and vouchers when imported if possible.
type CreateFileImportAccountResponseAutoMapTransactions string

// CreateFileImportAccountResponseDefaultAccount Defines if this check account is the default account.
type CreateFileImportAccountResponseDefaultAccount string

// CreateFileImportAccountResponseImportType Import type, for accounts that are type "online" but not connected to a data provider. Transactions can be imported by this method on the check account.
type CreateFileImportAccountResponseImportType string

// CreateFileImportAccountResponseStatus Status of the check account. 0 <-> Archived - 100 <-> Active
type CreateFileImportAccountResponseStatus string

// CreateFileImportAccountResponseType The type of the check account. Account with a CSV or MT940 import are regarded as online.
type CreateFileImportAccountResponseType string

// SaveCreditNote defines model for saveCreditNote.
type SaveCreditNote struct {
	// CreditNote creditNote model
	CreditNote          ModelCreditNote `json:"creditNote"`
	CreditNotePosDelete *struct {
		// Id Id of credit note position
		Id int `json:"id"`

		// ObjectName Object name of credit note position
		ObjectName string `json:"objectName"`
	} `json:"creditNotePosDelete,omitempty"`
	CreditNotePosSave *[]ModelCreditNotePos `json:"creditNotePosSave,omitempty"`
	DiscountDelete    *struct {
		// Id ID of discount to delete
		Id int `json:"id"`

		// ObjectName Object name of discount
		ObjectName string `json:"objectName"`
	} `json:"discountDelete,omitempty"`
	DiscountSave *struct {
		// Discount Defines if this is a discount or a surcharge
		Discount bool `json:"discount"`

		// MapAll Internal param
		MapAll bool `json:"mapAll"`

		// ObjectName Object name of the discount
		ObjectName string `json:"objectName"`

		// Percentage Defines if this is a percentage or an absolute discount
		Percentage bool `json:"percentage"`

		// Text A text for your discount
		Text string `json:"text"`

		// Value Value of the discount
		Value float32 `json:"value"`
	} `json:"discountSave,omitempty"`
}

// SaveCreditNoteResponse defines model for saveCreditNoteResponse.
type SaveCreditNoteResponse struct {
	// CreditNote creditNote model
	CreditNote    *ModelCreditNoteResponse      `json:"creditNote,omitempty"`
	CreditNotePos *[]ModelCreditNotePosResponse `json:"creditNotePos,omitempty"`
}

// SaveInvoice defines model for saveInvoice.
type SaveInvoice struct {
	DiscountDelete *struct {
		// Id ID of discount to delete
		Id *int `json:"id,omitempty"`

		// ObjectName Object name of discount
		ObjectName *string `json:"objectName,omitempty"`
	} `json:"discountDelete,omitempty"`
	DiscountSave *[]struct {
		// Discount Defines if this is a discount or a surcharge
		Discount *bool `json:"discount,omitempty"`

		// MapAll Internal param
		MapAll *bool `json:"mapAll,omitempty"`

		// ObjectName Object name of the discount
		ObjectName *string `json:"objectName,omitempty"`

		// Percentage Defines if this is a percentage or an absolute discount
		Percentage *bool `json:"percentage,omitempty"`

		// Text A text for your discount
		Text *string `json:"text,omitempty"`

		// Value Value of the discount
		Value *float32 `json:"value,omitempty"`
	} `json:"discountSave,omitempty"`

	// Filename Filename of a previously upload file which should be attached.
	Filename *openapi_types.File `json:"filename,omitempty"`

	// Invoice Invoice model
	Invoice          ModelInvoice `json:"invoice"`
	InvoicePosDelete *struct {
		// Id Id of invoice position
		Id int `json:"id"`

		// ObjectName Object name of invoice position
		ObjectName string `json:"objectName"`
	} `json:"invoicePosDelete,omitempty"`
	InvoicePosSave *[]ModelInvoicePos `json:"invoicePosSave,omitempty"`
}

// SaveInvoiceResponse defines model for saveInvoiceResponse.
type SaveInvoiceResponse struct {
	// Filename Filename of a previously upload file which should be attached.
	Filename *openapi_types.File `json:"filename,omitempty"`

	// Invoice Invoice model
	Invoice    *ModelInvoiceResponse      `json:"invoice,omitempty"`
	InvoicePos *[]ModelInvoicePosResponse `json:"invoicePos,omitempty"`
}

// SaveOrder defines model for saveOrder.
type SaveOrder struct {
	// Order Order model
	Order          ModelOrder `json:"order"`
	OrderPosDelete *struct {
		// Id Id of order position
		Id int `json:"id"`

		// ObjectName Object name of order position
		ObjectName string `json:"objectName"`
	} `json:"orderPosDelete,omitempty"`
	OrderPosSave *[]ModelOrderPos `json:"orderPosSave,omitempty"`
}

// SaveOrderResponse defines model for saveOrderResponse.
type SaveOrderResponse struct {
	// Order Order model
	Order    *ModelOrderResponse      `json:"order,omitempty"`
	OrderPos *[]ModelOrderPosResponse `json:"orderPos,omitempty"`
}

// SaveVoucher defines model for saveVoucher.
type SaveVoucher struct {
	// Filename Filename of a previously upload file which should be attached.
	Filename *openapi_types.File `json:"filename,omitempty"`

	// Voucher Voucher model
	Voucher          ModelVoucher `json:"voucher"`
	VoucherPosDelete *struct {
		// Id Id of voucher position
		Id int `json:"id"`

		// ObjectName Object name of voucher position
		ObjectName string `json:"objectName"`
	} `json:"voucherPosDelete,omitempty"`
	VoucherPosSave *[]ModelVoucherPos `json:"voucherPosSave,omitempty"`
}

// SaveVoucherResponse defines model for saveVoucherResponse.
type SaveVoucherResponse struct {
	// Filename Filename of a previously upload file which should be attached.
	Filename *openapi_types.File `json:"filename,omitempty"`

	// Voucher Voucher model
	Voucher    *ModelVoucherResponse      `json:"voucher,omitempty"`
	VoucherPos *[]ModelVoucherPosResponse `json:"voucherPos,omitempty"`
}

// ValidationError defines model for validationError.
type ValidationError struct {
	Error *struct {
		// ExceptionUUID An identifier of this exact problem that can be given to the support team.
		ExceptionUUID *string `json:"exceptionUUID,omitempty"`
		Message       *string `json:"message,omitempty"`
	} `json:"error,omitempty"`
}

// GetAccountingContactParams defines parameters for GetAccountingContact.
type GetAccountingContactParams struct {
	// ContactId ID of contact for which you want the accounting contact.
	ContactId *string `form:"contact[id],omitempty" json:"contact[id],omitempty"`

	// ContactObjectName Object name. Only needed if you also defined the ID of a contact.
	ContactObjectName *string `form:"contact[objectName],omitempty" json:"contact[objectName],omitempty"`
}

// GetBalanceAtDateParams defines parameters for GetBalanceAtDate.
type GetBalanceAtDateParams struct {
	// Date Only consider transactions up to this date at 23:59:59
	Date openapi_types.Date `form:"date" json:"date"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// CheckAccountId Retrieve all transactions on this check account. Must be provided with checkAccount[objectName]
	CheckAccountId *int `form:"checkAccount[id],omitempty" json:"checkAccount[id],omitempty"`

	// CheckAccountObjectName Only required if checkAccount[id] was provided. 'CheckAccount' should be used as value.
	CheckAccountObjectName *string `form:"checkAccount[objectName],omitempty" json:"checkAccount[objectName],omitempty"`

	// IsBooked Only retrieve booked transactions
	IsBooked *bool `form:"isBooked,omitempty" json:"isBooked,omitempty"`

	// PaymtPurpose Only retrieve transactions with this payment purpose
	PaymtPurpose *string `form:"paymtPurpose,omitempty" json:"paymtPurpose,omitempty"`

	// StartDate Only retrieve transactions from this date on
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Only retrieve transactions up to this date
	EndDate *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`

	// PayeePayerName Only retrieve transactions with this payee / payer
	PayeePayerName *string `form:"payeePayerName,omitempty" json:"payeePayerName,omitempty"`

	// OnlyCredit Only retrieve credit transactions
	OnlyCredit *bool `form:"onlyCredit,omitempty" json:"onlyCredit,omitempty"`

	// OnlyDebit Only retrieve debit transactions
	OnlyDebit *bool `form:"onlyDebit,omitempty" json:"onlyDebit,omitempty"`
}

// GetCommunicationWaysParams defines parameters for GetCommunicationWays.
type GetCommunicationWaysParams struct {
	// ContactId ID of contact for which you want the communication ways.
	ContactId *string `form:"contact[id],omitempty" json:"contact[id],omitempty"`

	// ContactObjectName Object name. Only needed if you also defined the ID of a contact.
	ContactObjectName *string `form:"contact[objectName],omitempty" json:"contact[objectName],omitempty"`

	// Type Type of the communication ways you want to get.
	Type *GetCommunicationWaysParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Main Define if you only want the main communication way.
	Main *GetCommunicationWaysParamsMain `form:"main,omitempty" json:"main,omitempty"`
}

// GetCommunicationWaysParamsType defines parameters for GetCommunicationWays.
type GetCommunicationWaysParamsType string

// GetCommunicationWaysParamsMain defines parameters for GetCommunicationWays.
type GetCommunicationWaysParamsMain string

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Depth Defines if both organizations <b>and</b> persons should be returned.<br>
	//      '0' -> only organizations, '1' -> organizations and persons
	Depth *GetContactsParamsDepth `form:"depth,omitempty" json:"depth,omitempty"`

	// CustomerNumber Retrieve all contacts with this customer number
	CustomerNumber *string `form:"customerNumber,omitempty" json:"customerNumber,omitempty"`
}

// GetContactsParamsDepth defines parameters for GetContacts.
type GetContactsParamsDepth string

// FindContactsByCustomFieldValueParams defines parameters for FindContactsByCustomFieldValue.
type FindContactsByCustomFieldValueParams struct {
	// Value The value to be checked.
	Value string `form:"value" json:"value"`

	// CustomFieldSettingId ID of ContactCustomFieldSetting for which the value has to be checked.
	CustomFieldSettingId *string `form:"customFieldSetting[id],omitempty" json:"customFieldSetting[id],omitempty"`

	// CustomFieldSettingObjectName Object name. Only needed if you also defined the ID of a ContactCustomFieldSetting.
	CustomFieldSettingObjectName *string `form:"customFieldSetting[objectName],omitempty" json:"customFieldSetting[objectName],omitempty"`

	// CustomFieldName The ContactCustomFieldSetting name, if no ContactCustomFieldSetting is provided.
	CustomFieldName string `form:"customFieldName" json:"customFieldName"`
}

// ContactCustomerNumberAvailabilityCheckParams defines parameters for ContactCustomerNumberAvailabilityCheck.
type ContactCustomerNumberAvailabilityCheckParams struct {
	// CustomerNumber The customer number to be checked.
	CustomerNumber *string `form:"customerNumber,omitempty" json:"customerNumber,omitempty"`
}

// GetCreditNotesParams defines parameters for GetCreditNotes.
type GetCreditNotesParams struct {
	// Status Status of the CreditNote
	Status *GetCreditNotesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// CreditNoteNumber Retrieve all CreditNotes with this creditNote number
	CreditNoteNumber *string `form:"creditNoteNumber,omitempty" json:"creditNoteNumber,omitempty"`

	// StartDate Retrieve all CreditNotes with a date equal or higher
	StartDate *int `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Retrieve all CreditNotes with a date equal or lower
	EndDate *int `form:"endDate,omitempty" json:"endDate,omitempty"`

	// ContactId Retrieve all CreditNotes with this contact. Must be provided with contact[objectName]
	ContactId *int `form:"contact[id],omitempty" json:"contact[id],omitempty"`

	// ContactObjectName Only required if contact[id] was provided. 'Contact' should be used as value.
	ContactObjectName *string `form:"contact[objectName],omitempty" json:"contact[objectName],omitempty"`
}

// GetCreditNotesParamsStatus defines parameters for GetCreditNotes.
type GetCreditNotesParamsStatus string

// CreateCreditNoteFromInvoiceJSONBody defines parameters for CreateCreditNoteFromInvoice.
type CreateCreditNoteFromInvoiceJSONBody struct {
	Invoice struct {
		// Id The id of the existing invoice
		Id int `json:"id"`

		// ObjectName The objectName must be 'Invoice'
		ObjectName string `json:"objectName"`
	} `json:"invoice"`
}

// CreateCreditNoteFromVoucherJSONBody defines parameters for CreateCreditNoteFromVoucher.
type CreateCreditNoteFromVoucherJSONBody struct {
	Voucher struct {
		// Id The id of the existing Voucher
		Id int `json:"id"`

		// ObjectName The objectName must be 'Voucher'
		ObjectName string `json:"objectName"`
	} `json:"voucher"`
}

// BookCreditNoteJSONBody defines parameters for BookCreditNote.
type BookCreditNoteJSONBody struct {
	// Amount Amount which should be booked. Can also be a partial amount.
	Amount float32 `json:"amount"`

	// CheckAccount The check account on which should be booked.
	CheckAccount struct {
		// Id The id of the check account on which should be booked.
		Id int `json:"id"`

		// ObjectName Internal object name which is 'CheckAccount'.
		ObjectName string `json:"objectName"`
	} `json:"checkAccount"`

	// CheckAccountTransaction The check account transaction on which should be booked.<br>
	//     The transaction will be linked to the credit note.
	CheckAccountTransaction *struct {
		// Id The id of the check account transaction on which should be booked.
		Id int `json:"id"`

		// ObjectName Internal object name which is 'CheckAccountTransaction'.
		ObjectName string `json:"objectName"`
	} `json:"checkAccountTransaction,omitempty"`

	// CreateFeed Determines if a feed is created for the booking process.
	CreateFeed *bool `json:"createFeed,omitempty"`

	// Date The booking date. Most likely the current date.
	Date int `json:"date"`

	// Type Define a type for the booking.<br>
	//     The following type abbreviations are available (abbreviation <-> meaning).<br>
	//     <ul>
	// <li>FULL_PAYMENT <-> Normal booking</li><li>N <-> Partial booking (historically used for normal booking)</li>
	//     <li>CB <-> Reduced amount due to discount (skonto)</li>
	//     <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>
	//     <li>O <-> Reduced/Higher amount due to other reasons</li>
	//     <li>OF <-> Higher amount due to reminder charges</li>
	//     <li>MTC <-> Reduced amount due to the monetary traffic costs</li>
	//     </ul>
	Type BookCreditNoteJSONBodyType `json:"type"`
}

// BookCreditNoteJSONBodyType defines parameters for BookCreditNote.
type BookCreditNoteJSONBodyType string

// CreditNoteGetPdfParams defines parameters for CreditNoteGetPdf.
type CreditNoteGetPdfParams struct {
	// Download If u want to download the pdf of the credit note.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// PreventSendBy Defines if u want to send the credit note.
	PreventSendBy *bool `form:"preventSendBy,omitempty" json:"preventSendBy,omitempty"`
}

// CreditNoteSendByJSONBody defines parameters for CreditNoteSendBy.
type CreditNoteSendByJSONBody struct {
	// SendDraft To create a draft of a credit note for internal use. This operation will not alter the status of the credit note or create bookings for reports.
	SendDraft bool `json:"sendDraft"`

	// SendType Specifies the way in which the credit note was sent to the customer.<br>
	//      Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).
	SendType CreditNoteSendByJSONBodySendType `json:"sendType"`
}

// CreditNoteSendByJSONBodySendType defines parameters for CreditNoteSendBy.
type CreditNoteSendByJSONBodySendType string

// SendCreditNoteByPrintingParams defines parameters for SendCreditNoteByPrinting.
type SendCreditNoteByPrintingParams struct {
	// SendType the type you want to print.
	SendType string `form:"sendType" json:"sendType"`
}

// SendCreditNoteViaEMailJSONBody defines parameters for SendCreditNoteViaEMail.
type SendCreditNoteViaEMailJSONBody struct {
	// AdditionalAttachments Additional attachments to the mail. String of IDs of existing documents in your
	//      *                      sevdesk account separated by ','
	AdditionalAttachments *string `json:"additionalAttachments,omitempty"`

	// BccEmail String of mail addresses to be put as bcc separated by ','
	BccEmail *string `json:"bccEmail,omitempty"`

	// CcEmail String of mail addresses to be put as cc separated by ','
	CcEmail *string `json:"ccEmail,omitempty"`

	// Copy Should a copy of this email be sent to you?
	Copy *bool `json:"copy,omitempty"`

	// Subject The subject of the email.
	Subject string `json:"subject"`

	// Text The text of the email. Can contain html.
	Text string `json:"text"`

	// ToEmail The recipient of the email.
	ToEmail string `json:"toEmail"`
}

// GetcreditNotePositionsParams defines parameters for GetcreditNotePositions.
type GetcreditNotePositionsParams struct {
	// CreditNoteId Retrieve all creditNote positions belonging to this creditNote. Must be provided with creditNote[objectName]
	CreditNoteId *int `form:"creditNote[id],omitempty" json:"creditNote[id],omitempty"`

	// CreditNoteObjectName Only required if creditNote[id] was provided. 'creditNote' should be used as value.
	CreditNoteObjectName *string `form:"creditNote[objectName],omitempty" json:"creditNote[objectName],omitempty"`
}

// GetTemplatesParams defines parameters for GetTemplates.
type GetTemplatesParams struct {
	// Type Type of the templates you want to get.
	Type *GetTemplatesParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetTemplatesParamsType defines parameters for GetTemplates.
type GetTemplatesParamsType string

// ExportContactParams defines parameters for ExportContact.
type ExportContactParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// City filters the contacts by city
			City    *string `json:"city,omitempty"`
			Country *struct {
				// Id id of the country
				Id int `json:"id"`

				// ObjectName Model name, which is 'StaticCountry'
				ObjectName string `json:"objectName"`
			} `json:"country,omitempty"`

			// Depth export only organisations
			Depth *bool `json:"depth,omitempty"`

			// OnlyPeople export only people
			OnlyPeople *bool `json:"onlyPeople,omitempty"`

			// Zip filters the contacts by zip code
			Zip *int `json:"zip,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'Contact'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ExportCreditNoteParams defines parameters for ExportCreditNote.
type ExportCreditNoteParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the credit notes by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the credit notes by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the credit note
			EndDate *time.Time `json:"endDate,omitempty"`

			// StartAmount filters the credit notes by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the credit note
			StartDate *time.Time `json:"startDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'CreditNote'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ExportDatevParams defines parameters for ExportDatev.
type ExportDatevParams struct {
	// Download Specifies if the document is downloaded
	Download *bool `form:"Download,omitempty" json:"Download,omitempty"`

	// StartDate the start date of the export as timestamp
	StartDate int `form:"startDate" json:"startDate"`

	// EndDate the end date of the export as timestamp
	EndDate int `form:"endDate" json:"endDate"`

	// Scope Define what you want to include in the datev export. This parameter takes a string of 5 letters. Each stands for a model that should be included. Possible letters are: ‘E’ (Earnings), ‘X’ (Expenditure), ‘T’ (Transactions), ‘C’ (Cashregister), ‘D’ (Assets). By providing one of those letter you specify that it should be included in the datev export. Some combinations are: ‘EXTCD’, ‘EXTD’ …
	Scope string `form:"scope" json:"scope"`

	// WithUnpaidDocuments include unpaid documents
	WithUnpaidDocuments *bool `form:"withUnpaidDocuments,omitempty" json:"withUnpaidDocuments,omitempty"`

	// WithEnshrinedDocuments include enshrined documents
	WithEnshrinedDocuments *bool `form:"withEnshrinedDocuments,omitempty" json:"withEnshrinedDocuments,omitempty"`

	// Enshrine Specify if you want to enshrine all models which were included in the export
	Enshrine *bool `form:"enshrine,omitempty" json:"enshrine,omitempty"`
}

// ExportInvoiceParams defines parameters for ExportInvoice.
type ExportInvoiceParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the invoices by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the invoices by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the invoice
			EndDate *time.Time `json:"endDate,omitempty"`

			// InvoiceType Type of invoices you want to export
			// 1. RE - Rechnung
			// 2. SR - Stornorechnung
			// 3. TR - Teilrechnung
			// 4. AR - Abschlagsrechnung
			// 5. ER - Endrechnung
			// 6. WKR - Wiederkehrende Rechnung
			// 7. MA - Mahnung
			InvoiceType *[]interface{} `json:"invoiceType,omitempty"`

			// StartAmount filters the invoices by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the invoice
			StartDate *time.Time `json:"startDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'Invoice'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ExportInvoiceZipParams defines parameters for ExportInvoiceZip.
type ExportInvoiceZipParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the invoices by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the invoices by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the invoice
			EndDate *time.Time `json:"endDate,omitempty"`

			// InvoiceType Type of invoices you want to export
			// 1. RE - Rechnung
			// 2. SR - Stornorechnung
			// 3. TR - Teilrechnung
			// 4. AR - Abschlagsrechnung
			// 5. ER - Endrechnung
			// 6. WKR - Wiederkehrende Rechnung
			// 7. MA - Mahnung
			InvoiceType *[]interface{} `json:"invoiceType,omitempty"`

			// StartAmount filters the invoices by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the invoice
			StartDate *time.Time `json:"startDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'Invoice'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ExportTransactionsParams defines parameters for ExportTransactions.
type ExportTransactionsParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			CheckAccount *struct {
				// Id Id of the checkAccount
				Id int `json:"id"`

				// ObjectName Model name, which is 'CheckAccount'
				ObjectName string `json:"objectName"`
			} `json:"checkAccount,omitempty"`

			// EndAmount filters the transactions by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the transactions
			EndDate *time.Time `json:"endDate,omitempty"`

			// Name the name of the payee/payer
			Name *string `json:"name,omitempty"`

			// PaymtPurpose the payment purpose
			PaymtPurpose *string `json:"paymtPurpose,omitempty"`

			// StartAmount filters the transactions by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the transactions
			StartDate *time.Time `json:"startDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'CheckAccountTransaction'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ExportVoucherParams defines parameters for ExportVoucher.
type ExportVoucherParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the vouchers by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the vouchers by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the voucher
			EndDate *time.Time `json:"endDate,omitempty"`

			// EndPayDate End pay date of the voucher
			EndPayDate *time.Time `json:"endPayDate,omitempty"`

			// StartAmount filters the vouchers by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the voucher
			StartDate *time.Time `json:"startDate,omitempty"`

			// StartPayDate Start pay date of the voucher
			StartPayDate *time.Time `json:"startPayDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'Voucher'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ExportVoucherZipParams defines parameters for ExportVoucherZip.
type ExportVoucherZipParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the vouchers by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the vouchers by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the voucher
			EndDate *time.Time `json:"endDate,omitempty"`

			// EndPayDate End pay date of the voucher
			EndPayDate *time.Time `json:"endPayDate,omitempty"`

			// StartAmount filters the vouchers by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the voucher
			StartDate *time.Time `json:"startDate,omitempty"`

			// StartPayDate Start pay date of the voucher
			StartPayDate *time.Time `json:"startPayDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name, which is 'Voucher'
		ModelName interface{} `json:"modelName"`

		// ObjectName Model name, which is 'SevQuery'
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// GetInvoicesParams defines parameters for GetInvoices.
type GetInvoicesParams struct {
	// Status Status of the invoices
	Status *GetInvoicesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// InvoiceNumber Retrieve all invoices with this invoice number
	InvoiceNumber *string `form:"invoiceNumber,omitempty" json:"invoiceNumber,omitempty"`

	// StartDate Retrieve all invoices with a date equal or higher
	StartDate *int `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Retrieve all invoices with a date equal or lower
	EndDate *int `form:"endDate,omitempty" json:"endDate,omitempty"`

	// ContactId Retrieve all invoices with this contact. Must be provided with contact[objectName]
	ContactId *int `form:"contact[id],omitempty" json:"contact[id],omitempty"`

	// ContactObjectName Only required if contact[id] was provided. 'Contact' should be used as value.
	ContactObjectName *string `form:"contact[objectName],omitempty" json:"contact[objectName],omitempty"`
}

// GetInvoicesParamsStatus defines parameters for GetInvoices.
type GetInvoicesParamsStatus float32

// CreateInvoiceReminderJSONBody defines parameters for CreateInvoiceReminder.
type CreateInvoiceReminderJSONBody struct {
	// Invoice Invoice for the reminder
	Invoice struct {
		// Id Id of the invoice
		Id int `json:"id"`

		// ObjectName Model name, which is 'Invoice'
		ObjectName string `json:"objectName"`
	} `json:"invoice"`
}

// CreateInvoiceReminderParams defines parameters for CreateInvoiceReminder.
type CreateInvoiceReminderParams struct {
	// InvoiceId the id of the invoice
	InvoiceId int `form:"invoice[id]" json:"invoice[id]"`

	// InvoiceObjectName Model name, which is 'Invoice'
	InvoiceObjectName string `form:"invoice[objectName]" json:"invoice[objectName]"`
}

// BookInvoiceJSONBody defines parameters for BookInvoice.
type BookInvoiceJSONBody struct {
	// Amount Amount which should be booked. Can also be a partial amount.
	Amount float32 `json:"amount"`

	// CheckAccount The check account on which should be booked.
	CheckAccount struct {
		// Id The id of the check account on which should be booked.
		Id int `json:"id"`

		// ObjectName Internal object name which is 'CheckAccount'.
		ObjectName string `json:"objectName"`
	} `json:"checkAccount"`

	// CheckAccountTransaction The check account transaction on which should be booked.<br>
	//     The transaction will be linked to the invoice.
	CheckAccountTransaction *struct {
		// Id The id of the check account transaction on which should be booked.
		Id int `json:"id"`

		// ObjectName Internal object name which is 'CheckAccountTransaction'.
		ObjectName string `json:"objectName"`
	} `json:"checkAccountTransaction,omitempty"`

	// CreateFeed Determines if a feed is created for the booking process.
	CreateFeed *bool `json:"createFeed,omitempty"`

	// Date The booking date. Most likely the current date.
	Date int `json:"date"`

	// Type Define a type for the booking.<br>
	//     The following type abbreviations are available (abbreviation <-> meaning).<br>
	//     <ul>
	// <li>FULL_PAYMENT <-> Normal booking</li><li>N <-> Partial booking (historically used for normal booking)</li>
	//     <li>CB <-> Reduced amount due to discount (skonto)</li>
	//     <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>
	//     <li>O <-> Reduced/Higher amount due to other reasons</li>
	//     <li>OF <-> Higher amount due to reminder charges</li>
	//     <li>MTC <-> Reduced amount due to the monetary traffic costs</li>
	//     </ul>
	Type BookInvoiceJSONBodyType `json:"type"`
}

// BookInvoiceJSONBodyType defines parameters for BookInvoice.
type BookInvoiceJSONBodyType string

// InvoiceGetPdfParams defines parameters for InvoiceGetPdf.
type InvoiceGetPdfParams struct {
	// Download If u want to download the pdf of the invoice.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// PreventSendBy Defines if u want to send the invoice.
	PreventSendBy *bool `form:"preventSendBy,omitempty" json:"preventSendBy,omitempty"`
}

// GetInvoicePositionsByIdParams defines parameters for GetInvoicePositionsById.
type GetInvoicePositionsByIdParams struct {
	// Limit limits the number of entries returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset set the index where the returned entries start
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
	Embed *[]string `form:"embed,omitempty" json:"embed,omitempty"`
}

// InvoiceRenderJSONBody defines parameters for InvoiceRender.
type InvoiceRenderJSONBody struct {
	// ForceReload Define if a forceful re-render should occur.
	ForceReload *bool `json:"forceReload,omitempty"`
}

// InvoiceSendByJSONBody defines parameters for InvoiceSendBy.
type InvoiceSendByJSONBody struct {
	// SendDraft To create a draft of an invoice for internal use. This operation will not alter the status of the invoice or create bookings for reports.
	SendDraft bool `json:"sendDraft"`

	// SendType Specifies the way in which the invoice was sent to the customer.<br>
	//      Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).
	SendType InvoiceSendByJSONBodySendType `json:"sendType"`
}

// InvoiceSendByJSONBodySendType defines parameters for InvoiceSendBy.
type InvoiceSendByJSONBodySendType string

// SendInvoiceViaEMailJSONBody defines parameters for SendInvoiceViaEMail.
type SendInvoiceViaEMailJSONBody struct {
	// AdditionalAttachments Additional attachments to the mail. String of IDs of existing documents in your
	//      *                      sevdesk account separated by ','
	AdditionalAttachments *string `json:"additionalAttachments,omitempty"`

	// BccEmail String of mail addresses to be put as bcc separated by ','
	BccEmail *string `json:"bccEmail,omitempty"`

	// CcEmail String of mail addresses to be put as cc separated by ','
	CcEmail *string `json:"ccEmail,omitempty"`

	// Copy Should a copy of this email be sent to you?
	Copy *bool `json:"copy,omitempty"`

	// SendXml If true, the XML of the e-invoice is attached to the email instead of the PDF
	SendXml *bool `json:"sendXml,omitempty"`

	// Subject The subject of the email.
	Subject string `json:"subject"`

	// Text The text of the email. Can contain html.
	Text string `json:"text"`

	// ToEmail The recipient of the email.
	ToEmail string `json:"toEmail"`
}

// GetInvoicePosParams defines parameters for GetInvoicePos.
type GetInvoicePosParams struct {
	// Id Retrieve all InvoicePos with this InvoicePos id
	Id *float32 `form:"id,omitempty" json:"id,omitempty"`

	// InvoiceId Retrieve all invoices positions with this invoice. Must be provided with invoice[objectName]
	InvoiceId *float32 `form:"invoice[id],omitempty" json:"invoice[id],omitempty"`

	// InvoiceObjectName Only required if invoice[id] was provided. 'Invoice' should be used as value.
	InvoiceObjectName *string `form:"invoice[objectName],omitempty" json:"invoice[objectName],omitempty"`

	// PartId Retrieve all invoices positions with this part. Must be provided with part[objectName]
	PartId *float32 `form:"part[id],omitempty" json:"part[id],omitempty"`

	// PartObjectName Only required if part[id] was provided. 'Part' should be used as value.
	PartObjectName *string `form:"part[objectName],omitempty" json:"part[objectName],omitempty"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// Status Status of the order
	Status *GetOrdersParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// OrderNumber Retrieve all orders with this order number
	OrderNumber *string `form:"orderNumber,omitempty" json:"orderNumber,omitempty"`

	// StartDate Retrieve all orders with a date equal or higher
	StartDate *int `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Retrieve all orders with a date equal or lower
	EndDate *int `form:"endDate,omitempty" json:"endDate,omitempty"`

	// ContactId Retrieve all orders with this contact. Must be provided with contact[objectName]
	ContactId *int `form:"contact[id],omitempty" json:"contact[id],omitempty"`

	// ContactObjectName Only required if contact[id] was provided. 'Contact' should be used as value.
	ContactObjectName *string `form:"contact[objectName],omitempty" json:"contact[objectName],omitempty"`
}

// GetOrdersParamsStatus defines parameters for GetOrders.
type GetOrdersParamsStatus int

// CreateContractNoteFromOrderParams defines parameters for CreateContractNoteFromOrder.
type CreateContractNoteFromOrderParams struct {
	// OrderId the id of the order
	OrderId int `form:"order[id]" json:"order[id]"`

	// OrderObjectName Model name, which is 'Order'
	OrderObjectName string `form:"order[objectName]" json:"order[objectName]"`
}

// CreatePackingListFromOrderParams defines parameters for CreatePackingListFromOrder.
type CreatePackingListFromOrderParams struct {
	// OrderId the id of the order
	OrderId int `form:"order[id]" json:"order[id]"`

	// OrderObjectName Model name, which is 'Order'
	OrderObjectName string `form:"order[objectName]" json:"order[objectName]"`
}

// GetDiscountsParams defines parameters for GetDiscounts.
type GetDiscountsParams struct {
	// Limit limits the number of entries returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset set the index where the returned entries start
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
	Embed *[]string `form:"embed,omitempty" json:"embed,omitempty"`
}

// OrderGetPdfParams defines parameters for OrderGetPdf.
type OrderGetPdfParams struct {
	// Download If u want to download the pdf of the order.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// PreventSendBy Defines if u want to send the order.
	PreventSendBy *bool `form:"preventSendBy,omitempty" json:"preventSendBy,omitempty"`
}

// GetOrderPositionsByIdParams defines parameters for GetOrderPositionsById.
type GetOrderPositionsByIdParams struct {
	// Limit limits the number of entries returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset set the index where the returned entries start
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
	Embed *[]string `form:"embed,omitempty" json:"embed,omitempty"`
}

// GetRelatedObjectsParams defines parameters for GetRelatedObjects.
type GetRelatedObjectsParams struct {
	// IncludeItself Define if the related objects include the order itself
	IncludeItself *bool `form:"includeItself,omitempty" json:"includeItself,omitempty"`

	// SortByType Define if you want the related objects sorted by type
	SortByType *bool `form:"sortByType,omitempty" json:"sortByType,omitempty"`

	// Embed Get some additional information. Embed can handle multiple values, they must be separated by comma.
	Embed *[]string `form:"embed,omitempty" json:"embed,omitempty"`
}

// OrderSendByJSONBody defines parameters for OrderSendBy.
type OrderSendByJSONBody struct {
	// SendDraft To create a draft of an order for internal use. This operation will not alter the status of the order.
	SendDraft bool `json:"sendDraft"`

	// SendType Specifies the way in which the order was sent to the customer.<br>
	//      Accepts 'VPR' (print), 'VP' (postal), 'VM' (mail) and 'VPDF' (downloaded pfd).
	SendType OrderSendByJSONBodySendType `json:"sendType"`
}

// OrderSendByJSONBodySendType defines parameters for OrderSendBy.
type OrderSendByJSONBodySendType string

// SendorderViaEMailJSONBody defines parameters for SendorderViaEMail.
type SendorderViaEMailJSONBody struct {
	// AdditionalAttachments Additional attachments to the mail. String of IDs of existing documents in your
	//      *                      sevdesk account separated by ','
	AdditionalAttachments *string `json:"additionalAttachments,omitempty"`

	// BccEmail String of mail addresses to be put as bcc separated by ','
	BccEmail *string `json:"bccEmail,omitempty"`

	// CcEmail String of mail addresses to be put as cc separated by ','
	CcEmail *string `json:"ccEmail,omitempty"`

	// Copy Should a copy of this email be sent to you?
	Copy *bool `json:"copy,omitempty"`

	// Subject The subject of the email.
	Subject string `json:"subject"`

	// Text The text of the email. Can contain html.
	Text string `json:"text"`

	// ToEmail The recipient of the email.
	ToEmail string `json:"toEmail"`
}

// GetOrderPositionsParams defines parameters for GetOrderPositions.
type GetOrderPositionsParams struct {
	// OrderId Retrieve all order positions belonging to this order. Must be provided with voucher[objectName]
	OrderId *int `form:"order[id],omitempty" json:"order[id],omitempty"`

	// OrderObjectName Only required if order[id] was provided. 'Order' should be used as value.
	OrderObjectName *string `form:"order[objectName],omitempty" json:"order[objectName],omitempty"`
}

// GetPartsParams defines parameters for GetParts.
type GetPartsParams struct {
	// PartNumber Retrieve all parts with this part number
	PartNumber *string `form:"partNumber,omitempty" json:"partNumber,omitempty"`

	// Name Retrieve all parts with this name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ForAccountNumberParams defines parameters for ForAccountNumber.
type ForAccountNumberParams struct {
	// AccountNumber The datev account number you want to get additional information of
	AccountNumber int `form:"accountNumber" json:"accountNumber"`
}

// ForTaxRuleParams defines parameters for ForTaxRule.
type ForTaxRuleParams struct {
	// TaxRule The code of the tax rule you want to get guidance for.
	TaxRule string `form:"taxRule" json:"taxRule"`
}

// ReportContactParams defines parameters for ReportContact.
type ReportContactParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// City filters the contacts by city
			City    *string `json:"city,omitempty"`
			Country *struct {
				// Id id of the country
				Id int `json:"id"`

				// ObjectName Model name, which is 'StaticCountry'
				ObjectName string `json:"objectName"`
			} `json:"country,omitempty"`

			// Depth export only organisations
			Depth *bool `json:"depth,omitempty"`

			// OnlyPeople export only people
			OnlyPeople *bool `json:"onlyPeople,omitempty"`

			// Zip filters the contacts by zip code
			Zip *int `json:"zip,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name which is exported
		ModelName interface{} `json:"modelName"`

		// ObjectName SevQuery object name
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ReportInvoiceParams defines parameters for ReportInvoice.
type ReportInvoiceParams struct {
	Download *bool  `form:"download,omitempty" json:"download,omitempty"`
	View     string `form:"view" json:"view"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the invoices by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the invoices by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the invoice
			EndDate *time.Time `json:"endDate,omitempty"`

			// InvoiceType Type of invoices you want to export
			// 1. RE - Rechnung
			// 2. SR - Stornorechnung
			// 3. TR - Teilrechnung
			// 4. AR - Abschlagsrechnung
			// 5. ER - Endrechnung
			// 6. WKR - Wiederkehrende Rechnung
			// 7. MA - Mahnung
			InvoiceType *[]interface{} `json:"invoiceType,omitempty"`

			// StartAmount filters the invoices by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the invoice
			StartDate *time.Time `json:"startDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name which is exported
		ModelName interface{} `json:"modelName"`

		// ObjectName SevQuery object name
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ReportOrderParams defines parameters for ReportOrder.
type ReportOrderParams struct {
	Download *bool  `form:"download,omitempty" json:"download,omitempty"`
	View     string `form:"view" json:"view"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the orders by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the orders by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the order
			EndDate *time.Time `json:"endDate,omitempty"`

			// OrderType Type of orders you want to export
			// 1. AN - Angebote
			// 2. AB - Aufträge
			// 3. LI - Lieferscheine
			OrderType *ReportOrderParamsSevQueryFilterOrderType `json:"orderType,omitempty"`

			// StartAmount filters the orders by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the order
			StartDate *time.Time `json:"startDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name which is exported
		ModelName interface{} `json:"modelName"`

		// ObjectName SevQuery object name
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// ReportOrderParamsSevQueryFilterOrderType defines parameters for ReportOrder.
type ReportOrderParamsSevQueryFilterOrderType string

// ReportVoucherParams defines parameters for ReportVoucher.
type ReportVoucherParams struct {
	Download *bool `form:"download,omitempty" json:"download,omitempty"`
	SevQuery struct {
		Filter *struct {
			// Contact filters the vouchers by contact
			Contact *struct {
				// Id ID of the contact
				Id int `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// EndAmount filters the vouchers by amount
			EndAmount *int `json:"endAmount,omitempty"`

			// EndDate End date of the voucher
			EndDate *time.Time `json:"endDate,omitempty"`

			// EndPayDate End pay date of the voucher
			EndPayDate *time.Time `json:"endPayDate,omitempty"`

			// StartAmount filters the vouchers by amount
			StartAmount *int `json:"startAmount,omitempty"`

			// StartDate Start date of the voucher
			StartDate *time.Time `json:"startDate,omitempty"`

			// StartPayDate Start pay date of the voucher
			StartPayDate *time.Time `json:"startPayDate,omitempty"`
		} `json:"filter,omitempty"`

		// Limit Limit export
		Limit *int `json:"limit,omitempty"`

		// ModelName Model name which is exported
		ModelName interface{} `json:"modelName"`

		// ObjectName SevQuery object name
		ObjectName interface{} `json:"objectName"`
	} `form:"sevQuery" json:"sevQuery"`
}

// UpdateExportConfigJSONBody defines parameters for UpdateExportConfig.
type UpdateExportConfigJSONBody struct {
	AccountantClientNumber float32 `json:"accountantClientNumber"`
	AccountantNumber       float32 `json:"accountantNumber"`
	AccountingYearBegin    int64   `json:"accountingYearBegin"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// Id ID of the Tag
	Id *float32 `form:"id,omitempty" json:"id,omitempty"`

	// Name Name of the Tag
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreateTagJSONBody defines parameters for CreateTag.
type CreateTagJSONBody struct {
	// Name Name of the tag
	Name   *string `json:"name,omitempty"`
	Object struct {
		// Id Id of the invoice/order/voucher/creditNote
		Id int `json:"id"`

		// ObjectName Model name
		ObjectName CreateTagJSONBodyObjectObjectName `json:"objectName"`
	} `json:"object"`
}

// CreateTagJSONBodyObjectObjectName defines parameters for CreateTag.
type CreateTagJSONBodyObjectObjectName string

// UpdateTagJSONBody defines parameters for UpdateTag.
type UpdateTagJSONBody struct {
	// Name The name of the tag u want to update
	Name *string `json:"name,omitempty"`
}

// GetPlaceholderParams defines parameters for GetPlaceholder.
type GetPlaceholderParams struct {
	// ObjectName Model name
	ObjectName GetPlaceholderParamsObjectName `form:"objectName" json:"objectName"`

	// SubObjectName Sub model name, required if you have "Email" at objectName
	SubObjectName *GetPlaceholderParamsSubObjectName `form:"subObjectName,omitempty" json:"subObjectName,omitempty"`
}

// GetPlaceholderParamsObjectName defines parameters for GetPlaceholder.
type GetPlaceholderParamsObjectName string

// GetPlaceholderParamsSubObjectName defines parameters for GetPlaceholder.
type GetPlaceholderParamsSubObjectName string

// GetVouchersParams defines parameters for GetVouchers.
type GetVouchersParams struct {
	// Status Status of the vouchers to retrieve.
	Status *GetVouchersParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// CreditDebit Define if you only want credit or debit vouchers.
	CreditDebit *GetVouchersParamsCreditDebit `form:"creditDebit,omitempty" json:"creditDebit,omitempty"`

	// DescriptionLike Retrieve all vouchers with a description like this.
	DescriptionLike *string `form:"descriptionLike,omitempty" json:"descriptionLike,omitempty"`

	// StartDate Retrieve all vouchers with a date equal or higher
	StartDate *int `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Retrieve all vouchers with a date equal or lower
	EndDate *int `form:"endDate,omitempty" json:"endDate,omitempty"`

	// ContactId Retrieve all vouchers with this contact. Must be provided with contact[objectName]
	ContactId *int `form:"contact[id],omitempty" json:"contact[id],omitempty"`

	// ContactObjectName Only required if contact[id] was provided. 'Contact' should be used as value.
	ContactObjectName *string `form:"contact[objectName],omitempty" json:"contact[objectName],omitempty"`
}

// GetVouchersParamsStatus defines parameters for GetVouchers.
type GetVouchersParamsStatus float32

// GetVouchersParamsCreditDebit defines parameters for GetVouchers.
type GetVouchersParamsCreditDebit string

// BookVoucherJSONBody defines parameters for BookVoucher.
type BookVoucherJSONBody struct {
	// Amount Amount which should be booked. Can also be a partial amount.
	Amount float32 `json:"amount"`

	// CheckAccount The check account on which should be booked.
	CheckAccount struct {
		// Id The id of the check account on which should be booked.
		Id int `json:"id"`

		// ObjectName Internal object name which is 'CheckAccount'.
		ObjectName string `json:"objectName"`
	} `json:"checkAccount"`

	// CheckAccountTransaction The check account transaction on which should be booked.<br>
	//     The transaction will be linked to the voucher.
	CheckAccountTransaction *struct {
		// Id The id of the check account transaction on which should be booked.
		Id int `json:"id"`

		// ObjectName Internal object name which is 'CheckAccountTransaction'.
		ObjectName string `json:"objectName"`
	} `json:"checkAccountTransaction,omitempty"`

	// CreateFeed Determines if a feed is created for the booking process.
	CreateFeed *bool `json:"createFeed,omitempty"`

	// Date The booking date. Most likely the current date.
	Date time.Time `json:"date"`

	// Type Define a type for the booking.<br>
	//     The following type abbreviations are available (abbreviation <-> meaning).<br>
	//     <ul>
	// <li>FULL_PAYMENT <-> Normal booking</li><li>N <-> Partial booking (historically used for normal booking)</li>
	//     <li>CB <-> Reduced amount due to discount (skonto)</li>
	//     <li>CF <-> Reduced/Higher amount due to currency fluctuations (deprecated)</li>
	//     <li>O <-> Reduced/Higher amount due to other reasons</li>
	//     <li>OF <-> Higher amount due to reminder charges</li>
	//     <li>MTC <-> Reduced amount due to the monetary traffic costs</li>
	//     </ul>
	Type BookVoucherJSONBodyType `json:"type"`
}

// BookVoucherJSONBodyType defines parameters for BookVoucher.
type BookVoucherJSONBodyType string

// GetVoucherPositionsParams defines parameters for GetVoucherPositions.
type GetVoucherPositionsParams struct {
	// VoucherId Retrieve all vouchers positions belonging to this voucher. Must be provided with voucher[objectName]
	VoucherId *int `form:"voucher[id],omitempty" json:"voucher[id],omitempty"`

	// VoucherObjectName Only required if voucher[id] was provided. 'Voucher' should be used as value.
	VoucherObjectName *string `form:"voucher[objectName],omitempty" json:"voucher[objectName],omitempty"`
}

// CreateAccountingContactJSONRequestBody defines body for CreateAccountingContact for application/json ContentType.
type CreateAccountingContactJSONRequestBody = ModelAccountingContact

// UpdateAccountingContactJSONRequestBody defines body for UpdateAccountingContact for application/json ContentType.
type UpdateAccountingContactJSONRequestBody = ModelAccountingContactUpdate

// CreateCheckAccountJSONRequestBody defines body for CreateCheckAccount for application/json ContentType.
type CreateCheckAccountJSONRequestBody = ModelCheckAccount

// CreateClearingAccountJSONRequestBody defines body for CreateClearingAccount for application/json ContentType.
type CreateClearingAccountJSONRequestBody = CreateClearingAccount

// CreateFileImportAccountJSONRequestBody defines body for CreateFileImportAccount for application/json ContentType.
type CreateFileImportAccountJSONRequestBody = CreateFileImportAccount

// UpdateCheckAccountJSONRequestBody defines body for UpdateCheckAccount for application/json ContentType.
type UpdateCheckAccountJSONRequestBody = ModelCheckAccountUpdate

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody = ModelCheckAccountTransaction

// UpdateCheckAccountTransactionJSONRequestBody defines body for UpdateCheckAccountTransaction for application/json ContentType.
type UpdateCheckAccountTransactionJSONRequestBody = ModelCheckAccountTransactionUpdate

// CreateCommunicationWayJSONRequestBody defines body for CreateCommunicationWay for application/json ContentType.
type CreateCommunicationWayJSONRequestBody = ModelCommunicationWay

// UpdateCommunicationWayJSONRequestBody defines body for UpdateCommunicationWay for application/json ContentType.
type UpdateCommunicationWayJSONRequestBody = ModelCommunicationWayUpdate

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody = ModelContact

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody = ModelContactUpdate

// CreateContactAddressJSONRequestBody defines body for CreateContactAddress for application/json ContentType.
type CreateContactAddressJSONRequestBody = ModelContactAddress

// UpdateContactAddressJSONRequestBody defines body for UpdateContactAddress for application/json ContentType.
type UpdateContactAddressJSONRequestBody = ModelContactAddressUpdate

// CreateContactFieldJSONRequestBody defines body for CreateContactField for application/json ContentType.
type CreateContactFieldJSONRequestBody = ModelContactCustomField

// UpdateContactfieldJSONRequestBody defines body for UpdateContactfield for application/json ContentType.
type UpdateContactfieldJSONRequestBody = ModelContactCustomFieldUpdate

// CreateContactFieldSettingJSONRequestBody defines body for CreateContactFieldSetting for application/json ContentType.
type CreateContactFieldSettingJSONRequestBody = ModelContactCustomFieldSetting

// UpdateContactFieldSettingJSONRequestBody defines body for UpdateContactFieldSetting for application/json ContentType.
type UpdateContactFieldSettingJSONRequestBody = ModelContactCustomFieldSettingUpdate

// CreateCreditNoteFromInvoiceJSONRequestBody defines body for CreateCreditNoteFromInvoice for application/json ContentType.
type CreateCreditNoteFromInvoiceJSONRequestBody CreateCreditNoteFromInvoiceJSONBody

// CreateCreditNoteFromVoucherJSONRequestBody defines body for CreateCreditNoteFromVoucher for application/json ContentType.
type CreateCreditNoteFromVoucherJSONRequestBody CreateCreditNoteFromVoucherJSONBody

// CreatecreditNoteJSONRequestBody defines body for CreatecreditNote for application/json ContentType.
type CreatecreditNoteJSONRequestBody = SaveCreditNote

// UpdatecreditNoteJSONRequestBody defines body for UpdatecreditNote for application/json ContentType.
type UpdatecreditNoteJSONRequestBody = ModelCreditNoteUpdate

// BookCreditNoteJSONRequestBody defines body for BookCreditNote for application/json ContentType.
type BookCreditNoteJSONRequestBody BookCreditNoteJSONBody

// UpdateCreditNoteTemplateJSONRequestBody defines body for UpdateCreditNoteTemplate for application/json ContentType.
type UpdateCreditNoteTemplateJSONRequestBody = ModelChangeLayout

// CreditNoteSendByJSONRequestBody defines body for CreditNoteSendBy for application/json ContentType.
type CreditNoteSendByJSONRequestBody CreditNoteSendByJSONBody

// SendCreditNoteViaEMailJSONRequestBody defines body for SendCreditNoteViaEMail for application/json ContentType.
type SendCreditNoteViaEMailJSONRequestBody SendCreditNoteViaEMailJSONBody

// CreateInvoiceFromOrderJSONRequestBody defines body for CreateInvoiceFromOrder for application/json ContentType.
type CreateInvoiceFromOrderJSONRequestBody = ModelCreateInvoiceFromOrder

// CreateInvoiceReminderJSONRequestBody defines body for CreateInvoiceReminder for application/json ContentType.
type CreateInvoiceReminderJSONRequestBody CreateInvoiceReminderJSONBody

// CreateInvoiceByFactoryJSONRequestBody defines body for CreateInvoiceByFactory for application/json ContentType.
type CreateInvoiceByFactoryJSONRequestBody = SaveInvoice

// BookInvoiceJSONRequestBody defines body for BookInvoice for application/json ContentType.
type BookInvoiceJSONRequestBody BookInvoiceJSONBody

// UpdateInvoiceTemplateJSONRequestBody defines body for UpdateInvoiceTemplate for application/json ContentType.
type UpdateInvoiceTemplateJSONRequestBody = ModelChangeLayout

// InvoiceRenderJSONRequestBody defines body for InvoiceRender for application/json ContentType.
type InvoiceRenderJSONRequestBody InvoiceRenderJSONBody

// InvoiceSendByJSONRequestBody defines body for InvoiceSendBy for application/json ContentType.
type InvoiceSendByJSONRequestBody InvoiceSendByJSONBody

// SendInvoiceViaEMailJSONRequestBody defines body for SendInvoiceViaEMail for application/json ContentType.
type SendInvoiceViaEMailJSONRequestBody SendInvoiceViaEMailJSONBody

// CreateContractNoteFromOrderJSONRequestBody defines body for CreateContractNoteFromOrder for application/json ContentType.
type CreateContractNoteFromOrderJSONRequestBody = ModelCreatePackingListFromOrder

// CreatePackingListFromOrderJSONRequestBody defines body for CreatePackingListFromOrder for application/json ContentType.
type CreatePackingListFromOrderJSONRequestBody = ModelCreatePackingListFromOrder

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = SaveOrder

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody = ModelOrderUpdate

// UpdateOrderTemplateJSONRequestBody defines body for UpdateOrderTemplate for application/json ContentType.
type UpdateOrderTemplateJSONRequestBody = ModelChangeLayout

// OrderSendByJSONRequestBody defines body for OrderSendBy for application/json ContentType.
type OrderSendByJSONRequestBody OrderSendByJSONBody

// SendorderViaEMailJSONRequestBody defines body for SendorderViaEMail for application/json ContentType.
type SendorderViaEMailJSONRequestBody SendorderViaEMailJSONBody

// UpdateOrderPositionJSONRequestBody defines body for UpdateOrderPosition for application/json ContentType.
type UpdateOrderPositionJSONRequestBody = ModelOrderPosUpdate

// CreatePartJSONRequestBody defines body for CreatePart for application/json ContentType.
type CreatePartJSONRequestBody = ModelPart

// UpdatePartJSONRequestBody defines body for UpdatePart for application/json ContentType.
type UpdatePartJSONRequestBody = ModelPartUpdate

// UpdateExportConfigJSONRequestBody defines body for UpdateExportConfig for application/json ContentType.
type UpdateExportConfigJSONRequestBody UpdateExportConfigJSONBody

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody CreateTagJSONBody

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody UpdateTagJSONBody

// VoucherFactorySaveVoucherJSONRequestBody defines body for VoucherFactorySaveVoucher for application/json ContentType.
type VoucherFactorySaveVoucherJSONRequestBody = SaveVoucher

// UpdateVoucherJSONRequestBody defines body for UpdateVoucher for application/json ContentType.
type UpdateVoucherJSONRequestBody = ModelVoucherUpdate

// BookVoucherJSONRequestBody defines body for BookVoucher for application/json ContentType.
type BookVoucherJSONRequestBody BookVoucherJSONBody
