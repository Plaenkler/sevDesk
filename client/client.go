// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccountingContact request
	GetAccountingContact(ctx context.Context, params *GetAccountingContactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountingContactWithBody request with any body
	CreateAccountingContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccountingContact(ctx context.Context, body CreateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountingContact request
	DeleteAccountingContact(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountingContactById request
	GetAccountingContactById(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountingContactWithBody request with any body
	UpdateAccountingContactWithBody(ctx context.Context, accountingContactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccountingContact(ctx context.Context, accountingContactId int, body UpdateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckAccounts request
	GetCheckAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCheckAccountWithBody request with any body
	CreateCheckAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCheckAccount(ctx context.Context, body CreateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClearingAccountWithBody request with any body
	CreateClearingAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClearingAccount(ctx context.Context, body CreateClearingAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFileImportAccountWithBody request with any body
	CreateFileImportAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFileImportAccount(ctx context.Context, body CreateFileImportAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCheckAccount request
	DeleteCheckAccount(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckAccountById request
	GetCheckAccountById(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCheckAccountWithBody request with any body
	UpdateCheckAccountWithBody(ctx context.Context, checkAccountId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCheckAccount(ctx context.Context, checkAccountId int, body UpdateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBalanceAtDate request
	GetBalanceAtDate(ctx context.Context, checkAccountId int, params *GetBalanceAtDateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactions request
	GetTransactions(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTransactionWithBody request with any body
	CreateTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTransaction(ctx context.Context, body CreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCheckAccountTransaction request
	DeleteCheckAccountTransaction(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckAccountTransactionById request
	GetCheckAccountTransactionById(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCheckAccountTransactionWithBody request with any body
	UpdateCheckAccountTransactionWithBody(ctx context.Context, checkAccountTransactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCheckAccountTransaction(ctx context.Context, checkAccountTransactionId int, body UpdateCheckAccountTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckAccountTransactionEnshrine request
	CheckAccountTransactionEnshrine(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommunicationWays request
	GetCommunicationWays(ctx context.Context, params *GetCommunicationWaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCommunicationWayWithBody request with any body
	CreateCommunicationWayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCommunicationWay(ctx context.Context, body CreateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommunicationWay request
	DeleteCommunicationWay(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommunicationWayById request
	GetCommunicationWayById(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCommunicationWayWithBody request with any body
	UpdateCommunicationWayWithBody(ctx context.Context, communicationWayId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCommunicationWay(ctx context.Context, communicationWayId int, body UpdateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommunicationWayKeys request
	GetCommunicationWayKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContacts request
	GetContacts(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContactWithBody request with any body
	CreateContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContact(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindContactsByCustomFieldValue request
	FindContactsByCustomFieldValue(ctx context.Context, params *FindContactsByCustomFieldValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNextCustomerNumber request
	GetNextCustomerNumber(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactCustomerNumberAvailabilityCheck request
	ContactCustomerNumberAvailabilityCheck(ctx context.Context, params *ContactCustomerNumberAvailabilityCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContact request
	DeleteContact(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactById request
	GetContactById(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactWithBody request with any body
	UpdateContactWithBody(ctx context.Context, contactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContact(ctx context.Context, contactId int, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactTabsItemCountById request
	GetContactTabsItemCountById(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactAddresses request
	GetContactAddresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContactAddressWithBody request with any body
	CreateContactAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContactAddress(ctx context.Context, body CreateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactAddress request
	DeleteContactAddress(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactAddressId request
	ContactAddressId(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactAddressWithBody request with any body
	UpdateContactAddressWithBody(ctx context.Context, contactAddressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactAddress(ctx context.Context, contactAddressId int, body UpdateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactFields request
	GetContactFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContactFieldWithBody request with any body
	CreateContactFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContactField(ctx context.Context, body CreateContactFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactCustomFieldId request
	DeleteContactCustomFieldId(ctx context.Context, contactCustomFieldId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactFieldsById request
	GetContactFieldsById(ctx context.Context, contactCustomFieldId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactfieldWithBody request with any body
	UpdateContactfieldWithBody(ctx context.Context, contactCustomFieldId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactfield(ctx context.Context, contactCustomFieldId float32, body UpdateContactfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactFieldSettings request
	GetContactFieldSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContactFieldSettingWithBody request with any body
	CreateContactFieldSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContactFieldSetting(ctx context.Context, body CreateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactFieldSetting request
	DeleteContactFieldSetting(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactFieldSettingById request
	GetContactFieldSettingById(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactFieldSettingWithBody request with any body
	UpdateContactFieldSettingWithBody(ctx context.Context, contactCustomFieldSettingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactFieldSetting(ctx context.Context, contactCustomFieldSettingId int, body UpdateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReferenceCount request
	GetReferenceCount(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditNotes request
	GetCreditNotes(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCreditNoteFromInvoiceWithBody request with any body
	CreateCreditNoteFromInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCreditNoteFromInvoice(ctx context.Context, body CreateCreditNoteFromInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCreditNoteFromVoucherWithBody request with any body
	CreateCreditNoteFromVoucherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCreditNoteFromVoucher(ctx context.Context, body CreateCreditNoteFromVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatecreditNoteWithBody request with any body
	CreatecreditNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatecreditNote(ctx context.Context, body CreatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletecreditNote request
	DeletecreditNote(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetcreditNoteById request
	GetcreditNoteById(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatecreditNoteWithBody request with any body
	UpdatecreditNoteWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatecreditNote(ctx context.Context, creditNoteId int, body UpdatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BookCreditNoteWithBody request with any body
	BookCreditNoteWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BookCreditNote(ctx context.Context, creditNoteId int, body BookCreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCreditNoteTemplateWithBody request with any body
	UpdateCreditNoteTemplateWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCreditNoteTemplate(ctx context.Context, creditNoteId int, body UpdateCreditNoteTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreditNoteEnshrine request
	CreditNoteEnshrine(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreditNoteGetPdf request
	CreditNoteGetPdf(ctx context.Context, creditNoteId int, params *CreditNoteGetPdfParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreditNoteResetToDraft request
	CreditNoteResetToDraft(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreditNoteResetToOpen request
	CreditNoteResetToOpen(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreditNoteSendByWithBody request with any body
	CreditNoteSendByWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreditNoteSendBy(ctx context.Context, creditNoteId int, body CreditNoteSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendCreditNoteByPrinting request
	SendCreditNoteByPrinting(ctx context.Context, creditNoteId int, params *SendCreditNoteByPrintingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendCreditNoteViaEMailWithBody request with any body
	SendCreditNoteViaEMailWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendCreditNoteViaEMail(ctx context.Context, creditNoteId int, body SendCreditNoteViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetcreditNotePositions request
	GetcreditNotePositions(ctx context.Context, params *GetcreditNotePositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLetterpapersWithThumb request
	GetLetterpapersWithThumb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTemplates request
	GetTemplates(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportContact request
	ExportContact(ctx context.Context, params *ExportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportCreditNote request
	ExportCreditNote(ctx context.Context, params *ExportCreditNoteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportDatev request
	ExportDatev(ctx context.Context, params *ExportDatevParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportInvoice request
	ExportInvoice(ctx context.Context, params *ExportInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportInvoiceZip request
	ExportInvoiceZip(ctx context.Context, params *ExportInvoiceZipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportTransactions request
	ExportTransactions(ctx context.Context, params *ExportTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportVoucher request
	ExportVoucher(ctx context.Context, params *ExportVoucherParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportVoucherZip request
	ExportVoucherZip(ctx context.Context, params *ExportVoucherZipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoices request
	GetInvoices(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvoiceFromOrderWithBody request with any body
	CreateInvoiceFromOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvoiceFromOrder(ctx context.Context, body CreateInvoiceFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvoiceReminderWithBody request with any body
	CreateInvoiceReminderWithBody(ctx context.Context, params *CreateInvoiceReminderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvoiceReminder(ctx context.Context, params *CreateInvoiceReminderParams, body CreateInvoiceReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvoiceByFactoryWithBody request with any body
	CreateInvoiceByFactoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvoiceByFactory(ctx context.Context, body CreateInvoiceByFactoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoiceById request
	GetInvoiceById(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BookInvoiceWithBody request with any body
	BookInvoiceWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BookInvoice(ctx context.Context, invoiceId int, body BookInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelInvoice request
	CancelInvoice(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInvoiceTemplateWithBody request with any body
	UpdateInvoiceTemplateWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInvoiceTemplate(ctx context.Context, invoiceId int, body UpdateInvoiceTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceEnshrine request
	InvoiceEnshrine(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIsInvoicePartiallyPaid request
	GetIsInvoicePartiallyPaid(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceGetPdf request
	InvoiceGetPdf(ctx context.Context, invoiceId int, params *InvoiceGetPdfParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicePositionsById request
	GetInvoicePositionsById(ctx context.Context, invoiceId int, params *GetInvoicePositionsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceGetXml request
	InvoiceGetXml(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceRenderWithBody request with any body
	InvoiceRenderWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvoiceRender(ctx context.Context, invoiceId int, body InvoiceRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceResetToDraft request
	InvoiceResetToDraft(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceResetToOpen request
	InvoiceResetToOpen(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvoiceSendByWithBody request with any body
	InvoiceSendByWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvoiceSendBy(ctx context.Context, invoiceId int, body InvoiceSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendInvoiceViaEMailWithBody request with any body
	SendInvoiceViaEMailWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendInvoiceViaEMail(ctx context.Context, invoiceId int, body SendInvoiceViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicePos request
	GetInvoicePos(ctx context.Context, params *GetInvoicePosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrders request
	GetOrders(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContractNoteFromOrderWithBody request with any body
	CreateContractNoteFromOrderWithBody(ctx context.Context, params *CreateContractNoteFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContractNoteFromOrder(ctx context.Context, params *CreateContractNoteFromOrderParams, body CreateContractNoteFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePackingListFromOrderWithBody request with any body
	CreatePackingListFromOrderWithBody(ctx context.Context, params *CreatePackingListFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePackingListFromOrder(ctx context.Context, params *CreatePackingListFromOrderParams, body CreatePackingListFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrderWithBody request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrder request
	DeleteOrder(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderById request
	GetOrderById(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderWithBody request with any body
	UpdateOrderWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrder(ctx context.Context, orderId int, body UpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderTemplateWithBody request with any body
	UpdateOrderTemplateWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrderTemplate(ctx context.Context, orderId int, body UpdateOrderTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiscounts request
	GetDiscounts(ctx context.Context, orderId int, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderGetPdf request
	OrderGetPdf(ctx context.Context, orderId int, params *OrderGetPdfParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderPositionsById request
	GetOrderPositionsById(ctx context.Context, orderId int, params *GetOrderPositionsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelatedObjects request
	GetRelatedObjects(ctx context.Context, orderId int, params *GetRelatedObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderSendByWithBody request with any body
	OrderSendByWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderSendBy(ctx context.Context, orderId int, body OrderSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendorderViaEMailWithBody request with any body
	SendorderViaEMailWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendorderViaEMail(ctx context.Context, orderId int, body SendorderViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderPositions request
	GetOrderPositions(ctx context.Context, params *GetOrderPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrderPos request
	DeleteOrderPos(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderPositionById request
	GetOrderPositionById(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderPositionWithBody request with any body
	UpdateOrderPositionWithBody(ctx context.Context, orderPosId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrderPosition(ctx context.Context, orderPosId int, body UpdateOrderPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParts request
	GetParts(ctx context.Context, params *GetPartsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePartWithBody request with any body
	CreatePartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePart(ctx context.Context, body CreatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartById request
	GetPartById(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePartWithBody request with any body
	UpdatePartWithBody(ctx context.Context, partId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePart(ctx context.Context, partId int, body UpdatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartGetStock request
	PartGetStock(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForAccountNumber request
	ForAccountNumber(ctx context.Context, params *ForAccountNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForAllAccounts request
	ForAllAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForExpense request
	ForExpense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForRevenue request
	ForRevenue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForTaxRule request
	ForTaxRule(ctx context.Context, params *ForTaxRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportContact request
	ReportContact(ctx context.Context, params *ReportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportInvoice request
	ReportInvoice(ctx context.Context, params *ReportInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportOrder request
	ReportOrder(ctx context.Context, params *ReportOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportVoucher request
	ReportVoucher(ctx context.Context, params *ReportVoucherParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateExportConfigWithBody request with any body
	UpdateExportConfigWithBody(ctx context.Context, sevClientId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateExportConfig(ctx context.Context, sevClientId float32, body UpdateExportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagWithBody request with any body
	CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagById request
	GetTagById(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagWithBody request with any body
	UpdateTagWithBody(ctx context.Context, tagId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTag(ctx context.Context, tagId int, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagRelations request
	GetTagRelations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaceholder request
	GetPlaceholder(ctx context.Context, params *GetPlaceholderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BookkeepingSystemVersion request
	BookkeepingSystemVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVouchers request
	GetVouchers(ctx context.Context, params *GetVouchersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoucherFactorySaveVoucherWithBody request with any body
	VoucherFactorySaveVoucherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VoucherFactorySaveVoucher(ctx context.Context, body VoucherFactorySaveVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoucherUploadFileWithBody request with any body
	VoucherUploadFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoucherById request
	GetVoucherById(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVoucherWithBody request with any body
	UpdateVoucherWithBody(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVoucher(ctx context.Context, voucherId int, body UpdateVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BookVoucherWithBody request with any body
	BookVoucherWithBody(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BookVoucher(ctx context.Context, voucherId int, body BookVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoucherEnshrine request
	VoucherEnshrine(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoucherResetToDraft request
	VoucherResetToDraft(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoucherResetToOpen request
	VoucherResetToOpen(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoucherPositions request
	GetVoucherPositions(ctx context.Context, params *GetVoucherPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccountingContact(ctx context.Context, params *GetAccountingContactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountingContactRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountingContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountingContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountingContact(ctx context.Context, body CreateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountingContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountingContact(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountingContactRequest(c.Server, accountingContactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountingContactById(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountingContactByIdRequest(c.Server, accountingContactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountingContactWithBody(ctx context.Context, accountingContactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountingContactRequestWithBody(c.Server, accountingContactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountingContact(ctx context.Context, accountingContactId int, body UpdateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountingContactRequest(c.Server, accountingContactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCheckAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCheckAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCheckAccount(ctx context.Context, body CreateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCheckAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClearingAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClearingAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClearingAccount(ctx context.Context, body CreateClearingAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClearingAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFileImportAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFileImportAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFileImportAccount(ctx context.Context, body CreateFileImportAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFileImportAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCheckAccount(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCheckAccountRequest(c.Server, checkAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckAccountById(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckAccountByIdRequest(c.Server, checkAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCheckAccountWithBody(ctx context.Context, checkAccountId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCheckAccountRequestWithBody(c.Server, checkAccountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCheckAccount(ctx context.Context, checkAccountId int, body UpdateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCheckAccountRequest(c.Server, checkAccountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBalanceAtDate(ctx context.Context, checkAccountId int, params *GetBalanceAtDateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBalanceAtDateRequest(c.Server, checkAccountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactions(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTransactionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTransaction(ctx context.Context, body CreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTransactionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCheckAccountTransaction(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCheckAccountTransactionRequest(c.Server, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckAccountTransactionById(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckAccountTransactionByIdRequest(c.Server, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCheckAccountTransactionWithBody(ctx context.Context, checkAccountTransactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCheckAccountTransactionRequestWithBody(c.Server, checkAccountTransactionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCheckAccountTransaction(ctx context.Context, checkAccountTransactionId int, body UpdateCheckAccountTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCheckAccountTransactionRequest(c.Server, checkAccountTransactionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckAccountTransactionEnshrine(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckAccountTransactionEnshrineRequest(c.Server, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommunicationWays(ctx context.Context, params *GetCommunicationWaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommunicationWaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommunicationWayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommunicationWayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommunicationWay(ctx context.Context, body CreateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommunicationWayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommunicationWay(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommunicationWayRequest(c.Server, communicationWayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommunicationWayById(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommunicationWayByIdRequest(c.Server, communicationWayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommunicationWayWithBody(ctx context.Context, communicationWayId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommunicationWayRequestWithBody(c.Server, communicationWayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommunicationWay(ctx context.Context, communicationWayId int, body UpdateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommunicationWayRequest(c.Server, communicationWayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommunicationWayKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommunicationWayKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContacts(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContact(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindContactsByCustomFieldValue(ctx context.Context, params *FindContactsByCustomFieldValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindContactsByCustomFieldValueRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNextCustomerNumber(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNextCustomerNumberRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactCustomerNumberAvailabilityCheck(ctx context.Context, params *ContactCustomerNumberAvailabilityCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactCustomerNumberAvailabilityCheckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContact(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactById(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactByIdRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactWithBody(ctx context.Context, contactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContact(ctx context.Context, contactId int, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactTabsItemCountById(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactTabsItemCountByIdRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactAddresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactAddressesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactAddress(ctx context.Context, body CreateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactAddress(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactAddressRequest(c.Server, contactAddressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactAddressId(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactAddressIdRequest(c.Server, contactAddressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactAddressWithBody(ctx context.Context, contactAddressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactAddressRequestWithBody(c.Server, contactAddressId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactAddress(ctx context.Context, contactAddressId int, body UpdateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactAddressRequest(c.Server, contactAddressId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactField(ctx context.Context, body CreateContactFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactFieldRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactCustomFieldId(ctx context.Context, contactCustomFieldId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactCustomFieldIdRequest(c.Server, contactCustomFieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactFieldsById(ctx context.Context, contactCustomFieldId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactFieldsByIdRequest(c.Server, contactCustomFieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactfieldWithBody(ctx context.Context, contactCustomFieldId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactfieldRequestWithBody(c.Server, contactCustomFieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactfield(ctx context.Context, contactCustomFieldId float32, body UpdateContactfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactfieldRequest(c.Server, contactCustomFieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactFieldSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactFieldSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactFieldSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactFieldSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContactFieldSetting(ctx context.Context, body CreateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContactFieldSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactFieldSetting(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactFieldSettingRequest(c.Server, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactFieldSettingById(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactFieldSettingByIdRequest(c.Server, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactFieldSettingWithBody(ctx context.Context, contactCustomFieldSettingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactFieldSettingRequestWithBody(c.Server, contactCustomFieldSettingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactFieldSetting(ctx context.Context, contactCustomFieldSettingId int, body UpdateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactFieldSettingRequest(c.Server, contactCustomFieldSettingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReferenceCount(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferenceCountRequest(c.Server, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditNotes(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditNotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCreditNoteFromInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCreditNoteFromInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCreditNoteFromInvoice(ctx context.Context, body CreateCreditNoteFromInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCreditNoteFromInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCreditNoteFromVoucherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCreditNoteFromVoucherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCreditNoteFromVoucher(ctx context.Context, body CreateCreditNoteFromVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCreditNoteFromVoucherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatecreditNoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatecreditNoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatecreditNote(ctx context.Context, body CreatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatecreditNoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletecreditNote(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecreditNoteRequest(c.Server, creditNoteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetcreditNoteById(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcreditNoteByIdRequest(c.Server, creditNoteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatecreditNoteWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatecreditNoteRequestWithBody(c.Server, creditNoteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatecreditNote(ctx context.Context, creditNoteId int, body UpdatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatecreditNoteRequest(c.Server, creditNoteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookCreditNoteWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookCreditNoteRequestWithBody(c.Server, creditNoteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookCreditNote(ctx context.Context, creditNoteId int, body BookCreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookCreditNoteRequest(c.Server, creditNoteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCreditNoteTemplateWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCreditNoteTemplateRequestWithBody(c.Server, creditNoteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCreditNoteTemplate(ctx context.Context, creditNoteId int, body UpdateCreditNoteTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCreditNoteTemplateRequest(c.Server, creditNoteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreditNoteEnshrine(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreditNoteEnshrineRequest(c.Server, creditNoteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreditNoteGetPdf(ctx context.Context, creditNoteId int, params *CreditNoteGetPdfParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreditNoteGetPdfRequest(c.Server, creditNoteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreditNoteResetToDraft(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreditNoteResetToDraftRequest(c.Server, creditNoteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreditNoteResetToOpen(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreditNoteResetToOpenRequest(c.Server, creditNoteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreditNoteSendByWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreditNoteSendByRequestWithBody(c.Server, creditNoteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreditNoteSendBy(ctx context.Context, creditNoteId int, body CreditNoteSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreditNoteSendByRequest(c.Server, creditNoteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCreditNoteByPrinting(ctx context.Context, creditNoteId int, params *SendCreditNoteByPrintingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCreditNoteByPrintingRequest(c.Server, creditNoteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCreditNoteViaEMailWithBody(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCreditNoteViaEMailRequestWithBody(c.Server, creditNoteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendCreditNoteViaEMail(ctx context.Context, creditNoteId int, body SendCreditNoteViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendCreditNoteViaEMailRequest(c.Server, creditNoteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetcreditNotePositions(ctx context.Context, params *GetcreditNotePositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcreditNotePositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLetterpapersWithThumb(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLetterpapersWithThumbRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemplates(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTemplatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportContact(ctx context.Context, params *ExportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportContactRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportCreditNote(ctx context.Context, params *ExportCreditNoteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportCreditNoteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportDatev(ctx context.Context, params *ExportDatevParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportDatevRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportInvoice(ctx context.Context, params *ExportInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportInvoiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportInvoiceZip(ctx context.Context, params *ExportInvoiceZipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportInvoiceZipRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportTransactions(ctx context.Context, params *ExportTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportTransactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportVoucher(ctx context.Context, params *ExportVoucherParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportVoucherRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportVoucherZip(ctx context.Context, params *ExportVoucherZipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportVoucherZipRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoices(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceFromOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceFromOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceFromOrder(ctx context.Context, body CreateInvoiceFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceFromOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceReminderWithBody(ctx context.Context, params *CreateInvoiceReminderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceReminderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceReminder(ctx context.Context, params *CreateInvoiceReminderParams, body CreateInvoiceReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceReminderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceByFactoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceByFactoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceByFactory(ctx context.Context, body CreateInvoiceByFactoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceByFactoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceById(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceByIdRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookInvoiceWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookInvoiceRequestWithBody(c.Server, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookInvoice(ctx context.Context, invoiceId int, body BookInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookInvoiceRequest(c.Server, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelInvoice(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelInvoiceRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInvoiceTemplateWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInvoiceTemplateRequestWithBody(c.Server, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInvoiceTemplate(ctx context.Context, invoiceId int, body UpdateInvoiceTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInvoiceTemplateRequest(c.Server, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceEnshrine(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceEnshrineRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIsInvoicePartiallyPaid(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIsInvoicePartiallyPaidRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceGetPdf(ctx context.Context, invoiceId int, params *InvoiceGetPdfParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceGetPdfRequest(c.Server, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicePositionsById(ctx context.Context, invoiceId int, params *GetInvoicePositionsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicePositionsByIdRequest(c.Server, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceGetXml(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceGetXmlRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceRenderWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceRenderRequestWithBody(c.Server, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceRender(ctx context.Context, invoiceId int, body InvoiceRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceRenderRequest(c.Server, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceResetToDraft(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceResetToDraftRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceResetToOpen(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceResetToOpenRequest(c.Server, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceSendByWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceSendByRequestWithBody(c.Server, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvoiceSendBy(ctx context.Context, invoiceId int, body InvoiceSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvoiceSendByRequest(c.Server, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendInvoiceViaEMailWithBody(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendInvoiceViaEMailRequestWithBody(c.Server, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendInvoiceViaEMail(ctx context.Context, invoiceId int, body SendInvoiceViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendInvoiceViaEMailRequest(c.Server, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicePos(ctx context.Context, params *GetInvoicePosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicePosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrders(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContractNoteFromOrderWithBody(ctx context.Context, params *CreateContractNoteFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContractNoteFromOrderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContractNoteFromOrder(ctx context.Context, params *CreateContractNoteFromOrderParams, body CreateContractNoteFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContractNoteFromOrderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackingListFromOrderWithBody(ctx context.Context, params *CreatePackingListFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePackingListFromOrderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackingListFromOrder(ctx context.Context, params *CreatePackingListFromOrderParams, body CreatePackingListFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePackingListFromOrderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrder(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrderRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderById(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderByIdRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderRequestWithBody(c.Server, orderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrder(ctx context.Context, orderId int, body UpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderRequest(c.Server, orderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderTemplateWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderTemplateRequestWithBody(c.Server, orderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderTemplate(ctx context.Context, orderId int, body UpdateOrderTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderTemplateRequest(c.Server, orderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiscounts(ctx context.Context, orderId int, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscountsRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderGetPdf(ctx context.Context, orderId int, params *OrderGetPdfParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderGetPdfRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderPositionsById(ctx context.Context, orderId int, params *GetOrderPositionsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderPositionsByIdRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelatedObjects(ctx context.Context, orderId int, params *GetRelatedObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelatedObjectsRequest(c.Server, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderSendByWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderSendByRequestWithBody(c.Server, orderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderSendBy(ctx context.Context, orderId int, body OrderSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderSendByRequest(c.Server, orderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendorderViaEMailWithBody(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendorderViaEMailRequestWithBody(c.Server, orderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendorderViaEMail(ctx context.Context, orderId int, body SendorderViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendorderViaEMailRequest(c.Server, orderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderPositions(ctx context.Context, params *GetOrderPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrderPos(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrderPosRequest(c.Server, orderPosId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderPositionById(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderPositionByIdRequest(c.Server, orderPosId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderPositionWithBody(ctx context.Context, orderPosId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderPositionRequestWithBody(c.Server, orderPosId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderPosition(ctx context.Context, orderPosId int, body UpdateOrderPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderPositionRequest(c.Server, orderPosId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetParts(ctx context.Context, params *GetPartsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePart(ctx context.Context, body CreatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartById(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartByIdRequest(c.Server, partId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePartWithBody(ctx context.Context, partId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartRequestWithBody(c.Server, partId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePart(ctx context.Context, partId int, body UpdatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePartRequest(c.Server, partId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartGetStock(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartGetStockRequest(c.Server, partId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForAccountNumber(ctx context.Context, params *ForAccountNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForAccountNumberRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForAllAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForAllAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForExpense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForExpenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForRevenue(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForRevenueRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForTaxRule(ctx context.Context, params *ForTaxRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForTaxRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportContact(ctx context.Context, params *ReportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportContactRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportInvoice(ctx context.Context, params *ReportInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportInvoiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportOrder(ctx context.Context, params *ReportOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportVoucher(ctx context.Context, params *ReportVoucherParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportVoucherRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExportConfigWithBody(ctx context.Context, sevClientId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExportConfigRequestWithBody(c.Server, sevClientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExportConfig(ctx context.Context, sevClientId float32, body UpdateExportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExportConfigRequest(c.Server, sevClientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagById(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagByIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagWithBody(ctx context.Context, tagId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTag(ctx context.Context, tagId int, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagRelations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRelationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaceholder(ctx context.Context, params *GetPlaceholderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaceholderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookkeepingSystemVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookkeepingSystemVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVouchers(ctx context.Context, params *GetVouchersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVouchersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoucherFactorySaveVoucherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoucherFactorySaveVoucherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoucherFactorySaveVoucher(ctx context.Context, body VoucherFactorySaveVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoucherFactorySaveVoucherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoucherUploadFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoucherUploadFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoucherById(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoucherByIdRequest(c.Server, voucherId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVoucherWithBody(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVoucherRequestWithBody(c.Server, voucherId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVoucher(ctx context.Context, voucherId int, body UpdateVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVoucherRequest(c.Server, voucherId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookVoucherWithBody(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookVoucherRequestWithBody(c.Server, voucherId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BookVoucher(ctx context.Context, voucherId int, body BookVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBookVoucherRequest(c.Server, voucherId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoucherEnshrine(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoucherEnshrineRequest(c.Server, voucherId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoucherResetToDraft(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoucherResetToDraftRequest(c.Server, voucherId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoucherResetToOpen(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoucherResetToOpenRequest(c.Server, voucherId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoucherPositions(ctx context.Context, params *GetVoucherPositionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoucherPositionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountingContactRequest generates requests for GetAccountingContact
func NewGetAccountingContactRequest(server string, params *GetAccountingContactParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/AccountingContact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact[id]", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact[objectName]", runtime.ParamLocationQuery, *params.ContactObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountingContactRequest calls the generic CreateAccountingContact builder with application/json body
func NewCreateAccountingContactRequest(server string, body CreateAccountingContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountingContactRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountingContactRequestWithBody generates requests for CreateAccountingContact with any type of body
func NewCreateAccountingContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/AccountingContact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountingContactRequest generates requests for DeleteAccountingContact
func NewDeleteAccountingContactRequest(server string, accountingContactId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountingContactId", runtime.ParamLocationPath, accountingContactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/AccountingContact/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountingContactByIdRequest generates requests for GetAccountingContactById
func NewGetAccountingContactByIdRequest(server string, accountingContactId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountingContactId", runtime.ParamLocationPath, accountingContactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/AccountingContact/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountingContactRequest calls the generic UpdateAccountingContact builder with application/json body
func NewUpdateAccountingContactRequest(server string, accountingContactId int, body UpdateAccountingContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccountingContactRequestWithBody(server, accountingContactId, "application/json", bodyReader)
}

// NewUpdateAccountingContactRequestWithBody generates requests for UpdateAccountingContact with any type of body
func NewUpdateAccountingContactRequestWithBody(server string, accountingContactId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountingContactId", runtime.ParamLocationPath, accountingContactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/AccountingContact/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCheckAccountsRequest generates requests for GetCheckAccounts
func NewGetCheckAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCheckAccountRequest calls the generic CreateCheckAccount builder with application/json body
func NewCreateCheckAccountRequest(server string, body CreateCheckAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCheckAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCheckAccountRequestWithBody generates requests for CreateCheckAccount with any type of body
func NewCreateCheckAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateClearingAccountRequest calls the generic CreateClearingAccount builder with application/json body
func NewCreateClearingAccountRequest(server string, body CreateClearingAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClearingAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClearingAccountRequestWithBody generates requests for CreateClearingAccount with any type of body
func NewCreateClearingAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount/Factory/clearingAccount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateFileImportAccountRequest calls the generic CreateFileImportAccount builder with application/json body
func NewCreateFileImportAccountRequest(server string, body CreateFileImportAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFileImportAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFileImportAccountRequestWithBody generates requests for CreateFileImportAccount with any type of body
func NewCreateFileImportAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount/Factory/fileImportAccount")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCheckAccountRequest generates requests for DeleteCheckAccount
func NewDeleteCheckAccountRequest(server string, checkAccountId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountId", runtime.ParamLocationPath, checkAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCheckAccountByIdRequest generates requests for GetCheckAccountById
func NewGetCheckAccountByIdRequest(server string, checkAccountId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountId", runtime.ParamLocationPath, checkAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCheckAccountRequest calls the generic UpdateCheckAccount builder with application/json body
func NewUpdateCheckAccountRequest(server string, checkAccountId int, body UpdateCheckAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCheckAccountRequestWithBody(server, checkAccountId, "application/json", bodyReader)
}

// NewUpdateCheckAccountRequestWithBody generates requests for UpdateCheckAccount with any type of body
func NewUpdateCheckAccountRequestWithBody(server string, checkAccountId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountId", runtime.ParamLocationPath, checkAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBalanceAtDateRequest generates requests for GetBalanceAtDate
func NewGetBalanceAtDateRequest(server string, checkAccountId int, params *GetBalanceAtDateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountId", runtime.ParamLocationPath, checkAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccount/%s/getBalanceAtDate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionsRequest generates requests for GetTransactions
func NewGetTransactionsRequest(server string, params *GetTransactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccountTransaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CheckAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "checkAccount[id]", runtime.ParamLocationQuery, *params.CheckAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CheckAccountObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "checkAccount[objectName]", runtime.ParamLocationQuery, *params.CheckAccountObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsBooked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "isBooked", runtime.ParamLocationQuery, *params.IsBooked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PaymtPurpose != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "paymtPurpose", runtime.ParamLocationQuery, *params.PaymtPurpose); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PayeePayerName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "payeePayerName", runtime.ParamLocationQuery, *params.PayeePayerName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyCredit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "onlyCredit", runtime.ParamLocationQuery, *params.OnlyCredit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyDebit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "onlyDebit", runtime.ParamLocationQuery, *params.OnlyDebit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTransactionRequest calls the generic CreateTransaction builder with application/json body
func NewCreateTransactionRequest(server string, body CreateTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTransactionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTransactionRequestWithBody generates requests for CreateTransaction with any type of body
func NewCreateTransactionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccountTransaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCheckAccountTransactionRequest generates requests for DeleteCheckAccountTransaction
func NewDeleteCheckAccountTransactionRequest(server string, checkAccountTransactionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountTransactionId", runtime.ParamLocationPath, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccountTransaction/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCheckAccountTransactionByIdRequest generates requests for GetCheckAccountTransactionById
func NewGetCheckAccountTransactionByIdRequest(server string, checkAccountTransactionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountTransactionId", runtime.ParamLocationPath, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccountTransaction/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCheckAccountTransactionRequest calls the generic UpdateCheckAccountTransaction builder with application/json body
func NewUpdateCheckAccountTransactionRequest(server string, checkAccountTransactionId int, body UpdateCheckAccountTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCheckAccountTransactionRequestWithBody(server, checkAccountTransactionId, "application/json", bodyReader)
}

// NewUpdateCheckAccountTransactionRequestWithBody generates requests for UpdateCheckAccountTransaction with any type of body
func NewUpdateCheckAccountTransactionRequestWithBody(server string, checkAccountTransactionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountTransactionId", runtime.ParamLocationPath, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccountTransaction/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckAccountTransactionEnshrineRequest generates requests for CheckAccountTransactionEnshrine
func NewCheckAccountTransactionEnshrineRequest(server string, checkAccountTransactionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkAccountTransactionId", runtime.ParamLocationPath, checkAccountTransactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CheckAccountTransaction/%s/enshrine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommunicationWaysRequest generates requests for GetCommunicationWays
func NewGetCommunicationWaysRequest(server string, params *GetCommunicationWaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CommunicationWay")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact[id]", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact[objectName]", runtime.ParamLocationQuery, *params.ContactObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Main != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "main", runtime.ParamLocationQuery, *params.Main); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCommunicationWayRequest calls the generic CreateCommunicationWay builder with application/json body
func NewCreateCommunicationWayRequest(server string, body CreateCommunicationWayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCommunicationWayRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCommunicationWayRequestWithBody generates requests for CreateCommunicationWay with any type of body
func NewCreateCommunicationWayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CommunicationWay")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommunicationWayRequest generates requests for DeleteCommunicationWay
func NewDeleteCommunicationWayRequest(server string, communicationWayId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "communicationWayId", runtime.ParamLocationPath, communicationWayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CommunicationWay/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommunicationWayByIdRequest generates requests for GetCommunicationWayById
func NewGetCommunicationWayByIdRequest(server string, communicationWayId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "communicationWayId", runtime.ParamLocationPath, communicationWayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CommunicationWay/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCommunicationWayRequest calls the generic UpdateCommunicationWay builder with application/json body
func NewUpdateCommunicationWayRequest(server string, communicationWayId int, body UpdateCommunicationWayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCommunicationWayRequestWithBody(server, communicationWayId, "application/json", bodyReader)
}

// NewUpdateCommunicationWayRequestWithBody generates requests for UpdateCommunicationWay with any type of body
func NewUpdateCommunicationWayRequestWithBody(server string, communicationWayId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "communicationWayId", runtime.ParamLocationPath, communicationWayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CommunicationWay/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCommunicationWayKeysRequest generates requests for GetCommunicationWayKeys
func NewGetCommunicationWayKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CommunicationWayKey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactsRequest generates requests for GetContacts
func NewGetContactsRequest(server string, params *GetContactsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerNumber", runtime.ParamLocationQuery, *params.CustomerNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContactRequest calls the generic CreateContact builder with application/json body
func NewCreateContactRequest(server string, body CreateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContactRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContactRequestWithBody generates requests for CreateContact with any type of body
func NewCreateContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindContactsByCustomFieldValueRequest generates requests for FindContactsByCustomFieldValue
func NewFindContactsByCustomFieldValueRequest(server string, params *FindContactsByCustomFieldValueParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/Factory/findContactsByCustomFieldValue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CustomFieldSettingId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customFieldSetting[id]", runtime.ParamLocationQuery, *params.CustomFieldSettingId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomFieldSettingObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customFieldSetting[objectName]", runtime.ParamLocationQuery, *params.CustomFieldSettingObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customFieldName", runtime.ParamLocationQuery, params.CustomFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNextCustomerNumberRequest generates requests for GetNextCustomerNumber
func NewGetNextCustomerNumberRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/Factory/getNextCustomerNumber")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactCustomerNumberAvailabilityCheckRequest generates requests for ContactCustomerNumberAvailabilityCheck
func NewContactCustomerNumberAvailabilityCheckRequest(server string, params *ContactCustomerNumberAvailabilityCheckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/Mapper/checkCustomerNumberAvailability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CustomerNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerNumber", runtime.ParamLocationQuery, *params.CustomerNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteContactRequest generates requests for DeleteContact
func NewDeleteContactRequest(server string, contactId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactByIdRequest generates requests for GetContactById
func NewGetContactByIdRequest(server string, contactId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactRequest calls the generic UpdateContact builder with application/json body
func NewUpdateContactRequest(server string, contactId int, body UpdateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewUpdateContactRequestWithBody generates requests for UpdateContact with any type of body
func NewUpdateContactRequestWithBody(server string, contactId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactTabsItemCountByIdRequest generates requests for GetContactTabsItemCountById
func NewGetContactTabsItemCountByIdRequest(server string, contactId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactId", runtime.ParamLocationPath, contactId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Contact/%s/getTabsItemCount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactAddressesRequest generates requests for GetContactAddresses
func NewGetContactAddressesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactAddress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContactAddressRequest calls the generic CreateContactAddress builder with application/json body
func NewCreateContactAddressRequest(server string, body CreateContactAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContactAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContactAddressRequestWithBody generates requests for CreateContactAddress with any type of body
func NewCreateContactAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactAddress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactAddressRequest generates requests for DeleteContactAddress
func NewDeleteContactAddressRequest(server string, contactAddressId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactAddressId", runtime.ParamLocationPath, contactAddressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactAddress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactAddressIdRequest generates requests for ContactAddressId
func NewContactAddressIdRequest(server string, contactAddressId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactAddressId", runtime.ParamLocationPath, contactAddressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactAddress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactAddressRequest calls the generic UpdateContactAddress builder with application/json body
func NewUpdateContactAddressRequest(server string, contactAddressId int, body UpdateContactAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactAddressRequestWithBody(server, contactAddressId, "application/json", bodyReader)
}

// NewUpdateContactAddressRequestWithBody generates requests for UpdateContactAddress with any type of body
func NewUpdateContactAddressRequestWithBody(server string, contactAddressId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactAddressId", runtime.ParamLocationPath, contactAddressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactAddress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactFieldsRequest generates requests for GetContactFields
func NewGetContactFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomField")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContactFieldRequest calls the generic CreateContactField builder with application/json body
func NewCreateContactFieldRequest(server string, body CreateContactFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContactFieldRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContactFieldRequestWithBody generates requests for CreateContactField with any type of body
func NewCreateContactFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomField")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactCustomFieldIdRequest generates requests for DeleteContactCustomFieldId
func NewDeleteContactCustomFieldIdRequest(server string, contactCustomFieldId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldId", runtime.ParamLocationPath, contactCustomFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomField/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactFieldsByIdRequest generates requests for GetContactFieldsById
func NewGetContactFieldsByIdRequest(server string, contactCustomFieldId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldId", runtime.ParamLocationPath, contactCustomFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomField/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactfieldRequest calls the generic UpdateContactfield builder with application/json body
func NewUpdateContactfieldRequest(server string, contactCustomFieldId float32, body UpdateContactfieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactfieldRequestWithBody(server, contactCustomFieldId, "application/json", bodyReader)
}

// NewUpdateContactfieldRequestWithBody generates requests for UpdateContactfield with any type of body
func NewUpdateContactfieldRequestWithBody(server string, contactCustomFieldId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldId", runtime.ParamLocationPath, contactCustomFieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomField/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContactFieldSettingsRequest generates requests for GetContactFieldSettings
func NewGetContactFieldSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomFieldSetting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContactFieldSettingRequest calls the generic CreateContactFieldSetting builder with application/json body
func NewCreateContactFieldSettingRequest(server string, body CreateContactFieldSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContactFieldSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContactFieldSettingRequestWithBody generates requests for CreateContactFieldSetting with any type of body
func NewCreateContactFieldSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomFieldSetting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactFieldSettingRequest generates requests for DeleteContactFieldSetting
func NewDeleteContactFieldSettingRequest(server string, contactCustomFieldSettingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldSettingId", runtime.ParamLocationPath, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomFieldSetting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactFieldSettingByIdRequest generates requests for GetContactFieldSettingById
func NewGetContactFieldSettingByIdRequest(server string, contactCustomFieldSettingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldSettingId", runtime.ParamLocationPath, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomFieldSetting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactFieldSettingRequest calls the generic UpdateContactFieldSetting builder with application/json body
func NewUpdateContactFieldSettingRequest(server string, contactCustomFieldSettingId int, body UpdateContactFieldSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactFieldSettingRequestWithBody(server, contactCustomFieldSettingId, "application/json", bodyReader)
}

// NewUpdateContactFieldSettingRequestWithBody generates requests for UpdateContactFieldSetting with any type of body
func NewUpdateContactFieldSettingRequestWithBody(server string, contactCustomFieldSettingId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldSettingId", runtime.ParamLocationPath, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomFieldSetting/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReferenceCountRequest generates requests for GetReferenceCount
func NewGetReferenceCountRequest(server string, contactCustomFieldSettingId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactCustomFieldSettingId", runtime.ParamLocationPath, contactCustomFieldSettingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ContactCustomFieldSetting/%s/getReferenceCount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCreditNotesRequest generates requests for GetCreditNotes
func NewGetCreditNotesRequest(server string, params *GetCreditNotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreditNoteNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creditNoteNumber", runtime.ParamLocationQuery, *params.CreditNoteNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "contact[id]", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "contact[objectName]", runtime.ParamLocationQuery, *params.ContactObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCreditNoteFromInvoiceRequest calls the generic CreateCreditNoteFromInvoice builder with application/json body
func NewCreateCreditNoteFromInvoiceRequest(server string, body CreateCreditNoteFromInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCreditNoteFromInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCreditNoteFromInvoiceRequestWithBody generates requests for CreateCreditNoteFromInvoice with any type of body
func NewCreateCreditNoteFromInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/Factory/createFromInvoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCreditNoteFromVoucherRequest calls the generic CreateCreditNoteFromVoucher builder with application/json body
func NewCreateCreditNoteFromVoucherRequest(server string, body CreateCreditNoteFromVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCreditNoteFromVoucherRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCreditNoteFromVoucherRequestWithBody generates requests for CreateCreditNoteFromVoucher with any type of body
func NewCreateCreditNoteFromVoucherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/Factory/createFromVoucher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatecreditNoteRequest calls the generic CreatecreditNote builder with application/json body
func NewCreatecreditNoteRequest(server string, body CreatecreditNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatecreditNoteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatecreditNoteRequestWithBody generates requests for CreatecreditNote with any type of body
func NewCreatecreditNoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/Factory/saveCreditNote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecreditNoteRequest generates requests for DeletecreditNote
func NewDeletecreditNoteRequest(server string, creditNoteId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcreditNoteByIdRequest generates requests for GetcreditNoteById
func NewGetcreditNoteByIdRequest(server string, creditNoteId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatecreditNoteRequest calls the generic UpdatecreditNote builder with application/json body
func NewUpdatecreditNoteRequest(server string, creditNoteId int, body UpdatecreditNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatecreditNoteRequestWithBody(server, creditNoteId, "application/json", bodyReader)
}

// NewUpdatecreditNoteRequestWithBody generates requests for UpdatecreditNote with any type of body
func NewUpdatecreditNoteRequestWithBody(server string, creditNoteId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBookCreditNoteRequest calls the generic BookCreditNote builder with application/json body
func NewBookCreditNoteRequest(server string, creditNoteId int, body BookCreditNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBookCreditNoteRequestWithBody(server, creditNoteId, "application/json", bodyReader)
}

// NewBookCreditNoteRequestWithBody generates requests for BookCreditNote with any type of body
func NewBookCreditNoteRequestWithBody(server string, creditNoteId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/bookAmount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCreditNoteTemplateRequest calls the generic UpdateCreditNoteTemplate builder with application/json body
func NewUpdateCreditNoteTemplateRequest(server string, creditNoteId int, body UpdateCreditNoteTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCreditNoteTemplateRequestWithBody(server, creditNoteId, "application/json", bodyReader)
}

// NewUpdateCreditNoteTemplateRequestWithBody generates requests for UpdateCreditNoteTemplate with any type of body
func NewUpdateCreditNoteTemplateRequestWithBody(server string, creditNoteId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/changeParameter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreditNoteEnshrineRequest generates requests for CreditNoteEnshrine
func NewCreditNoteEnshrineRequest(server string, creditNoteId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/enshrine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreditNoteGetPdfRequest generates requests for CreditNoteGetPdf
func NewCreditNoteGetPdfRequest(server string, creditNoteId int, params *CreditNoteGetPdfParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/getPdf", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreventSendBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preventSendBy", runtime.ParamLocationQuery, *params.PreventSendBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreditNoteResetToDraftRequest generates requests for CreditNoteResetToDraft
func NewCreditNoteResetToDraftRequest(server string, creditNoteId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/resetToDraft", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreditNoteResetToOpenRequest generates requests for CreditNoteResetToOpen
func NewCreditNoteResetToOpenRequest(server string, creditNoteId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/resetToOpen", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreditNoteSendByRequest calls the generic CreditNoteSendBy builder with application/json body
func NewCreditNoteSendByRequest(server string, creditNoteId int, body CreditNoteSendByJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreditNoteSendByRequestWithBody(server, creditNoteId, "application/json", bodyReader)
}

// NewCreditNoteSendByRequestWithBody generates requests for CreditNoteSendBy with any type of body
func NewCreditNoteSendByRequestWithBody(server string, creditNoteId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/sendBy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendCreditNoteByPrintingRequest generates requests for SendCreditNoteByPrinting
func NewSendCreditNoteByPrintingRequest(server string, creditNoteId int, params *SendCreditNoteByPrintingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/sendByWithRender", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sendType", runtime.ParamLocationQuery, params.SendType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendCreditNoteViaEMailRequest calls the generic SendCreditNoteViaEMail builder with application/json body
func NewSendCreditNoteViaEMailRequest(server string, creditNoteId int, body SendCreditNoteViaEMailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendCreditNoteViaEMailRequestWithBody(server, creditNoteId, "application/json", bodyReader)
}

// NewSendCreditNoteViaEMailRequestWithBody generates requests for SendCreditNoteViaEMail with any type of body
func NewSendCreditNoteViaEMailRequestWithBody(server string, creditNoteId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditNoteId", runtime.ParamLocationPath, creditNoteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNote/%s/sendViaEmail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcreditNotePositionsRequest generates requests for GetcreditNotePositions
func NewGetcreditNotePositionsRequest(server string, params *GetcreditNotePositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/CreditNotePos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreditNoteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "creditNote[id]", runtime.ParamLocationQuery, *params.CreditNoteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreditNoteObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "creditNote[objectName]", runtime.ParamLocationQuery, *params.CreditNoteObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLetterpapersWithThumbRequest generates requests for GetLetterpapersWithThumb
func NewGetLetterpapersWithThumbRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/DocServer/getLetterpapersWithThumb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTemplatesRequest generates requests for GetTemplates
func NewGetTemplatesRequest(server string, params *GetTemplatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/DocServer/getTemplatesWithThumb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportContactRequest generates requests for ExportContact
func NewExportContactRequest(server string, params *ExportContactParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/contactListCsv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportCreditNoteRequest generates requests for ExportCreditNote
func NewExportCreditNoteRequest(server string, params *ExportCreditNoteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/creditNoteCsv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportDatevRequest generates requests for ExportDatev
func NewExportDatevRequest(server string, params *ExportDatevParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/datevCSV")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WithUnpaidDocuments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withUnpaidDocuments", runtime.ParamLocationQuery, *params.WithUnpaidDocuments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithEnshrinedDocuments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withEnshrinedDocuments", runtime.ParamLocationQuery, *params.WithEnshrinedDocuments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enshrine != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enshrine", runtime.ParamLocationQuery, *params.Enshrine); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportInvoiceRequest generates requests for ExportInvoice
func NewExportInvoiceRequest(server string, params *ExportInvoiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/invoiceCsv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportInvoiceZipRequest generates requests for ExportInvoiceZip
func NewExportInvoiceZipRequest(server string, params *ExportInvoiceZipParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/invoiceZip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportTransactionsRequest generates requests for ExportTransactions
func NewExportTransactionsRequest(server string, params *ExportTransactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/transactionsCsv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportVoucherRequest generates requests for ExportVoucher
func NewExportVoucherRequest(server string, params *ExportVoucherParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/voucherListCsv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportVoucherZipRequest generates requests for ExportVoucherZip
func NewExportVoucherZipRequest(server string, params *ExportVoucherZipParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Export/voucherZip")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoicesRequest generates requests for GetInvoices
func NewGetInvoicesRequest(server string, params *GetInvoicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceNumber", runtime.ParamLocationQuery, *params.InvoiceNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact[id]", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact[objectName]", runtime.ParamLocationQuery, *params.ContactObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInvoiceFromOrderRequest calls the generic CreateInvoiceFromOrder builder with application/json body
func NewCreateInvoiceFromOrderRequest(server string, body CreateInvoiceFromOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvoiceFromOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInvoiceFromOrderRequestWithBody generates requests for CreateInvoiceFromOrder with any type of body
func NewCreateInvoiceFromOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/Factory/createInvoiceFromOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateInvoiceReminderRequest calls the generic CreateInvoiceReminder builder with application/json body
func NewCreateInvoiceReminderRequest(server string, params *CreateInvoiceReminderParams, body CreateInvoiceReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvoiceReminderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateInvoiceReminderRequestWithBody generates requests for CreateInvoiceReminder with any type of body
func NewCreateInvoiceReminderRequestWithBody(server string, params *CreateInvoiceReminderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/Factory/createInvoiceReminder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoice[id]", runtime.ParamLocationQuery, params.InvoiceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoice[objectName]", runtime.ParamLocationQuery, params.InvoiceObjectName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateInvoiceByFactoryRequest calls the generic CreateInvoiceByFactory builder with application/json body
func NewCreateInvoiceByFactoryRequest(server string, body CreateInvoiceByFactoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvoiceByFactoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInvoiceByFactoryRequestWithBody generates requests for CreateInvoiceByFactory with any type of body
func NewCreateInvoiceByFactoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/Factory/saveInvoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvoiceByIdRequest generates requests for GetInvoiceById
func NewGetInvoiceByIdRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBookInvoiceRequest calls the generic BookInvoice builder with application/json body
func NewBookInvoiceRequest(server string, invoiceId int, body BookInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBookInvoiceRequestWithBody(server, invoiceId, "application/json", bodyReader)
}

// NewBookInvoiceRequestWithBody generates requests for BookInvoice with any type of body
func NewBookInvoiceRequestWithBody(server string, invoiceId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/bookAmount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelInvoiceRequest generates requests for CancelInvoice
func NewCancelInvoiceRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/cancelInvoice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInvoiceTemplateRequest calls the generic UpdateInvoiceTemplate builder with application/json body
func NewUpdateInvoiceTemplateRequest(server string, invoiceId int, body UpdateInvoiceTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInvoiceTemplateRequestWithBody(server, invoiceId, "application/json", bodyReader)
}

// NewUpdateInvoiceTemplateRequestWithBody generates requests for UpdateInvoiceTemplate with any type of body
func NewUpdateInvoiceTemplateRequestWithBody(server string, invoiceId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/changeParameter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvoiceEnshrineRequest generates requests for InvoiceEnshrine
func NewInvoiceEnshrineRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/enshrine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIsInvoicePartiallyPaidRequest generates requests for GetIsInvoicePartiallyPaid
func NewGetIsInvoicePartiallyPaidRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/getIsPartiallyPaid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvoiceGetPdfRequest generates requests for InvoiceGetPdf
func NewInvoiceGetPdfRequest(server string, invoiceId int, params *InvoiceGetPdfParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/getPdf", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreventSendBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preventSendBy", runtime.ParamLocationQuery, *params.PreventSendBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoicePositionsByIdRequest generates requests for GetInvoicePositionsById
func NewGetInvoicePositionsByIdRequest(server string, invoiceId int, params *GetInvoicePositionsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/getPositions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvoiceGetXmlRequest generates requests for InvoiceGetXml
func NewInvoiceGetXmlRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/getXml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvoiceRenderRequest calls the generic InvoiceRender builder with application/json body
func NewInvoiceRenderRequest(server string, invoiceId int, body InvoiceRenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvoiceRenderRequestWithBody(server, invoiceId, "application/json", bodyReader)
}

// NewInvoiceRenderRequestWithBody generates requests for InvoiceRender with any type of body
func NewInvoiceRenderRequestWithBody(server string, invoiceId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/render", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvoiceResetToDraftRequest generates requests for InvoiceResetToDraft
func NewInvoiceResetToDraftRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/resetToDraft", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvoiceResetToOpenRequest generates requests for InvoiceResetToOpen
func NewInvoiceResetToOpenRequest(server string, invoiceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/resetToOpen", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvoiceSendByRequest calls the generic InvoiceSendBy builder with application/json body
func NewInvoiceSendByRequest(server string, invoiceId int, body InvoiceSendByJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvoiceSendByRequestWithBody(server, invoiceId, "application/json", bodyReader)
}

// NewInvoiceSendByRequestWithBody generates requests for InvoiceSendBy with any type of body
func NewInvoiceSendByRequestWithBody(server string, invoiceId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/sendBy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendInvoiceViaEMailRequest calls the generic SendInvoiceViaEMail builder with application/json body
func NewSendInvoiceViaEMailRequest(server string, invoiceId int, body SendInvoiceViaEMailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendInvoiceViaEMailRequestWithBody(server, invoiceId, "application/json", bodyReader)
}

// NewSendInvoiceViaEMailRequestWithBody generates requests for SendInvoiceViaEMail with any type of body
func NewSendInvoiceViaEMailRequestWithBody(server string, invoiceId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Invoice/%s/sendViaEmail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvoicePosRequest generates requests for GetInvoicePos
func NewGetInvoicePosRequest(server string, params *GetInvoicePosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/InvoicePos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoice[id]", runtime.ParamLocationQuery, *params.InvoiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoice[objectName]", runtime.ParamLocationQuery, *params.InvoiceObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "part[id]", runtime.ParamLocationQuery, *params.PartId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "part[objectName]", runtime.ParamLocationQuery, *params.PartObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrdersRequest generates requests for GetOrders
func NewGetOrdersRequest(server string, params *GetOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderNumber", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "contact[id]", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "contact[objectName]", runtime.ParamLocationQuery, *params.ContactObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContractNoteFromOrderRequest calls the generic CreateContractNoteFromOrder builder with application/json body
func NewCreateContractNoteFromOrderRequest(server string, params *CreateContractNoteFromOrderParams, body CreateContractNoteFromOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContractNoteFromOrderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateContractNoteFromOrderRequestWithBody generates requests for CreateContractNoteFromOrder with any type of body
func NewCreateContractNoteFromOrderRequestWithBody(server string, params *CreateContractNoteFromOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/Factory/createContractNoteFromOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order[id]", runtime.ParamLocationQuery, params.OrderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order[objectName]", runtime.ParamLocationQuery, params.OrderObjectName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePackingListFromOrderRequest calls the generic CreatePackingListFromOrder builder with application/json body
func NewCreatePackingListFromOrderRequest(server string, params *CreatePackingListFromOrderParams, body CreatePackingListFromOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePackingListFromOrderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreatePackingListFromOrderRequestWithBody generates requests for CreatePackingListFromOrder with any type of body
func NewCreatePackingListFromOrderRequestWithBody(server string, params *CreatePackingListFromOrderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/Factory/createPackingListFromOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order[id]", runtime.ParamLocationQuery, params.OrderId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order[objectName]", runtime.ParamLocationQuery, params.OrderObjectName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/Factory/saveOrder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrderRequest generates requests for DeleteOrder
func NewDeleteOrderRequest(server string, orderId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderByIdRequest generates requests for GetOrderById
func NewGetOrderByIdRequest(server string, orderId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrderRequest calls the generic UpdateOrder builder with application/json body
func NewUpdateOrderRequest(server string, orderId int, body UpdateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrderRequestWithBody(server, orderId, "application/json", bodyReader)
}

// NewUpdateOrderRequestWithBody generates requests for UpdateOrder with any type of body
func NewUpdateOrderRequestWithBody(server string, orderId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOrderTemplateRequest calls the generic UpdateOrderTemplate builder with application/json body
func NewUpdateOrderTemplateRequest(server string, orderId int, body UpdateOrderTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrderTemplateRequestWithBody(server, orderId, "application/json", bodyReader)
}

// NewUpdateOrderTemplateRequestWithBody generates requests for UpdateOrderTemplate with any type of body
func NewUpdateOrderTemplateRequestWithBody(server string, orderId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/changeParameter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiscountsRequest generates requests for GetDiscounts
func NewGetDiscountsRequest(server string, orderId int, params *GetDiscountsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/getDiscounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderGetPdfRequest generates requests for OrderGetPdf
func NewOrderGetPdfRequest(server string, orderId int, params *OrderGetPdfParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/getPdf", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PreventSendBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preventSendBy", runtime.ParamLocationQuery, *params.PreventSendBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderPositionsByIdRequest generates requests for GetOrderPositionsById
func NewGetOrderPositionsByIdRequest(server string, orderId int, params *GetOrderPositionsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/getPositions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelatedObjectsRequest generates requests for GetRelatedObjects
func NewGetRelatedObjectsRequest(server string, orderId int, params *GetRelatedObjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/getRelatedObjects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeItself != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeItself", runtime.ParamLocationQuery, *params.IncludeItself); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortByType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortByType", runtime.ParamLocationQuery, *params.SortByType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Embed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "embed", runtime.ParamLocationQuery, *params.Embed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderSendByRequest calls the generic OrderSendBy builder with application/json body
func NewOrderSendByRequest(server string, orderId int, body OrderSendByJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderSendByRequestWithBody(server, orderId, "application/json", bodyReader)
}

// NewOrderSendByRequestWithBody generates requests for OrderSendBy with any type of body
func NewOrderSendByRequestWithBody(server string, orderId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/sendBy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendorderViaEMailRequest calls the generic SendorderViaEMail builder with application/json body
func NewSendorderViaEMailRequest(server string, orderId int, body SendorderViaEMailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendorderViaEMailRequestWithBody(server, orderId, "application/json", bodyReader)
}

// NewSendorderViaEMailRequestWithBody generates requests for SendorderViaEMail with any type of body
func NewSendorderViaEMailRequestWithBody(server string, orderId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Order/%s/sendViaEmail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrderPositionsRequest generates requests for GetOrderPositions
func NewGetOrderPositionsRequest(server string, params *GetOrderPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OrderPos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order[id]", runtime.ParamLocationQuery, *params.OrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order[objectName]", runtime.ParamLocationQuery, *params.OrderObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrderPosRequest generates requests for DeleteOrderPos
func NewDeleteOrderPosRequest(server string, orderPosId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderPosId", runtime.ParamLocationPath, orderPosId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OrderPos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderPositionByIdRequest generates requests for GetOrderPositionById
func NewGetOrderPositionByIdRequest(server string, orderPosId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderPosId", runtime.ParamLocationPath, orderPosId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OrderPos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrderPositionRequest calls the generic UpdateOrderPosition builder with application/json body
func NewUpdateOrderPositionRequest(server string, orderPosId int, body UpdateOrderPositionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrderPositionRequestWithBody(server, orderPosId, "application/json", bodyReader)
}

// NewUpdateOrderPositionRequestWithBody generates requests for UpdateOrderPosition with any type of body
func NewUpdateOrderPositionRequestWithBody(server string, orderPosId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderPosId", runtime.ParamLocationPath, orderPosId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OrderPos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartsRequest generates requests for GetParts
func NewGetPartsRequest(server string, params *GetPartsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Part")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PartNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partNumber", runtime.ParamLocationQuery, *params.PartNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePartRequest calls the generic CreatePart builder with application/json body
func NewCreatePartRequest(server string, body CreatePartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePartRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePartRequestWithBody generates requests for CreatePart with any type of body
func NewCreatePartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Part")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartByIdRequest generates requests for GetPartById
func NewGetPartByIdRequest(server string, partId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partId", runtime.ParamLocationPath, partId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Part/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePartRequest calls the generic UpdatePart builder with application/json body
func NewUpdatePartRequest(server string, partId int, body UpdatePartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePartRequestWithBody(server, partId, "application/json", bodyReader)
}

// NewUpdatePartRequestWithBody generates requests for UpdatePart with any type of body
func NewUpdatePartRequestWithBody(server string, partId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partId", runtime.ParamLocationPath, partId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Part/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPartGetStockRequest generates requests for PartGetStock
func NewPartGetStockRequest(server string, partId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "partId", runtime.ParamLocationPath, partId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Part/%s/getStock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForAccountNumberRequest generates requests for ForAccountNumber
func NewForAccountNumberRequest(server string, params *ForAccountNumberParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ReceiptGuidance/forAccountNumber")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountNumber", runtime.ParamLocationQuery, params.AccountNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForAllAccountsRequest generates requests for ForAllAccounts
func NewForAllAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ReceiptGuidance/forAllAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForExpenseRequest generates requests for ForExpense
func NewForExpenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ReceiptGuidance/forExpense")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForRevenueRequest generates requests for ForRevenue
func NewForRevenueRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ReceiptGuidance/forRevenue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForTaxRuleRequest generates requests for ForTaxRule
func NewForTaxRuleRequest(server string, params *ForTaxRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ReceiptGuidance/forTaxRule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "taxRule", runtime.ParamLocationQuery, params.TaxRule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportContactRequest generates requests for ReportContact
func NewReportContactRequest(server string, params *ReportContactParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Report/contactlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportInvoiceRequest generates requests for ReportInvoice
func NewReportInvoiceRequest(server string, params *ReportInvoiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Report/invoicelist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, params.View); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportOrderRequest generates requests for ReportOrder
func NewReportOrderRequest(server string, params *ReportOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Report/orderlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, params.View); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportVoucherRequest generates requests for ReportVoucher
func NewReportVoucherRequest(server string, params *ReportVoucherParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Report/voucherlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sevQuery", runtime.ParamLocationQuery, params.SevQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateExportConfigRequest calls the generic UpdateExportConfig builder with application/json body
func NewUpdateExportConfigRequest(server string, sevClientId float32, body UpdateExportConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateExportConfigRequestWithBody(server, sevClientId, "application/json", bodyReader)
}

// NewUpdateExportConfigRequestWithBody generates requests for UpdateExportConfig with any type of body
func NewUpdateExportConfigRequestWithBody(server string, sevClientId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "SevClientId", runtime.ParamLocationPath, sevClientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SevClient/%s/updateExportConfig", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string, params *GetTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Tag/Factory/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, tagId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagByIdRequest generates requests for GetTagById
func NewGetTagByIdRequest(server string, tagId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTagRequest calls the generic UpdateTag builder with application/json body
func NewUpdateTagRequest(server string, tagId int, body UpdateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewUpdateTagRequestWithBody generates requests for UpdateTag with any type of body
func NewUpdateTagRequestWithBody(server string, tagId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagRelationsRequest generates requests for GetTagRelations
func NewGetTagRelationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TagRelation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaceholderRequest generates requests for GetPlaceholder
func NewGetPlaceholderRequest(server string, params *GetPlaceholderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Textparser/fetchDictionaryEntriesByType")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectName", runtime.ParamLocationQuery, params.ObjectName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SubObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subObjectName", runtime.ParamLocationQuery, *params.SubObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBookkeepingSystemVersionRequest generates requests for BookkeepingSystemVersion
func NewBookkeepingSystemVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Tools/bookkeepingSystemVersion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVouchersRequest generates requests for GetVouchers
func NewGetVouchersRequest(server string, params *GetVouchersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreditDebit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creditDebit", runtime.ParamLocationQuery, *params.CreditDebit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "descriptionLike", runtime.ParamLocationQuery, *params.DescriptionLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "contact[id]", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "contact[objectName]", runtime.ParamLocationQuery, *params.ContactObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVoucherFactorySaveVoucherRequest calls the generic VoucherFactorySaveVoucher builder with application/json body
func NewVoucherFactorySaveVoucherRequest(server string, body VoucherFactorySaveVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVoucherFactorySaveVoucherRequestWithBody(server, "application/json", bodyReader)
}

// NewVoucherFactorySaveVoucherRequestWithBody generates requests for VoucherFactorySaveVoucher with any type of body
func NewVoucherFactorySaveVoucherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/Factory/saveVoucher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVoucherUploadFileRequestWithBody generates requests for VoucherUploadFile with any type of body
func NewVoucherUploadFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/Factory/uploadTempFile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVoucherByIdRequest generates requests for GetVoucherById
func NewGetVoucherByIdRequest(server string, voucherId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voucherId", runtime.ParamLocationPath, voucherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVoucherRequest calls the generic UpdateVoucher builder with application/json body
func NewUpdateVoucherRequest(server string, voucherId int, body UpdateVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVoucherRequestWithBody(server, voucherId, "application/json", bodyReader)
}

// NewUpdateVoucherRequestWithBody generates requests for UpdateVoucher with any type of body
func NewUpdateVoucherRequestWithBody(server string, voucherId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voucherId", runtime.ParamLocationPath, voucherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBookVoucherRequest calls the generic BookVoucher builder with application/json body
func NewBookVoucherRequest(server string, voucherId int, body BookVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBookVoucherRequestWithBody(server, voucherId, "application/json", bodyReader)
}

// NewBookVoucherRequestWithBody generates requests for BookVoucher with any type of body
func NewBookVoucherRequestWithBody(server string, voucherId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voucherId", runtime.ParamLocationPath, voucherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/%s/bookAmount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVoucherEnshrineRequest generates requests for VoucherEnshrine
func NewVoucherEnshrineRequest(server string, voucherId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voucherId", runtime.ParamLocationPath, voucherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/%s/enshrine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVoucherResetToDraftRequest generates requests for VoucherResetToDraft
func NewVoucherResetToDraftRequest(server string, voucherId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voucherId", runtime.ParamLocationPath, voucherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/%s/resetToDraft", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVoucherResetToOpenRequest generates requests for VoucherResetToOpen
func NewVoucherResetToOpenRequest(server string, voucherId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "voucherId", runtime.ParamLocationPath, voucherId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Voucher/%s/resetToOpen", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVoucherPositionsRequest generates requests for GetVoucherPositions
func NewGetVoucherPositionsRequest(server string, params *GetVoucherPositionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/VoucherPos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.VoucherId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "voucher[id]", runtime.ParamLocationQuery, *params.VoucherId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VoucherObjectName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "voucher[objectName]", runtime.ParamLocationQuery, *params.VoucherObjectName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountingContactWithResponse request
	GetAccountingContactWithResponse(ctx context.Context, params *GetAccountingContactParams, reqEditors ...RequestEditorFn) (*GetAccountingContactResponse, error)

	// CreateAccountingContactWithBodyWithResponse request with any body
	CreateAccountingContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountingContactResponse, error)

	CreateAccountingContactWithResponse(ctx context.Context, body CreateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountingContactResponse, error)

	// DeleteAccountingContactWithResponse request
	DeleteAccountingContactWithResponse(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*DeleteAccountingContactResponse, error)

	// GetAccountingContactByIdWithResponse request
	GetAccountingContactByIdWithResponse(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*GetAccountingContactByIdResponse, error)

	// UpdateAccountingContactWithBodyWithResponse request with any body
	UpdateAccountingContactWithBodyWithResponse(ctx context.Context, accountingContactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountingContactResponse, error)

	UpdateAccountingContactWithResponse(ctx context.Context, accountingContactId int, body UpdateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountingContactResponse, error)

	// GetCheckAccountsWithResponse request
	GetCheckAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCheckAccountsResponse, error)

	// CreateCheckAccountWithBodyWithResponse request with any body
	CreateCheckAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCheckAccountResponse, error)

	CreateCheckAccountWithResponse(ctx context.Context, body CreateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCheckAccountResponse, error)

	// CreateClearingAccountWithBodyWithResponse request with any body
	CreateClearingAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClearingAccountResponse, error)

	CreateClearingAccountWithResponse(ctx context.Context, body CreateClearingAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClearingAccountResponse, error)

	// CreateFileImportAccountWithBodyWithResponse request with any body
	CreateFileImportAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileImportAccountResponse, error)

	CreateFileImportAccountWithResponse(ctx context.Context, body CreateFileImportAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFileImportAccountResponse, error)

	// DeleteCheckAccountWithResponse request
	DeleteCheckAccountWithResponse(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*DeleteCheckAccountResponse, error)

	// GetCheckAccountByIdWithResponse request
	GetCheckAccountByIdWithResponse(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*GetCheckAccountByIdResponse, error)

	// UpdateCheckAccountWithBodyWithResponse request with any body
	UpdateCheckAccountWithBodyWithResponse(ctx context.Context, checkAccountId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCheckAccountResponse, error)

	UpdateCheckAccountWithResponse(ctx context.Context, checkAccountId int, body UpdateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCheckAccountResponse, error)

	// GetBalanceAtDateWithResponse request
	GetBalanceAtDateWithResponse(ctx context.Context, checkAccountId int, params *GetBalanceAtDateParams, reqEditors ...RequestEditorFn) (*GetBalanceAtDateResponse, error)

	// GetTransactionsWithResponse request
	GetTransactionsWithResponse(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*GetTransactionsResponse, error)

	// CreateTransactionWithBodyWithResponse request with any body
	CreateTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTransactionResponse, error)

	CreateTransactionWithResponse(ctx context.Context, body CreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTransactionResponse, error)

	// DeleteCheckAccountTransactionWithResponse request
	DeleteCheckAccountTransactionWithResponse(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*DeleteCheckAccountTransactionResponse, error)

	// GetCheckAccountTransactionByIdWithResponse request
	GetCheckAccountTransactionByIdWithResponse(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*GetCheckAccountTransactionByIdResponse, error)

	// UpdateCheckAccountTransactionWithBodyWithResponse request with any body
	UpdateCheckAccountTransactionWithBodyWithResponse(ctx context.Context, checkAccountTransactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCheckAccountTransactionResponse, error)

	UpdateCheckAccountTransactionWithResponse(ctx context.Context, checkAccountTransactionId int, body UpdateCheckAccountTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCheckAccountTransactionResponse, error)

	// CheckAccountTransactionEnshrineWithResponse request
	CheckAccountTransactionEnshrineWithResponse(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*CheckAccountTransactionEnshrineResponse, error)

	// GetCommunicationWaysWithResponse request
	GetCommunicationWaysWithResponse(ctx context.Context, params *GetCommunicationWaysParams, reqEditors ...RequestEditorFn) (*GetCommunicationWaysResponse, error)

	// CreateCommunicationWayWithBodyWithResponse request with any body
	CreateCommunicationWayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommunicationWayResponse, error)

	CreateCommunicationWayWithResponse(ctx context.Context, body CreateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommunicationWayResponse, error)

	// DeleteCommunicationWayWithResponse request
	DeleteCommunicationWayWithResponse(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*DeleteCommunicationWayResponse, error)

	// GetCommunicationWayByIdWithResponse request
	GetCommunicationWayByIdWithResponse(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*GetCommunicationWayByIdResponse, error)

	// UpdateCommunicationWayWithBodyWithResponse request with any body
	UpdateCommunicationWayWithBodyWithResponse(ctx context.Context, communicationWayId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommunicationWayResponse, error)

	UpdateCommunicationWayWithResponse(ctx context.Context, communicationWayId int, body UpdateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommunicationWayResponse, error)

	// GetCommunicationWayKeysWithResponse request
	GetCommunicationWayKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCommunicationWayKeysResponse, error)

	// GetContactsWithResponse request
	GetContactsWithResponse(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*GetContactsResponse, error)

	// CreateContactWithBodyWithResponse request with any body
	CreateContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactResponse, error)

	CreateContactWithResponse(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactResponse, error)

	// FindContactsByCustomFieldValueWithResponse request
	FindContactsByCustomFieldValueWithResponse(ctx context.Context, params *FindContactsByCustomFieldValueParams, reqEditors ...RequestEditorFn) (*FindContactsByCustomFieldValueResponse, error)

	// GetNextCustomerNumberWithResponse request
	GetNextCustomerNumberWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNextCustomerNumberResponse, error)

	// ContactCustomerNumberAvailabilityCheckWithResponse request
	ContactCustomerNumberAvailabilityCheckWithResponse(ctx context.Context, params *ContactCustomerNumberAvailabilityCheckParams, reqEditors ...RequestEditorFn) (*ContactCustomerNumberAvailabilityCheckResponse, error)

	// DeleteContactWithResponse request
	DeleteContactWithResponse(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*DeleteContactResponse, error)

	// GetContactByIdWithResponse request
	GetContactByIdWithResponse(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*GetContactByIdResponse, error)

	// UpdateContactWithBodyWithResponse request with any body
	UpdateContactWithBodyWithResponse(ctx context.Context, contactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error)

	UpdateContactWithResponse(ctx context.Context, contactId int, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error)

	// GetContactTabsItemCountByIdWithResponse request
	GetContactTabsItemCountByIdWithResponse(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*GetContactTabsItemCountByIdResponse, error)

	// GetContactAddressesWithResponse request
	GetContactAddressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactAddressesResponse, error)

	// CreateContactAddressWithBodyWithResponse request with any body
	CreateContactAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactAddressResponse, error)

	CreateContactAddressWithResponse(ctx context.Context, body CreateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactAddressResponse, error)

	// DeleteContactAddressWithResponse request
	DeleteContactAddressWithResponse(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*DeleteContactAddressResponse, error)

	// ContactAddressIdWithResponse request
	ContactAddressIdWithResponse(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*ContactAddressIdResponse, error)

	// UpdateContactAddressWithBodyWithResponse request with any body
	UpdateContactAddressWithBodyWithResponse(ctx context.Context, contactAddressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactAddressResponse, error)

	UpdateContactAddressWithResponse(ctx context.Context, contactAddressId int, body UpdateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactAddressResponse, error)

	// GetContactFieldsWithResponse request
	GetContactFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactFieldsResponse, error)

	// CreateContactFieldWithBodyWithResponse request with any body
	CreateContactFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactFieldResponse, error)

	CreateContactFieldWithResponse(ctx context.Context, body CreateContactFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactFieldResponse, error)

	// DeleteContactCustomFieldIdWithResponse request
	DeleteContactCustomFieldIdWithResponse(ctx context.Context, contactCustomFieldId int, reqEditors ...RequestEditorFn) (*DeleteContactCustomFieldIdResponse, error)

	// GetContactFieldsByIdWithResponse request
	GetContactFieldsByIdWithResponse(ctx context.Context, contactCustomFieldId float32, reqEditors ...RequestEditorFn) (*GetContactFieldsByIdResponse, error)

	// UpdateContactfieldWithBodyWithResponse request with any body
	UpdateContactfieldWithBodyWithResponse(ctx context.Context, contactCustomFieldId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactfieldResponse, error)

	UpdateContactfieldWithResponse(ctx context.Context, contactCustomFieldId float32, body UpdateContactfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactfieldResponse, error)

	// GetContactFieldSettingsWithResponse request
	GetContactFieldSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactFieldSettingsResponse, error)

	// CreateContactFieldSettingWithBodyWithResponse request with any body
	CreateContactFieldSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactFieldSettingResponse, error)

	CreateContactFieldSettingWithResponse(ctx context.Context, body CreateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactFieldSettingResponse, error)

	// DeleteContactFieldSettingWithResponse request
	DeleteContactFieldSettingWithResponse(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*DeleteContactFieldSettingResponse, error)

	// GetContactFieldSettingByIdWithResponse request
	GetContactFieldSettingByIdWithResponse(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*GetContactFieldSettingByIdResponse, error)

	// UpdateContactFieldSettingWithBodyWithResponse request with any body
	UpdateContactFieldSettingWithBodyWithResponse(ctx context.Context, contactCustomFieldSettingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactFieldSettingResponse, error)

	UpdateContactFieldSettingWithResponse(ctx context.Context, contactCustomFieldSettingId int, body UpdateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactFieldSettingResponse, error)

	// GetReferenceCountWithResponse request
	GetReferenceCountWithResponse(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*GetReferenceCountResponse, error)

	// GetCreditNotesWithResponse request
	GetCreditNotesWithResponse(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*GetCreditNotesResponse, error)

	// CreateCreditNoteFromInvoiceWithBodyWithResponse request with any body
	CreateCreditNoteFromInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromInvoiceResponse, error)

	CreateCreditNoteFromInvoiceWithResponse(ctx context.Context, body CreateCreditNoteFromInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromInvoiceResponse, error)

	// CreateCreditNoteFromVoucherWithBodyWithResponse request with any body
	CreateCreditNoteFromVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromVoucherResponse, error)

	CreateCreditNoteFromVoucherWithResponse(ctx context.Context, body CreateCreditNoteFromVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromVoucherResponse, error)

	// CreatecreditNoteWithBodyWithResponse request with any body
	CreatecreditNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatecreditNoteResponse, error)

	CreatecreditNoteWithResponse(ctx context.Context, body CreatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatecreditNoteResponse, error)

	// DeletecreditNoteWithResponse request
	DeletecreditNoteWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*DeletecreditNoteResponse, error)

	// GetcreditNoteByIdWithResponse request
	GetcreditNoteByIdWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*GetcreditNoteByIdResponse, error)

	// UpdatecreditNoteWithBodyWithResponse request with any body
	UpdatecreditNoteWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatecreditNoteResponse, error)

	UpdatecreditNoteWithResponse(ctx context.Context, creditNoteId int, body UpdatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatecreditNoteResponse, error)

	// BookCreditNoteWithBodyWithResponse request with any body
	BookCreditNoteWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookCreditNoteResponse, error)

	BookCreditNoteWithResponse(ctx context.Context, creditNoteId int, body BookCreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*BookCreditNoteResponse, error)

	// UpdateCreditNoteTemplateWithBodyWithResponse request with any body
	UpdateCreditNoteTemplateWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCreditNoteTemplateResponse, error)

	UpdateCreditNoteTemplateWithResponse(ctx context.Context, creditNoteId int, body UpdateCreditNoteTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCreditNoteTemplateResponse, error)

	// CreditNoteEnshrineWithResponse request
	CreditNoteEnshrineWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*CreditNoteEnshrineResponse, error)

	// CreditNoteGetPdfWithResponse request
	CreditNoteGetPdfWithResponse(ctx context.Context, creditNoteId int, params *CreditNoteGetPdfParams, reqEditors ...RequestEditorFn) (*CreditNoteGetPdfResponse, error)

	// CreditNoteResetToDraftWithResponse request
	CreditNoteResetToDraftWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*CreditNoteResetToDraftResponse, error)

	// CreditNoteResetToOpenWithResponse request
	CreditNoteResetToOpenWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*CreditNoteResetToOpenResponse, error)

	// CreditNoteSendByWithBodyWithResponse request with any body
	CreditNoteSendByWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreditNoteSendByResponse, error)

	CreditNoteSendByWithResponse(ctx context.Context, creditNoteId int, body CreditNoteSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*CreditNoteSendByResponse, error)

	// SendCreditNoteByPrintingWithResponse request
	SendCreditNoteByPrintingWithResponse(ctx context.Context, creditNoteId int, params *SendCreditNoteByPrintingParams, reqEditors ...RequestEditorFn) (*SendCreditNoteByPrintingResponse, error)

	// SendCreditNoteViaEMailWithBodyWithResponse request with any body
	SendCreditNoteViaEMailWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCreditNoteViaEMailResponse, error)

	SendCreditNoteViaEMailWithResponse(ctx context.Context, creditNoteId int, body SendCreditNoteViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCreditNoteViaEMailResponse, error)

	// GetcreditNotePositionsWithResponse request
	GetcreditNotePositionsWithResponse(ctx context.Context, params *GetcreditNotePositionsParams, reqEditors ...RequestEditorFn) (*GetcreditNotePositionsResponse, error)

	// GetLetterpapersWithThumbWithResponse request
	GetLetterpapersWithThumbWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLetterpapersWithThumbResponse, error)

	// GetTemplatesWithResponse request
	GetTemplatesWithResponse(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*GetTemplatesResponse, error)

	// ExportContactWithResponse request
	ExportContactWithResponse(ctx context.Context, params *ExportContactParams, reqEditors ...RequestEditorFn) (*ExportContactResponse, error)

	// ExportCreditNoteWithResponse request
	ExportCreditNoteWithResponse(ctx context.Context, params *ExportCreditNoteParams, reqEditors ...RequestEditorFn) (*ExportCreditNoteResponse, error)

	// ExportDatevWithResponse request
	ExportDatevWithResponse(ctx context.Context, params *ExportDatevParams, reqEditors ...RequestEditorFn) (*ExportDatevResponse, error)

	// ExportInvoiceWithResponse request
	ExportInvoiceWithResponse(ctx context.Context, params *ExportInvoiceParams, reqEditors ...RequestEditorFn) (*ExportInvoiceResponse, error)

	// ExportInvoiceZipWithResponse request
	ExportInvoiceZipWithResponse(ctx context.Context, params *ExportInvoiceZipParams, reqEditors ...RequestEditorFn) (*ExportInvoiceZipResponse, error)

	// ExportTransactionsWithResponse request
	ExportTransactionsWithResponse(ctx context.Context, params *ExportTransactionsParams, reqEditors ...RequestEditorFn) (*ExportTransactionsResponse, error)

	// ExportVoucherWithResponse request
	ExportVoucherWithResponse(ctx context.Context, params *ExportVoucherParams, reqEditors ...RequestEditorFn) (*ExportVoucherResponse, error)

	// ExportVoucherZipWithResponse request
	ExportVoucherZipWithResponse(ctx context.Context, params *ExportVoucherZipParams, reqEditors ...RequestEditorFn) (*ExportVoucherZipResponse, error)

	// GetInvoicesWithResponse request
	GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*GetInvoicesResponse, error)

	// CreateInvoiceFromOrderWithBodyWithResponse request with any body
	CreateInvoiceFromOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceFromOrderResponse, error)

	CreateInvoiceFromOrderWithResponse(ctx context.Context, body CreateInvoiceFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceFromOrderResponse, error)

	// CreateInvoiceReminderWithBodyWithResponse request with any body
	CreateInvoiceReminderWithBodyWithResponse(ctx context.Context, params *CreateInvoiceReminderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceReminderResponse, error)

	CreateInvoiceReminderWithResponse(ctx context.Context, params *CreateInvoiceReminderParams, body CreateInvoiceReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceReminderResponse, error)

	// CreateInvoiceByFactoryWithBodyWithResponse request with any body
	CreateInvoiceByFactoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceByFactoryResponse, error)

	CreateInvoiceByFactoryWithResponse(ctx context.Context, body CreateInvoiceByFactoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceByFactoryResponse, error)

	// GetInvoiceByIdWithResponse request
	GetInvoiceByIdWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*GetInvoiceByIdResponse, error)

	// BookInvoiceWithBodyWithResponse request with any body
	BookInvoiceWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookInvoiceResponse, error)

	BookInvoiceWithResponse(ctx context.Context, invoiceId int, body BookInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BookInvoiceResponse, error)

	// CancelInvoiceWithResponse request
	CancelInvoiceWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*CancelInvoiceResponse, error)

	// UpdateInvoiceTemplateWithBodyWithResponse request with any body
	UpdateInvoiceTemplateWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInvoiceTemplateResponse, error)

	UpdateInvoiceTemplateWithResponse(ctx context.Context, invoiceId int, body UpdateInvoiceTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInvoiceTemplateResponse, error)

	// InvoiceEnshrineWithResponse request
	InvoiceEnshrineWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceEnshrineResponse, error)

	// GetIsInvoicePartiallyPaidWithResponse request
	GetIsInvoicePartiallyPaidWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*GetIsInvoicePartiallyPaidResponse, error)

	// InvoiceGetPdfWithResponse request
	InvoiceGetPdfWithResponse(ctx context.Context, invoiceId int, params *InvoiceGetPdfParams, reqEditors ...RequestEditorFn) (*InvoiceGetPdfResponse, error)

	// GetInvoicePositionsByIdWithResponse request
	GetInvoicePositionsByIdWithResponse(ctx context.Context, invoiceId int, params *GetInvoicePositionsByIdParams, reqEditors ...RequestEditorFn) (*GetInvoicePositionsByIdResponse, error)

	// InvoiceGetXmlWithResponse request
	InvoiceGetXmlWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceGetXmlResponse, error)

	// InvoiceRenderWithBodyWithResponse request with any body
	InvoiceRenderWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvoiceRenderResponse, error)

	InvoiceRenderWithResponse(ctx context.Context, invoiceId int, body InvoiceRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*InvoiceRenderResponse, error)

	// InvoiceResetToDraftWithResponse request
	InvoiceResetToDraftWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceResetToDraftResponse, error)

	// InvoiceResetToOpenWithResponse request
	InvoiceResetToOpenWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceResetToOpenResponse, error)

	// InvoiceSendByWithBodyWithResponse request with any body
	InvoiceSendByWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvoiceSendByResponse, error)

	InvoiceSendByWithResponse(ctx context.Context, invoiceId int, body InvoiceSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*InvoiceSendByResponse, error)

	// SendInvoiceViaEMailWithBodyWithResponse request with any body
	SendInvoiceViaEMailWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendInvoiceViaEMailResponse, error)

	SendInvoiceViaEMailWithResponse(ctx context.Context, invoiceId int, body SendInvoiceViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendInvoiceViaEMailResponse, error)

	// GetInvoicePosWithResponse request
	GetInvoicePosWithResponse(ctx context.Context, params *GetInvoicePosParams, reqEditors ...RequestEditorFn) (*GetInvoicePosResponse, error)

	// GetOrdersWithResponse request
	GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error)

	// CreateContractNoteFromOrderWithBodyWithResponse request with any body
	CreateContractNoteFromOrderWithBodyWithResponse(ctx context.Context, params *CreateContractNoteFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContractNoteFromOrderResponse, error)

	CreateContractNoteFromOrderWithResponse(ctx context.Context, params *CreateContractNoteFromOrderParams, body CreateContractNoteFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContractNoteFromOrderResponse, error)

	// CreatePackingListFromOrderWithBodyWithResponse request with any body
	CreatePackingListFromOrderWithBodyWithResponse(ctx context.Context, params *CreatePackingListFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePackingListFromOrderResponse, error)

	CreatePackingListFromOrderWithResponse(ctx context.Context, params *CreatePackingListFromOrderParams, body CreatePackingListFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePackingListFromOrderResponse, error)

	// CreateOrderWithBodyWithResponse request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// DeleteOrderWithResponse request
	DeleteOrderWithResponse(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*DeleteOrderResponse, error)

	// GetOrderByIdWithResponse request
	GetOrderByIdWithResponse(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*GetOrderByIdResponse, error)

	// UpdateOrderWithBodyWithResponse request with any body
	UpdateOrderWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderResponse, error)

	UpdateOrderWithResponse(ctx context.Context, orderId int, body UpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderResponse, error)

	// UpdateOrderTemplateWithBodyWithResponse request with any body
	UpdateOrderTemplateWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderTemplateResponse, error)

	UpdateOrderTemplateWithResponse(ctx context.Context, orderId int, body UpdateOrderTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderTemplateResponse, error)

	// GetDiscountsWithResponse request
	GetDiscountsWithResponse(ctx context.Context, orderId int, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*GetDiscountsResponse, error)

	// OrderGetPdfWithResponse request
	OrderGetPdfWithResponse(ctx context.Context, orderId int, params *OrderGetPdfParams, reqEditors ...RequestEditorFn) (*OrderGetPdfResponse, error)

	// GetOrderPositionsByIdWithResponse request
	GetOrderPositionsByIdWithResponse(ctx context.Context, orderId int, params *GetOrderPositionsByIdParams, reqEditors ...RequestEditorFn) (*GetOrderPositionsByIdResponse, error)

	// GetRelatedObjectsWithResponse request
	GetRelatedObjectsWithResponse(ctx context.Context, orderId int, params *GetRelatedObjectsParams, reqEditors ...RequestEditorFn) (*GetRelatedObjectsResponse, error)

	// OrderSendByWithBodyWithResponse request with any body
	OrderSendByWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderSendByResponse, error)

	OrderSendByWithResponse(ctx context.Context, orderId int, body OrderSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderSendByResponse, error)

	// SendorderViaEMailWithBodyWithResponse request with any body
	SendorderViaEMailWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendorderViaEMailResponse, error)

	SendorderViaEMailWithResponse(ctx context.Context, orderId int, body SendorderViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendorderViaEMailResponse, error)

	// GetOrderPositionsWithResponse request
	GetOrderPositionsWithResponse(ctx context.Context, params *GetOrderPositionsParams, reqEditors ...RequestEditorFn) (*GetOrderPositionsResponse, error)

	// DeleteOrderPosWithResponse request
	DeleteOrderPosWithResponse(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*DeleteOrderPosResponse, error)

	// GetOrderPositionByIdWithResponse request
	GetOrderPositionByIdWithResponse(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*GetOrderPositionByIdResponse, error)

	// UpdateOrderPositionWithBodyWithResponse request with any body
	UpdateOrderPositionWithBodyWithResponse(ctx context.Context, orderPosId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderPositionResponse, error)

	UpdateOrderPositionWithResponse(ctx context.Context, orderPosId int, body UpdateOrderPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderPositionResponse, error)

	// GetPartsWithResponse request
	GetPartsWithResponse(ctx context.Context, params *GetPartsParams, reqEditors ...RequestEditorFn) (*GetPartsResponse, error)

	// CreatePartWithBodyWithResponse request with any body
	CreatePartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePartResponse, error)

	CreatePartWithResponse(ctx context.Context, body CreatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePartResponse, error)

	// GetPartByIdWithResponse request
	GetPartByIdWithResponse(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*GetPartByIdResponse, error)

	// UpdatePartWithBodyWithResponse request with any body
	UpdatePartWithBodyWithResponse(ctx context.Context, partId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartResponse, error)

	UpdatePartWithResponse(ctx context.Context, partId int, body UpdatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartResponse, error)

	// PartGetStockWithResponse request
	PartGetStockWithResponse(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*PartGetStockResponse, error)

	// ForAccountNumberWithResponse request
	ForAccountNumberWithResponse(ctx context.Context, params *ForAccountNumberParams, reqEditors ...RequestEditorFn) (*ForAccountNumberResponse, error)

	// ForAllAccountsWithResponse request
	ForAllAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForAllAccountsResponse, error)

	// ForExpenseWithResponse request
	ForExpenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForExpenseResponse, error)

	// ForRevenueWithResponse request
	ForRevenueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForRevenueResponse, error)

	// ForTaxRuleWithResponse request
	ForTaxRuleWithResponse(ctx context.Context, params *ForTaxRuleParams, reqEditors ...RequestEditorFn) (*ForTaxRuleResponse, error)

	// ReportContactWithResponse request
	ReportContactWithResponse(ctx context.Context, params *ReportContactParams, reqEditors ...RequestEditorFn) (*ReportContactResponse, error)

	// ReportInvoiceWithResponse request
	ReportInvoiceWithResponse(ctx context.Context, params *ReportInvoiceParams, reqEditors ...RequestEditorFn) (*ReportInvoiceResponse, error)

	// ReportOrderWithResponse request
	ReportOrderWithResponse(ctx context.Context, params *ReportOrderParams, reqEditors ...RequestEditorFn) (*ReportOrderResponse, error)

	// ReportVoucherWithResponse request
	ReportVoucherWithResponse(ctx context.Context, params *ReportVoucherParams, reqEditors ...RequestEditorFn) (*ReportVoucherResponse, error)

	// UpdateExportConfigWithBodyWithResponse request with any body
	UpdateExportConfigWithBodyWithResponse(ctx context.Context, sevClientId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExportConfigResponse, error)

	UpdateExportConfigWithResponse(ctx context.Context, sevClientId float32, body UpdateExportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExportConfigResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// CreateTagWithBodyWithResponse request with any body
	CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// DeleteTagWithResponse request
	DeleteTagWithResponse(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTagByIdWithResponse request
	GetTagByIdWithResponse(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*GetTagByIdResponse, error)

	// UpdateTagWithBodyWithResponse request with any body
	UpdateTagWithBodyWithResponse(ctx context.Context, tagId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	UpdateTagWithResponse(ctx context.Context, tagId int, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error)

	// GetTagRelationsWithResponse request
	GetTagRelationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagRelationsResponse, error)

	// GetPlaceholderWithResponse request
	GetPlaceholderWithResponse(ctx context.Context, params *GetPlaceholderParams, reqEditors ...RequestEditorFn) (*GetPlaceholderResponse, error)

	// BookkeepingSystemVersionWithResponse request
	BookkeepingSystemVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BookkeepingSystemVersionResponse, error)

	// GetVouchersWithResponse request
	GetVouchersWithResponse(ctx context.Context, params *GetVouchersParams, reqEditors ...RequestEditorFn) (*GetVouchersResponse, error)

	// VoucherFactorySaveVoucherWithBodyWithResponse request with any body
	VoucherFactorySaveVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VoucherFactorySaveVoucherResponse, error)

	VoucherFactorySaveVoucherWithResponse(ctx context.Context, body VoucherFactorySaveVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*VoucherFactorySaveVoucherResponse, error)

	// VoucherUploadFileWithBodyWithResponse request with any body
	VoucherUploadFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VoucherUploadFileResponse, error)

	// GetVoucherByIdWithResponse request
	GetVoucherByIdWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*GetVoucherByIdResponse, error)

	// UpdateVoucherWithBodyWithResponse request with any body
	UpdateVoucherWithBodyWithResponse(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVoucherResponse, error)

	UpdateVoucherWithResponse(ctx context.Context, voucherId int, body UpdateVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVoucherResponse, error)

	// BookVoucherWithBodyWithResponse request with any body
	BookVoucherWithBodyWithResponse(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookVoucherResponse, error)

	BookVoucherWithResponse(ctx context.Context, voucherId int, body BookVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*BookVoucherResponse, error)

	// VoucherEnshrineWithResponse request
	VoucherEnshrineWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*VoucherEnshrineResponse, error)

	// VoucherResetToDraftWithResponse request
	VoucherResetToDraftWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*VoucherResetToDraftResponse, error)

	// VoucherResetToOpenWithResponse request
	VoucherResetToOpenWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*VoucherResetToOpenResponse, error)

	// GetVoucherPositionsWithResponse request
	GetVoucherPositionsWithResponse(ctx context.Context, params *GetVoucherPositionsParams, reqEditors ...RequestEditorFn) (*GetVoucherPositionsResponse, error)
}

type GetAccountingContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelAccountingContactResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccountingContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountingContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountingContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelAccountingContactResponse
}

// Status returns HTTPResponse.Status
func (r CreateAccountingContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountingContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountingContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAccountingContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountingContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountingContactByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelAccountingContactResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAccountingContactByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountingContactByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountingContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelAccountingContactResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAccountingContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountingContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCheckAccountResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCheckAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCheckAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Objects *[]ModelCheckAccountResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateCheckAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCheckAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClearingAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Objects CheckAccount model. Showing the properties relevant to clearing accounts.
		Objects *CreateClearingAccountResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateClearingAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClearingAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFileImportAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Objects CheckAccount model. Showing the properties relevant to file import accounts.
		Objects *CreateFileImportAccountResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateFileImportAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFileImportAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCheckAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteCheckAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCheckAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckAccountByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCheckAccountResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCheckAccountByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckAccountByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCheckAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCheckAccountResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCheckAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCheckAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBalanceAtDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *string `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBalanceAtDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalanceAtDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCheckAccountTransactionResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelCheckAccountTransactionResponse
}

// Status returns HTTPResponse.Status
func (r CreateTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCheckAccountTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteCheckAccountTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCheckAccountTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckAccountTransactionByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCheckAccountTransactionResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCheckAccountTransactionByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckAccountTransactionByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCheckAccountTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCheckAccountTransactionResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCheckAccountTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCheckAccountTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckAccountTransactionEnshrineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *interface{} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}

// Status returns HTTPResponse.Status
func (r CheckAccountTransactionEnshrineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckAccountTransactionEnshrineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommunicationWaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCommunicationWayResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCommunicationWaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommunicationWaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCommunicationWayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelCommunicationWayResponse
}

// Status returns HTTPResponse.Status
func (r CreateCommunicationWayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCommunicationWayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommunicationWayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteCommunicationWayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommunicationWayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommunicationWayByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCommunicationWayResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCommunicationWayByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommunicationWayByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCommunicationWayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCommunicationWayResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCommunicationWayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCommunicationWayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommunicationWayKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]struct {
			// Create Date the communication way key was created
			Create *time.Time `json:"create,omitempty"`

			// Id The id of the communication way key
			// 1. ID: 1 - Privat
			// 2. ID: 2 - Arbeit
			// 3. ID: 3 - Fax
			// 4. ID: 4 - Mobil
			// 5. ID: 5 - " "
			// 6. ID: 6 - Autobox
			// 7. ID: 7 - Newsletter
			// 8. ID: 8 - Rechnungsadresse
			Id *string `json:"id,omitempty"`

			// Name Name of the communication way key
			Name *GetCommunicationWayKeys200ObjectsName `json:"name,omitempty"`

			// ObjectName object name which is 'CommunicationWayKey'.
			ObjectName      *string `json:"objectName,omitempty"`
			TranslationCode *string `json:"translationCode,omitempty"`

			// Upadate Date the communication way key was last updated
			Upadate *time.Time `json:"upadate,omitempty"`
		} `json:"objects,omitempty"`
	}
}
type GetCommunicationWayKeys200ObjectsName string

// Status returns HTTPResponse.Status
func (r GetCommunicationWayKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommunicationWayKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelContactResponse
}

// Status returns HTTPResponse.Status
func (r CreateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindContactsByCustomFieldValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r FindContactsByCustomFieldValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindContactsByCustomFieldValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNextCustomerNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Objects Next available customer number
		Objects *string `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetNextCustomerNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNextCustomerNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactCustomerNumberAvailabilityCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *bool `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ContactCustomerNumberAvailabilityCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactCustomerNumberAvailabilityCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelContactResponse
}

// Status returns HTTPResponse.Status
func (r UpdateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactTabsItemCountByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreditNotes *float32 `json:"creditNotes,omitempty"`
		Documents   *float32 `json:"documents,omitempty"`
		InvoicePos  *float32 `json:"invoicePos,omitempty"`
		Invoices    *float32 `json:"invoices,omitempty"`
		Letters     *float32 `json:"letters,omitempty"`
		Orders      *float32 `json:"orders,omitempty"`
		Parts       *string  `json:"parts,omitempty"`
		Persons     *float32 `json:"persons,omitempty"`
		Vouchers    *float32 `json:"vouchers,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactTabsItemCountByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactTabsItemCountByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactAddressResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContactAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelContactAddressResponse
}

// Status returns HTTPResponse.Status
func (r CreateContactAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContactAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteContactAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactAddressIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactAddressResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ContactAddressIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactAddressIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelContactAddressResponse
}

// Status returns HTTPResponse.Status
func (r UpdateContactAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactCustomFieldResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContactFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelContactCustomFieldResponse
}

// Status returns HTTPResponse.Status
func (r CreateContactFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContactFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactCustomFieldIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteContactCustomFieldIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactCustomFieldIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactFieldsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactCustomFieldResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactFieldsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactFieldsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactfieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelContactCustomFieldResponse
}

// Status returns HTTPResponse.Status
func (r UpdateContactfieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactfieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactFieldSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactCustomFieldSettingResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactFieldSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactFieldSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContactFieldSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactCustomFieldSettingResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateContactFieldSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContactFieldSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactFieldSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteContactFieldSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactFieldSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactFieldSettingByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelContactCustomFieldSettingResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactFieldSettingByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactFieldSettingByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactFieldSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelContactCustomFieldSettingResponse
}

// Status returns HTTPResponse.Status
func (r UpdateContactFieldSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactFieldSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferenceCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Objects the count of all references
		Objects *int `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetReferenceCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferenceCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCreditNoteResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCreditNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCreditNoteFromInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Objects *struct {
			// CreditNote creditNote model
			CreditNote *ModelCreditNoteResponse `json:"creditNote,omitempty"`

			// CreditNotePos An array of creditNote positions
			CreditNotePos *[]ModelCreditNotePosResponse `json:"creditNotePos,omitempty"`

			// Discount An array of discounts (can be empty)
			Discount *[]ModelDiscountsResponse `json:"discount,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateCreditNoteFromInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCreditNoteFromInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCreditNoteFromVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Objects *struct {
			// CreditNote creditNote model
			CreditNote *ModelCreditNoteResponse `json:"creditNote,omitempty"`

			// CreditNotePos An array of creditNote positions
			CreditNotePos *[]ModelCreditNotePosResponse `json:"creditNotePos,omitempty"`

			// Discount An array of discounts (can be empty)
			Discount *[]ModelDiscountsResponse `json:"discount,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateCreditNoteFromVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCreditNoteFromVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatecreditNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SaveCreditNoteResponse
}

// Status returns HTTPResponse.Status
func (r CreatecreditNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatecreditNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletecreditNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletecreditNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletecreditNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetcreditNoteByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCreditNoteResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetcreditNoteByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetcreditNoteByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatecreditNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCreditNoteResponse
}

// Status returns HTTPResponse.Status
func (r UpdatecreditNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatecreditNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BookCreditNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalInformation *string    `json:"additionalInformation,omitempty"`
		AmmountPayed          *string    `json:"ammountPayed,omitempty"`
		BookingDate           *time.Time `json:"bookingDate,omitempty"`

		// Create Date of email creation
		Create     *time.Time `json:"create,omitempty"`
		CreditNote *struct {
			// Id The id of the credit note
			Id int `json:"id"`

			// ObjectName Internal object name which is 'CreditNote'.
			ObjectName string `json:"objectName"`
		} `json:"creditNote,omitempty"`
		FromStatus *string `json:"fromStatus,omitempty"`
		Id         *string `json:"id,omitempty"`
		ObjectName *string `json:"objectName,omitempty"`

		// SevClient Client to which creditNote belongs. Will be filled automatically
		SevClient *struct {
			// Id Unique identifier of the client
			Id int `json:"id"`

			// ObjectName Model name, which is 'SevClient'
			ObjectName string `json:"objectName"`
		} `json:"sevClient,omitempty"`
		ToStatus *string `json:"toStatus,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r BookCreditNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BookCreditNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCreditNoteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelChangeLayoutResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCreditNoteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCreditNoteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreditNoteEnshrineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *interface{} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}

// Status returns HTTPResponse.Status
func (r CreditNoteEnshrineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreditNoteEnshrineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreditNoteGetPdfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Base64encoded *bool               `json:"base64encoded,omitempty"`
		Content       *openapi_types.File `json:"content,omitempty"`
		Filename      *string             `json:"filename,omitempty"`
		MimeType      *string             `json:"mimeType,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreditNoteGetPdfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreditNoteGetPdfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreditNoteResetToDraftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			// Address Complete address of the recipient including name, street, city, zip and country.<br>
			//      Line breaks can be used and will be displayed on the invoice pdf.
			Address *string `json:"address"`

			// AddressCountry Can be omitted as complete address is defined in address attribute
			AddressCountry *struct {
				// Id Unique identifier of the country
				Id string `json:"id"`

				// ObjectName Model name, which is 'StaticCountry'
				ObjectName string `json:"objectName"`
			} `json:"addressCountry"`

			// Contact The contact used in the creditNote
			Contact *struct {
				// Id Unique identifier of the contact
				Id string `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact"`

			// ContactPerson The user who acts as a contact person for the creditNote
			ContactPerson *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"contactPerson"`

			// Create Date of creditNote creation
			Create *time.Time `json:"create,omitempty"`

			// CreateUser Will be filled automatically by our system and can't be changed
			CreateUser *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"createUser,omitempty"`

			// CreditNoteDate The credit note date
			CreditNoteDate *time.Time `json:"creditNoteDate,omitempty"`

			// CreditNoteNumber The creditNote number
			CreditNoteNumber *string `json:"creditNoteNumber"`

			// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
			Currency             *string      `json:"currency"`
			CustomerInternalNote *interface{} `json:"customerInternalNote,omitempty"`

			// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
			DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

			// FootText Certain html tags can be used here to format your text
			FootText *string `json:"footText"`

			// HeadText Certain html tags can be used here to format your text
			HeadText *string `json:"headText"`

			// Header Normally consist of prefix plus the creditNote number
			Header *string `json:"header"`

			// Id The creditNote id
			Id *string `json:"id,omitempty"`

			// ObjectName The creditNote object name
			ObjectName *string `json:"objectName,omitempty"`

			// SendDate The date the creditNote was sent to the customer
			SendDate *time.Time `json:"sendDate"`

			// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
			//      *     API-Overview to understand how this attribute can be used before using it!
			SendType *CreditNoteResetToDraft200ObjectsSendType `json:"sendType"`

			// SevClient Client to which creditNote belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`

			// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
			ShowNet *bool `json:"showNet,omitempty"`

			// SmallSettlement Defines if the client uses the small settlement scheme.
			//     If yes, the creditNote must not contain any vat
			SmallSettlement *bool `json:"smallSettlement"`

			// Status Please have a look in
			//     <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
			//     to see what the different status codes mean
			Status *CreditNoteResetToDraft200ObjectsStatus `json:"status,omitempty"`

			// SumDiscounts Sum of all discounts in the creditNote
			SumDiscounts *string `json:"sumDiscounts,omitempty"`

			// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
			SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

			// SumGross Gross sum of the creditNote
			SumGross *string `json:"sumGross,omitempty"`

			// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
			SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

			// SumNet Net sum of the creditNote
			SumNet *string `json:"sumNet,omitempty"`

			// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
			SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

			// SumTax Tax sum of the creditNote
			SumTax *string `json:"sumTax,omitempty"`

			// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
			SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

			// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
			TaxRate *string `json:"taxRate"`

			// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			TaxRule *struct {
				// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Defines the vat-regulation.
				// For "Regelbesteuerung" it can be one of:
				//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
				//   - `2` - Ausfuhren - allowedTaxRates: 0.0
				//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
				//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
				//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
				//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
				//
				// For small business owner ("Kleinunternehmer") it can be:
				//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
				Id CreditNoteResetToDraft200ObjectsTaxRuleId `json:"id"`

				// ObjectName Name of the object. Must always be TaxRule
				ObjectName CreditNoteResetToDraft200ObjectsTaxRuleObjectName `json:"objectName"`
			} `json:"taxRule,omitempty"`

			// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax set of the creditNote. Needs to be added if you chose the tax type custom
			TaxSet *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name, which is 'TaxSet'
				ObjectName string `json:"objectName"`
			} `json:"taxSet"`
			TaxText *interface{} `json:"taxText,omitempty"`

			// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax type of the creditNote.
			// There are four tax types:
			// 1. default - Umsatzsteuer ausweisen
			// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
			// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
			// 4. custom - Using custom tax set
			// 5. ss - Not subject to VAT according to §19 1 UStG
			// Tax rates are heavily connected to the tax type used.
			TaxType *string `json:"taxType"`

			// Update Date of last creditNote update
			Update *time.Time `json:"update,omitempty"`
		} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}
type CreditNoteResetToDraft200ObjectsSendType string
type CreditNoteResetToDraft200ObjectsStatus string
type CreditNoteResetToDraft200ObjectsTaxRuleId string
type CreditNoteResetToDraft200ObjectsTaxRuleObjectName string

// Status returns HTTPResponse.Status
func (r CreditNoteResetToDraftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreditNoteResetToDraftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreditNoteResetToOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			// Address Complete address of the recipient including name, street, city, zip and country.<br>
			//      Line breaks can be used and will be displayed on the invoice pdf.
			Address *string `json:"address"`

			// AddressCountry Can be omitted as complete address is defined in address attribute
			AddressCountry *struct {
				// Id Unique identifier of the country
				Id string `json:"id"`

				// ObjectName Model name, which is 'StaticCountry'
				ObjectName string `json:"objectName"`
			} `json:"addressCountry"`

			// Contact The contact used in the creditNote
			Contact *struct {
				// Id Unique identifier of the contact
				Id string `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact"`

			// ContactPerson The user who acts as a contact person for the creditNote
			ContactPerson *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"contactPerson"`

			// Create Date of creditNote creation
			Create *time.Time `json:"create,omitempty"`

			// CreateUser Will be filled automatically by our system and can't be changed
			CreateUser *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"createUser,omitempty"`

			// CreditNoteDate The credit note date
			CreditNoteDate *time.Time `json:"creditNoteDate,omitempty"`

			// CreditNoteNumber The creditNote number
			CreditNoteNumber *string `json:"creditNoteNumber"`

			// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
			Currency *string `json:"currency"`

			// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
			CustomerInternalNote *string `json:"customerInternalNote"`

			// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
			DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

			// FootText Certain html tags can be used here to format your text
			FootText *string `json:"footText"`

			// HeadText Certain html tags can be used here to format your text
			HeadText *string `json:"headText"`

			// Header Normally consist of prefix plus the creditNote number
			Header *string `json:"header"`

			// Id The creditNote id
			Id *string `json:"id,omitempty"`

			// ObjectName The creditNote object name
			ObjectName *string `json:"objectName,omitempty"`

			// SendDate The date the creditNote was sent to the customer
			SendDate *time.Time `json:"sendDate"`

			// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
			//      *     API-Overview to understand how this attribute can be used before using it!
			SendType *CreditNoteResetToOpen200ObjectsSendType `json:"sendType"`

			// SevClient Client to which creditNote belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`

			// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
			ShowNet *bool `json:"showNet,omitempty"`

			// SmallSettlement Defines if the client uses the small settlement scheme.
			//     If yes, the creditNote must not contain any vat
			SmallSettlement *bool        `json:"smallSettlement"`
			Status          *interface{} `json:"status,omitempty"`

			// SumDiscounts Sum of all discounts in the creditNote
			SumDiscounts *string `json:"sumDiscounts,omitempty"`

			// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
			SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

			// SumGross Gross sum of the creditNote
			SumGross *string `json:"sumGross,omitempty"`

			// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
			SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

			// SumNet Net sum of the creditNote
			SumNet *string `json:"sumNet,omitempty"`

			// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
			SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

			// SumTax Tax sum of the creditNote
			SumTax *string `json:"sumTax,omitempty"`

			// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
			SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

			// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
			TaxRate *string `json:"taxRate"`

			// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			TaxRule *struct {
				// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Defines the vat-regulation.
				// For "Regelbesteuerung" it can be one of:
				//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
				//   - `2` - Ausfuhren - allowedTaxRates: 0.0
				//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
				//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
				//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
				//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
				//
				// For small business owner ("Kleinunternehmer") it can be:
				//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
				Id CreditNoteResetToOpen200ObjectsTaxRuleId `json:"id"`

				// ObjectName Name of the object. Must always be TaxRule
				ObjectName CreditNoteResetToOpen200ObjectsTaxRuleObjectName `json:"objectName"`
			} `json:"taxRule,omitempty"`

			// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax set of the creditNote. Needs to be added if you chose the tax type custom
			TaxSet *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name, which is 'TaxSet'
				ObjectName string `json:"objectName"`
			} `json:"taxSet"`

			// TaxText A common tax text would be 'Umsatzsteuer 19%'
			TaxText *string `json:"taxText"`

			// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax type of the creditNote.
			// There are four tax types:
			// 1. default - Umsatzsteuer ausweisen
			// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
			// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
			// 4. custom - Using custom tax set
			// 5. ss - Not subject to VAT according to §19 1 UStG
			// Tax rates are heavily connected to the tax type used.
			TaxType *string `json:"taxType"`

			// Update Date of last creditNote update
			Update *time.Time `json:"update,omitempty"`
		} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}
type CreditNoteResetToOpen200ObjectsSendType string
type CreditNoteResetToOpen200ObjectsTaxRuleId string
type CreditNoteResetToOpen200ObjectsTaxRuleObjectName string

// Status returns HTTPResponse.Status
func (r CreditNoteResetToOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreditNoteResetToOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreditNoteSendByResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCreditNoteResponse
}

// Status returns HTTPResponse.Status
func (r CreditNoteSendByResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreditNoteSendByResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendCreditNoteByPrintingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelCreditNoteSendByWithRender
}

// Status returns HTTPResponse.Status
func (r SendCreditNoteByPrintingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendCreditNoteByPrintingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendCreditNoteViaEMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Objects *[]ModelCreditNoteMailResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SendCreditNoteViaEMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendCreditNoteViaEMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetcreditNotePositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelCreditNotePosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetcreditNotePositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetcreditNotePositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLetterpapersWithThumbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Letterpapers *[]struct {
			Default   *int    `json:"default,omitempty"`
			Id        *string `json:"id,omitempty"`
			Img       *string `json:"img,omitempty"`
			Name      *string `json:"name,omitempty"`
			Pdf       *string `json:"pdf,omitempty"`
			SevClient *string `json:"sevClient,omitempty"`
		} `json:"letterpapers,omitempty"`
		Result *string `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLetterpapersWithThumbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLetterpapersWithThumbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result    *string `json:"result,omitempty"`
		Templates *[]struct {
			Default         *int    `json:"default,omitempty"`
			Html            *string `json:"html,omitempty"`
			Id              *string `json:"id,omitempty"`
			Name            *string `json:"name,omitempty"`
			Premium         *bool   `json:"premium,omitempty"`
			SevClient       *string `json:"sevClient,omitempty"`
			TranslationCode *string `json:"translationCode,omitempty"`
			Type            *string `json:"type,omitempty"`
		} `json:"templates,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportCreditNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportCreditNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportCreditNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportDatevResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ExportDatevResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportDatevResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportInvoiceZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportInvoiceZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportInvoiceZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Base64Encoded *bool   `json:"base64Encoded,omitempty"`
		Content       *string `json:"content,omitempty"`
		Filename      *string `json:"filename,omitempty"`
		Mimetype      *string `json:"mimetype,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportVoucherZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportVoucherZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportVoucherZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelInvoiceResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInvoiceFromOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvoiceFromOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvoiceFromOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInvoiceReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvoiceReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvoiceReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInvoiceByFactoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SaveInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvoiceByFactoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvoiceByFactoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelInvoiceResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInvoiceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BookInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalInformation *string    `json:"additionalInformation,omitempty"`
		AmmountPayed          *string    `json:"ammountPayed,omitempty"`
		BookingDate           *time.Time `json:"bookingDate,omitempty"`

		// Create Date of email creation
		Create     *time.Time `json:"create,omitempty"`
		CreditNote *struct {
			// Id The id of the invoice
			Id int `json:"id"`

			// ObjectName Internal object name which is 'Invoice'.
			ObjectName string `json:"objectName"`
		} `json:"creditNote,omitempty"`
		FromStatus *string `json:"fromStatus,omitempty"`
		Id         *string `json:"id,omitempty"`
		ObjectName *string `json:"objectName,omitempty"`

		// SevClient Client to which invoice belongs. Will be filled automatically
		SevClient *struct {
			// Id Unique identifier of the client
			Id int `json:"id"`

			// ObjectName Model name, which is 'SevClient'
			ObjectName string `json:"objectName"`
		} `json:"sevClient,omitempty"`
		ToStatus *string `json:"toStatus,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r BookInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BookInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r CancelInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInvoiceTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelChangeLayoutResponse
}

// Status returns HTTPResponse.Status
func (r UpdateInvoiceTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInvoiceTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceEnshrineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *interface{} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}

// Status returns HTTPResponse.Status
func (r InvoiceEnshrineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceEnshrineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIsInvoicePartiallyPaidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *bool `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIsInvoicePartiallyPaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIsInvoicePartiallyPaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceGetPdfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Base64encoded *bool               `json:"base64encoded,omitempty"`
		Content       *openapi_types.File `json:"content,omitempty"`
		Filename      *string             `json:"filename,omitempty"`
		MimeType      *string             `json:"mimeType,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r InvoiceGetPdfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceGetPdfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicePositionsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelInvoicePosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInvoicePositionsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicePositionsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceGetXmlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Object *string `json:"object,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r InvoiceGetXmlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceGetXmlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceRenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		DocId      *string `json:"docId,omitempty"`
		Pages      *int    `json:"pages,omitempty"`
		Parameters *[]struct {
			Key    *string `json:"key,omitempty"`
			Name   *string `json:"name,omitempty"`
			Value  *string `json:"value,omitempty"`
			Values *[]struct {
				Name            *string `json:"name,omitempty"`
				TranslationCade *string `json:"translationCade,omitempty"`
				Value           *string `json:"value,omitempty"`
			} `json:"values,omitempty"`
			Visible *bool `json:"visible,omitempty"`
		} `json:"parameters,omitempty"`
		Thumbs *[]interface{} `json:"thumbs,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r InvoiceRenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceRenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceResetToDraftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			AccountIntervall   *interface{} `json:"accountIntervall,omitempty"`
			AccountNextInvoice *interface{} `json:"accountNextInvoice,omitempty"`

			// Address Complete address of the recipient including name, street, city, zip and country.
			//      * Line breaks can be used and will be displayed on the invoice pdf.
			Address *string `json:"address,omitempty"`

			// AddressCountry Can be omitted as complete address is defined in address attribute
			AddressCountry *struct {
				// Id Unique identifier of the country
				Id string `json:"id"`

				// ObjectName Model name, which is 'StaticCountry'
				ObjectName string `json:"objectName"`
			} `json:"addressCountry,omitempty"`

			// Contact The contact used in the invoice
			Contact *struct {
				// Id Unique identifier of the contact
				Id string `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// ContactPerson The user who acts as a contact person for the invoice
			ContactPerson *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"contactPerson,omitempty"`

			// CostCentre Cost centre for the invoice
			CostCentre *struct {
				// Id Unique identifier of the cost centre
				Id string `json:"id"`

				// ObjectName Model name, which is 'CostCentre'
				ObjectName string `json:"objectName"`
			} `json:"costCentre,omitempty"`

			// Create Date of invoice creation
			Create *time.Time `json:"create,omitempty"`

			// CreateUser Will be filled automatically by our system and can't be changed
			CreateUser *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"createUser,omitempty"`

			// Currency Currency used in the invoice. Needs to be currency code according to ISO-4217
			Currency *string `json:"currency,omitempty"`

			// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
			CustomerInternalNote *string `json:"customerInternalNote,omitempty"`

			// DatevConnectOnline Internal attribute
			DatevConnectOnline *map[string]interface{} `json:"datevConnectOnline,omitempty"`

			// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
			DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

			// DeliveryDateUntil If the delivery date should be a time range, another timestamp can be provided in this attribute
			//      * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
			DeliveryDateUntil *string `json:"deliveryDateUntil,omitempty"`

			// Discount If you want to give a discount, define the percentage here. Otherwise provide zero as value
			Discount *string `json:"discount,omitempty"`

			// DiscountTime If a value other than zero is used for the discount attribute,
			//     you need to specify the amount of days for which the discount is granted.
			DiscountTime *string `json:"discountTime,omitempty"`

			// DunningLevel Defines how many reminders have already been sent for the invoice.
			//     Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
			DunningLevel *string      `json:"dunningLevel,omitempty"`
			Enshrined    *interface{} `json:"enshrined,omitempty"`

			// FootText Certain html tags can be used here to format your text
			FootText *string `json:"footText,omitempty"`

			// HeadText Certain html tags can be used here to format your text
			HeadText *string `json:"headText,omitempty"`

			// Header Normally consist of prefix plus the invoice number
			Header *string `json:"header,omitempty"`

			// Id The invoice id
			Id *string `json:"id,omitempty"`

			// InvoiceDate The invoice date.
			InvoiceDate *string `json:"invoiceDate,omitempty"`

			// InvoiceNumber The invoice number
			InvoiceNumber *string `json:"invoiceNumber,omitempty"`

			// InvoiceType Type of the invoice. For more information on the different types, check
			//      <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
			InvoiceType *InvoiceResetToDraft200ObjectsInvoiceType `json:"invoiceType,omitempty"`

			// ObjectName The invoice object name
			ObjectName *string `json:"objectName,omitempty"`

			// Origin Origin of the invoice. Could f.e. be an order
			Origin *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name. Could f.e. be 'Order''
				ObjectName string `json:"objectName"`
			} `json:"origin,omitempty"`

			// PaidAmount Amount which has already been paid for this invoice by the customer
			PaidAmount *float32     `json:"paidAmount,omitempty"`
			PayDate    *interface{} `json:"payDate,omitempty"`

			// PaymentMethod Payment method used for the invoice
			PaymentMethod *struct {
				// Id Unique identifier of the payment method
				Id string `json:"id"`

				// ObjectName Model name, which is 'PaymentMethod'
				ObjectName string `json:"objectName"`
			} `json:"paymentMethod,omitempty"`

			// ReminderCharge The additional reminder charge
			ReminderCharge *string `json:"reminderCharge,omitempty"`

			// ReminderDeadline Deadline of the reminder as timestamp
			ReminderDeadline *time.Time `json:"reminderDeadline,omitempty"`

			// ReminderDebit Debit of the reminder
			ReminderDebit *string `json:"reminderDebit,omitempty"`

			// ReminderTotal Total reminder amount
			ReminderTotal *string `json:"reminderTotal,omitempty"`

			// SendDate The date the invoice was sent to the customer
			SendDate *time.Time `json:"sendDate,omitempty"`

			// SendPaymentReceivedNotificationDate Internal attribute
			SendPaymentReceivedNotificationDate *string `json:"sendPaymentReceivedNotificationDate,omitempty"`

			// SendType Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
			//      *     API-Overview to understand how this attribute can be used before using it!
			SendType *InvoiceResetToDraft200ObjectsSendType `json:"sendType,omitempty"`

			// SevClient Client to which invoice belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`

			// ShowNet If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
			ShowNet *bool `json:"showNet,omitempty"`

			// SmallSettlement Defines if the client uses the small settlement scheme.
			//     If yes, the invoice must not contain any vat
			SmallSettlement *bool `json:"smallSettlement,omitempty"`

			// Status Please have a look in our
			//      <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
			//      to see what the different status codes mean
			Status *InvoiceResetToDraft200ObjectsStatus `json:"status,omitempty"`

			// SumDiscounts Sum of all discounts in the invoice
			SumDiscounts *string `json:"sumDiscounts,omitempty"`

			// SumDiscountsForeignCurrency Discounts sum of the invoice in the foreign currency
			SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

			// SumGross Gross sum of the invoice
			SumGross *string `json:"sumGross,omitempty"`

			// SumGrossAccounting Gross accounting sum of the invoice. Is usually the same as sumGross
			SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

			// SumGrossForeignCurrency Gross sum of the invoice in the foreign currency
			SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

			// SumNet Net sum of the invoice
			SumNet *string `json:"sumNet,omitempty"`

			// SumNetAccounting Net accounting sum of the invoice. Is usually the same as sumNet
			SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

			// SumNetForeignCurrency Net sum of the invoice in the foreign currency
			SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

			// SumTax Tax sum of the invoice
			SumTax *string `json:"sumTax,omitempty"`

			// SumTaxAccounting Tax accounting sum of the invoice. Is usually the same as sumTax
			SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

			// SumTaxForeignCurrency Tax sum of the invoice in the foreign currency
			SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

			// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
			TaxRate *string `json:"taxRate,omitempty"`

			// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			TaxRule *struct {
				// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Defines the vat-regulation.
				// For "Regelbesteuerung" it can be one of:
				//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
				//   - `2` - Ausfuhren - allowedTaxRates: 0.0
				//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
				//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
				//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
				//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
				//     - "Nicht im Inland steuerbare Leistung" is not available for:
				//       - advance invoice (`"invoiceType": "AR"`)
				//       - partial invoice (`"invoiceType": "TR"`)
				//       - final invoice (`"invoiceType": "ER"`)
				//
				// For small business owner ("Kleinunternehmer") it can be:
				//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
				Id InvoiceResetToDraft200ObjectsTaxRuleId `json:"id"`

				// ObjectName Name of the object. Must always be TaxRule
				ObjectName InvoiceResetToDraft200ObjectsTaxRuleObjectName `json:"objectName"`
			} `json:"taxRule,omitempty"`

			// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax set of the invoice. Needs to be added if you chose the tax type custom
			TaxSet *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name, which is 'TaxSet'
				ObjectName string `json:"objectName"`
			} `json:"taxSet,omitempty"`

			// TaxText A common tax text would be 'Umsatzsteuer 19%'
			TaxText *string `json:"taxText,omitempty"`

			// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax type of the invoice.
			// There are four tax types:
			// 1. default - Umsatzsteuer ausweisen
			// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
			// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
			// 4. custom - Using custom tax set
			// 5. ss - Not subject to VAT according to §19 1 UStG
			// Tax rates are heavily connected to the tax type used.
			TaxType *InvoiceResetToDraft200ObjectsTaxType `json:"taxType,omitempty"`

			// TimeToPay The time the customer has to pay the invoice in days
			TimeToPay *string `json:"timeToPay,omitempty"`

			// Update Date of last invoice update
			Update *time.Time `json:"update,omitempty"`
		} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}
type InvoiceResetToDraft200ObjectsInvoiceType string
type InvoiceResetToDraft200ObjectsSendType string
type InvoiceResetToDraft200ObjectsStatus string
type InvoiceResetToDraft200ObjectsTaxRuleId string
type InvoiceResetToDraft200ObjectsTaxRuleObjectName string
type InvoiceResetToDraft200ObjectsTaxType string

// Status returns HTTPResponse.Status
func (r InvoiceResetToDraftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceResetToDraftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceResetToOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			AccountIntervall   *interface{} `json:"accountIntervall,omitempty"`
			AccountNextInvoice *interface{} `json:"accountNextInvoice,omitempty"`

			// Address Complete address of the recipient including name, street, city, zip and country.
			//      * Line breaks can be used and will be displayed on the invoice pdf.
			Address *string `json:"address,omitempty"`

			// AddressCountry Can be omitted as complete address is defined in address attribute
			AddressCountry *struct {
				// Id Unique identifier of the country
				Id string `json:"id"`

				// ObjectName Model name, which is 'StaticCountry'
				ObjectName string `json:"objectName"`
			} `json:"addressCountry,omitempty"`

			// Contact The contact used in the invoice
			Contact *struct {
				// Id Unique identifier of the contact
				Id string `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"contact,omitempty"`

			// ContactPerson The user who acts as a contact person for the invoice
			ContactPerson *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"contactPerson,omitempty"`

			// CostCentre Cost centre for the invoice
			CostCentre *struct {
				// Id Unique identifier of the cost centre
				Id string `json:"id"`

				// ObjectName Model name, which is 'CostCentre'
				ObjectName string `json:"objectName"`
			} `json:"costCentre,omitempty"`

			// Create Date of invoice creation
			Create *time.Time `json:"create,omitempty"`

			// CreateUser Will be filled automatically by our system and can't be changed
			CreateUser *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"createUser,omitempty"`

			// Currency Currency used in the invoice. Needs to be currency code according to ISO-4217
			Currency *string `json:"currency,omitempty"`

			// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
			CustomerInternalNote *string `json:"customerInternalNote,omitempty"`

			// DatevConnectOnline Internal attribute
			DatevConnectOnline *map[string]interface{} `json:"datevConnectOnline,omitempty"`

			// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
			DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

			// DeliveryDateUntil If the delivery date should be a time range, another timestamp can be provided in this attribute
			//      * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
			DeliveryDateUntil *string `json:"deliveryDateUntil,omitempty"`

			// Discount If you want to give a discount, define the percentage here. Otherwise provide zero as value
			Discount *string `json:"discount,omitempty"`

			// DiscountTime If a value other than zero is used for the discount attribute,
			//     you need to specify the amount of days for which the discount is granted.
			DiscountTime *string `json:"discountTime,omitempty"`

			// DunningLevel Defines how many reminders have already been sent for the invoice.
			//     Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
			DunningLevel *string      `json:"dunningLevel,omitempty"`
			Enshrined    *interface{} `json:"enshrined,omitempty"`

			// FootText Certain html tags can be used here to format your text
			FootText *string `json:"footText,omitempty"`

			// HeadText Certain html tags can be used here to format your text
			HeadText *string `json:"headText,omitempty"`

			// Header Normally consist of prefix plus the invoice number
			Header *string `json:"header,omitempty"`

			// Id The invoice id
			Id *string `json:"id,omitempty"`

			// InvoiceDate The invoice date.
			InvoiceDate *string `json:"invoiceDate,omitempty"`

			// InvoiceNumber The invoice number
			InvoiceNumber *string `json:"invoiceNumber,omitempty"`

			// InvoiceType Type of the invoice. For more information on the different types, check
			//      <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
			InvoiceType *InvoiceResetToOpen200ObjectsInvoiceType `json:"invoiceType,omitempty"`

			// ObjectName The invoice object name
			ObjectName *string `json:"objectName,omitempty"`

			// Origin Origin of the invoice. Could f.e. be an order
			Origin *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name. Could f.e. be 'Order''
				ObjectName string `json:"objectName"`
			} `json:"origin,omitempty"`

			// PaidAmount Amount which has already been paid for this invoice by the customer
			PaidAmount *float32     `json:"paidAmount,omitempty"`
			PayDate    *interface{} `json:"payDate,omitempty"`

			// PaymentMethod Payment method used for the invoice
			PaymentMethod *struct {
				// Id Unique identifier of the payment method
				Id string `json:"id"`

				// ObjectName Model name, which is 'PaymentMethod'
				ObjectName string `json:"objectName"`
			} `json:"paymentMethod,omitempty"`

			// ReminderCharge The additional reminder charge
			ReminderCharge *string `json:"reminderCharge,omitempty"`

			// ReminderDeadline Deadline of the reminder as timestamp
			ReminderDeadline *time.Time `json:"reminderDeadline,omitempty"`

			// ReminderDebit Debit of the reminder
			ReminderDebit *string `json:"reminderDebit,omitempty"`

			// ReminderTotal Total reminder amount
			ReminderTotal *string `json:"reminderTotal,omitempty"`

			// SendDate The date the invoice was sent to the customer
			SendDate *time.Time `json:"sendDate,omitempty"`

			// SendPaymentReceivedNotificationDate Internal attribute
			SendPaymentReceivedNotificationDate *string `json:"sendPaymentReceivedNotificationDate,omitempty"`

			// SendType Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
			//      *     API-Overview to understand how this attribute can be used before using it!
			SendType *InvoiceResetToOpen200ObjectsSendType `json:"sendType,omitempty"`

			// SevClient Client to which invoice belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`

			// ShowNet If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
			ShowNet *bool `json:"showNet,omitempty"`

			// SmallSettlement Defines if the client uses the small settlement scheme.
			//     If yes, the invoice must not contain any vat
			SmallSettlement *bool        `json:"smallSettlement,omitempty"`
			Status          *interface{} `json:"status,omitempty"`

			// SumDiscounts Sum of all discounts in the invoice
			SumDiscounts *string `json:"sumDiscounts,omitempty"`

			// SumDiscountsForeignCurrency Discounts sum of the invoice in the foreign currency
			SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

			// SumGross Gross sum of the invoice
			SumGross *string `json:"sumGross,omitempty"`

			// SumGrossAccounting Gross accounting sum of the invoice. Is usually the same as sumGross
			SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

			// SumGrossForeignCurrency Gross sum of the invoice in the foreign currency
			SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

			// SumNet Net sum of the invoice
			SumNet *string `json:"sumNet,omitempty"`

			// SumNetAccounting Net accounting sum of the invoice. Is usually the same as sumNet
			SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

			// SumNetForeignCurrency Net sum of the invoice in the foreign currency
			SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

			// SumTax Tax sum of the invoice
			SumTax *string `json:"sumTax,omitempty"`

			// SumTaxAccounting Tax accounting sum of the invoice. Is usually the same as sumTax
			SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

			// SumTaxForeignCurrency Tax sum of the invoice in the foreign currency
			SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

			// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
			TaxRate *string `json:"taxRate,omitempty"`

			// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			TaxRule *struct {
				// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Defines the vat-regulation.
				// For "Regelbesteuerung" it can be one of:
				//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
				//   - `2` - Ausfuhren - allowedTaxRates: 0.0
				//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
				//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
				//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
				//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
				//     - "Nicht im Inland steuerbare Leistung" is not available for:
				//       - advance invoice (`"invoiceType": "AR"`)
				//       - partial invoice (`"invoiceType": "TR"`)
				//       - final invoice (`"invoiceType": "ER"`)
				//
				// For small business owner ("Kleinunternehmer") it can be:
				//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
				Id InvoiceResetToOpen200ObjectsTaxRuleId `json:"id"`

				// ObjectName Name of the object. Must always be TaxRule
				ObjectName InvoiceResetToOpen200ObjectsTaxRuleObjectName `json:"objectName"`
			} `json:"taxRule,omitempty"`

			// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax set of the invoice. Needs to be added if you chose the tax type custom
			TaxSet *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name, which is 'TaxSet'
				ObjectName string `json:"objectName"`
			} `json:"taxSet,omitempty"`

			// TaxText A common tax text would be 'Umsatzsteuer 19%'
			TaxText *string `json:"taxText,omitempty"`

			// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax type of the invoice.
			// There are four tax types:
			// 1. default - Umsatzsteuer ausweisen
			// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
			// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
			// 4. custom - Using custom tax set
			// 5. ss - Not subject to VAT according to §19 1 UStG
			// Tax rates are heavily connected to the tax type used.
			TaxType *InvoiceResetToOpen200ObjectsTaxType `json:"taxType,omitempty"`

			// TimeToPay The time the customer has to pay the invoice in days
			TimeToPay *string `json:"timeToPay,omitempty"`

			// Update Date of last invoice update
			Update *time.Time `json:"update,omitempty"`
		} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}
type InvoiceResetToOpen200ObjectsInvoiceType string
type InvoiceResetToOpen200ObjectsSendType string
type InvoiceResetToOpen200ObjectsTaxRuleId string
type InvoiceResetToOpen200ObjectsTaxRuleObjectName string
type InvoiceResetToOpen200ObjectsTaxType string

// Status returns HTTPResponse.Status
func (r InvoiceResetToOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceResetToOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvoiceSendByResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelInvoiceResponse
}

// Status returns HTTPResponse.Status
func (r InvoiceSendByResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvoiceSendByResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendInvoiceViaEMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelEmail
}

// Status returns HTTPResponse.Status
func (r SendInvoiceViaEMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendInvoiceViaEMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicePosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelInvoicePosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInvoicePosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicePosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelOrderResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContractNoteFromOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelOrderResponse
}

// Status returns HTTPResponse.Status
func (r CreateContractNoteFromOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContractNoteFromOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePackingListFromOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelOrderResponse
}

// Status returns HTTPResponse.Status
func (r CreatePackingListFromOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePackingListFromOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SaveOrderResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelOrderResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelOrderResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelChangeLayoutResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrderTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiscountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelDiscount `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDiscountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderGetPdfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Base64encoded *bool               `json:"base64encoded,omitempty"`
		Content       *openapi_types.File `json:"content,omitempty"`
		Filename      *string             `json:"filename,omitempty"`
		MimeType      *string             `json:"mimeType,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r OrderGetPdfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderGetPdfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderPositionsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderPositionsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderPositionsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelatedObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRelatedObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelatedObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderSendByResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderSendByResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderSendByResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendorderViaEMailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Objects *[]ModelEmailOrder `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SendorderViaEMailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendorderViaEMailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrderPosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteOrderPosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrderPosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderPositionByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderPositionByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderPositionByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelOrderPosResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrderPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelPart `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModelPart
}

// Status returns HTTPResponse.Status
func (r CreatePartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelPart `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPartByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelPart
}

// Status returns HTTPResponse.Status
func (r UpdatePartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartGetStockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Objects Stock amount
		Objects *int `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PartGetStockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartGetStockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForAccountNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ForAccountNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForAccountNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForAllAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ForAllAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForAllAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForExpenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ForExpenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForExpenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForRevenueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ForRevenueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForRevenueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForTaxRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ForTaxRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForTaxRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReportContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReportInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReportOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReportVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateExportConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateExportConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateExportConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelTagResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelTagCreateResponse
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]interface{} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelTagResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelTagResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelTagCreateResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaceholderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelTextparserFetchDictionaryEntriesByTypeResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlaceholderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaceholderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BookkeepingSystemVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			Version *BookkeepingSystemVersion200ObjectsVersion `json:"version,omitempty"`
		} `json:"objects,omitempty"`
	}
}
type BookkeepingSystemVersion200ObjectsVersion string

// Status returns HTTPResponse.Status
func (r BookkeepingSystemVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BookkeepingSystemVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVouchersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelVoucherResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVouchersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVouchersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoucherFactorySaveVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SaveVoucherResponse
	JSON422      *ValidationError
}

// Status returns HTTPResponse.Status
func (r VoucherFactorySaveVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoucherFactorySaveVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoucherUploadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Objects *struct {
			Content        *[]interface{} `json:"content,omitempty"`
			ContentHash    *string        `json:"contentHash,omitempty"`
			Filename       *string        `json:"filename,omitempty"`
			MimeType       *string        `json:"mimeType,omitempty"`
			OriginMimeType *string        `json:"originMimeType,omitempty"`
			Pages          *float32       `json:"pages,omitempty"`
		} `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r VoucherUploadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoucherUploadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoucherByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelVoucherResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVoucherByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoucherByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelVoucherResponse
}

// Status returns HTTPResponse.Status
func (r UpdateVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BookVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalInformation *string    `json:"additionalInformation,omitempty"`
		AmmountPayed          *string    `json:"ammountPayed,omitempty"`
		BookingDate           *time.Time `json:"bookingDate,omitempty"`

		// Create Date of email creation
		Create     *time.Time `json:"create,omitempty"`
		CreditNote *struct {
			// Id The id of the voucher
			Id int `json:"id"`

			// ObjectName Internal object name which is 'Voucher'.
			ObjectName string `json:"objectName"`
		} `json:"creditNote,omitempty"`
		FromStatus *string `json:"fromStatus,omitempty"`
		Id         *string `json:"id,omitempty"`
		ObjectName *string `json:"objectName,omitempty"`

		// SevClient Client to which invoice belongs. Will be filled automatically
		SevClient *struct {
			// Id Unique identifier of the client
			Id int `json:"id"`

			// ObjectName Model name, which is 'SevClient'
			ObjectName string `json:"objectName"`
		} `json:"sevClient,omitempty"`
		ToStatus *string `json:"toStatus,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r BookVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BookVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoucherEnshrineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *interface{} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}

// Status returns HTTPResponse.Status
func (r VoucherEnshrineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoucherEnshrineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoucherResetToDraftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			// CostCentre Cost centre for the voucher
			CostCentre *struct {
				// Id Unique identifier of the cost centre
				Id string `json:"id"`

				// ObjectName Model name, which is 'CostCentre'
				ObjectName string `json:"objectName"`
			} `json:"costCentre,omitempty"`

			// Create Date of voucher creation
			Create *time.Time `json:"create,omitempty"`

			// CreateUser User who created the voucher. Will be filled automatically.
			CreateUser *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"createUser,omitempty"`

			// CreditDebit Defines if your voucher is a credit (C) or debit (D)
			CreditDebit *VoucherResetToDraft200ObjectsCreditDebit `json:"creditDebit"`

			// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
			Currency *string `json:"currency"`

			// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
			DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

			// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
			DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

			// Description The description of the voucher. Essentially the voucher number.
			Description *string `json:"description"`

			// Document The document of the voucher.
			Document *struct {
				// Id Unique identifier of the document
				Id string `json:"id"`

				// ObjectName Model name, which is 'Document'
				ObjectName string `json:"objectName"`
			} `json:"document"`

			// Enshrined Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
			Enshrined *time.Time `json:"enshrined,omitempty"`

			// Id The voucher id
			Id     *string `json:"id,omitempty"`
			MapAll *bool   `json:"mapAll,omitempty"`

			// ObjectName The voucher object name
			ObjectName *string `json:"objectName,omitempty"`

			// PaidAmount Amount which has already been paid for this voucher by the customer
			PaidAmount *float32 `json:"paidAmount"`

			// PayDate Needs to be timestamp or dd.mm.yyyy
			PayDate *time.Time `json:"payDate"`

			// PaymentDeadline Payment deadline of the voucher.
			PaymentDeadline *time.Time `json:"paymentDeadline"`

			// PropertyExchangeRate Defines the exchange rate
			PropertyExchangeRate *string `json:"propertyExchangeRate"`

			// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
			PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

			// RecurringEndDate The date when the recurring vouchers end being generated.<br>
			//     Necessary attribute for all recurring vouchers.
			RecurringEndDate *time.Time `json:"recurringEndDate"`

			// RecurringInterval The DateInterval in which recurring vouchers are generated.<br>
			//      Necessary attribute for all recurring vouchers.
			RecurringInterval *VoucherResetToDraft200ObjectsRecurringInterval `json:"recurringInterval"`

			// RecurringLastVoucher The date when the last voucher was generated.
			RecurringLastVoucher *time.Time `json:"recurringLastVoucher"`

			// RecurringNextVoucher The date when the next voucher should be generated.<br>
			//      Necessary attribute for all recurring vouchers.
			RecurringNextVoucher *time.Time `json:"recurringNextVoucher"`

			// RecurringStartDate The date when the recurring vouchers start being generated.<br>
			//      Necessary attribute for all recurring vouchers.
			RecurringStartDate *time.Time `json:"recurringStartDate"`

			// SevClient Client to which voucher belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`
			Status *interface{} `json:"status,omitempty"`

			// SumDiscounts Sum of all discounts in the voucher
			SumDiscounts *string `json:"sumDiscounts,omitempty"`

			// SumDiscountsForeignCurrency Discounts sum of the voucher in the foreign currency
			SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

			// SumGross Gross sum of the voucher
			SumGross *string `json:"sumGross,omitempty"`

			// SumGrossAccounting Gross accounting sum of the voucher. Is usually the same as sumGross
			SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

			// SumNet Net sum of the voucher
			SumNet *string `json:"sumNet,omitempty"`

			// SumNetAccounting Net accounting sum of the voucher. Is usually the same as sumNet
			SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

			// SumTax Tax sum of the voucher
			SumTax *string `json:"sumTax,omitempty"`

			// SumTaxAccounting Tax accounting sum of the voucher. Is usually the same as sumTax
			SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

			// Supplier The contact used in the voucher as a supplier.<br>
			// If you don't have a contact as a supplier, you can set this object to null.
			Supplier *struct {
				// Id Unique identifier of the contact
				Id string `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"supplier"`

			// SupplierName The supplier name.<br>
			//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
			SupplierName *string `json:"supplierName"`

			// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			TaxRule *struct {
				// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Defines the vat-regulation.
				// For "Regelbesteuerung" it can be one of:
				//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
				//   - `2` - Ausfuhren (tax rates: 0.0)
				//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
				//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
				//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
				//
				// For small business owner ("Kleinunternehmer") it can be:
				//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
				Id VoucherResetToDraft200ObjectsTaxRuleId `json:"id"`

				// ObjectName Name of the object. Must always be TaxRule
				ObjectName VoucherResetToDraft200ObjectsTaxRuleObjectName `json:"objectName"`
			} `json:"taxRule,omitempty"`

			// TaxSet **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			//
			// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
			TaxSet *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name, which is 'TaxSet'
				ObjectName string `json:"objectName"`
			} `json:"taxSet"`

			// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax type of the voucher.
			// There are four tax types:
			// 1. default - Umsatzsteuer ausweisen
			// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
			// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
			// 4. custom - Using custom tax set
			// 5. ss - Not subject to VAT according to §19 1 UStG
			// Tax rates are heavily connected to the tax type used.
			TaxType *string `json:"taxType"`

			// Update Date of last voucher update
			Update *time.Time `json:"update,omitempty"`

			// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
			VoucherDate *time.Time `json:"voucherDate"`

			// VoucherType Type of the voucher. For more information on the different types, check
			//      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
			VoucherType *VoucherResetToDraft200ObjectsVoucherType `json:"voucherType"`
		} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}
type VoucherResetToDraft200ObjectsCreditDebit string
type VoucherResetToDraft200ObjectsRecurringInterval string
type VoucherResetToDraft200ObjectsTaxRuleId string
type VoucherResetToDraft200ObjectsTaxRuleObjectName string
type VoucherResetToDraft200ObjectsVoucherType string

// Status returns HTTPResponse.Status
func (r VoucherResetToDraftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoucherResetToDraftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoucherResetToOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *struct {
			// CostCentre Cost centre for the voucher
			CostCentre *struct {
				// Id Unique identifier of the cost centre
				Id string `json:"id"`

				// ObjectName Model name, which is 'CostCentre'
				ObjectName string `json:"objectName"`
			} `json:"costCentre,omitempty"`

			// Create Date of voucher creation
			Create *time.Time `json:"create,omitempty"`

			// CreateUser User who created the voucher. Will be filled automatically.
			CreateUser *struct {
				// Id Unique identifier of the user
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevUser'
				ObjectName string `json:"objectName"`
			} `json:"createUser,omitempty"`

			// CreditDebit Defines if your voucher is a credit (C) or debit (D)
			CreditDebit *VoucherResetToOpen200ObjectsCreditDebit `json:"creditDebit"`

			// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
			Currency *string `json:"currency"`

			// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
			DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

			// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
			DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

			// Description The description of the voucher. Essentially the voucher number.
			Description *string `json:"description"`

			// Document The document of the voucher.
			Document *struct {
				// Id Unique identifier of the document
				Id string `json:"id"`

				// ObjectName Model name, which is 'Document'
				ObjectName string `json:"objectName"`
			} `json:"document"`

			// Enshrined Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
			Enshrined *time.Time `json:"enshrined,omitempty"`

			// Id The voucher id
			Id     *string `json:"id,omitempty"`
			MapAll *bool   `json:"mapAll,omitempty"`

			// ObjectName The voucher object name
			ObjectName *string `json:"objectName,omitempty"`

			// PaidAmount Amount which has already been paid for this voucher by the customer
			PaidAmount *float32 `json:"paidAmount"`

			// PayDate Needs to be timestamp or dd.mm.yyyy
			PayDate *time.Time `json:"payDate"`

			// PaymentDeadline Payment deadline of the voucher.
			PaymentDeadline *time.Time `json:"paymentDeadline"`

			// PropertyExchangeRate Defines the exchange rate
			PropertyExchangeRate *string `json:"propertyExchangeRate"`

			// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
			PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

			// RecurringEndDate The date when the recurring vouchers end being generated.<br>
			//     Necessary attribute for all recurring vouchers.
			RecurringEndDate *time.Time `json:"recurringEndDate"`

			// RecurringInterval The DateInterval in which recurring vouchers are generated.<br>
			//      Necessary attribute for all recurring vouchers.
			RecurringInterval *VoucherResetToOpen200ObjectsRecurringInterval `json:"recurringInterval"`

			// RecurringLastVoucher The date when the last voucher was generated.
			RecurringLastVoucher *time.Time `json:"recurringLastVoucher"`

			// RecurringNextVoucher The date when the next voucher should be generated.<br>
			//      Necessary attribute for all recurring vouchers.
			RecurringNextVoucher *time.Time `json:"recurringNextVoucher"`

			// RecurringStartDate The date when the recurring vouchers start being generated.<br>
			//      Necessary attribute for all recurring vouchers.
			RecurringStartDate *time.Time `json:"recurringStartDate"`

			// SevClient Client to which voucher belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id string `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`
			Status *interface{} `json:"status,omitempty"`

			// SumDiscounts Sum of all discounts in the voucher
			SumDiscounts *string `json:"sumDiscounts,omitempty"`

			// SumDiscountsForeignCurrency Discounts sum of the voucher in the foreign currency
			SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

			// SumGross Gross sum of the voucher
			SumGross *string `json:"sumGross,omitempty"`

			// SumGrossAccounting Gross accounting sum of the voucher. Is usually the same as sumGross
			SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

			// SumNet Net sum of the voucher
			SumNet *string `json:"sumNet,omitempty"`

			// SumNetAccounting Net accounting sum of the voucher. Is usually the same as sumNet
			SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

			// SumTax Tax sum of the voucher
			SumTax *string `json:"sumTax,omitempty"`

			// SumTaxAccounting Tax accounting sum of the voucher. Is usually the same as sumTax
			SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

			// Supplier The contact used in the voucher as a supplier.<br>
			// If you don't have a contact as a supplier, you can set this object to null.
			Supplier *struct {
				// Id Unique identifier of the contact
				Id string `json:"id"`

				// ObjectName Model name, which is 'Contact'
				ObjectName string `json:"objectName"`
			} `json:"supplier"`

			// SupplierName The supplier name.<br>
			//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
			SupplierName *string `json:"supplierName"`

			// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			TaxRule *struct {
				// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Defines the vat-regulation.
				// For "Regelbesteuerung" it can be one of:
				//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
				//   - `2` - Ausfuhren (tax rates: 0.0)
				//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
				//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
				//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
				//
				// For small business owner ("Kleinunternehmer") it can be:
				//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
				Id VoucherResetToOpen200ObjectsTaxRuleId `json:"id"`

				// ObjectName Name of the object. Must always be TaxRule
				ObjectName VoucherResetToOpen200ObjectsTaxRuleObjectName `json:"objectName"`
			} `json:"taxRule,omitempty"`

			// TaxSet **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
			//
			// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
			TaxSet *struct {
				// Id Unique identifier of the object
				Id string `json:"id"`

				// ObjectName Model name, which is 'TaxSet'
				ObjectName string `json:"objectName"`
			} `json:"taxSet"`

			// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
			//
			// Tax type of the voucher.
			// There are four tax types:
			// 1. default - Umsatzsteuer ausweisen
			// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
			// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
			// 4. custom - Using custom tax set
			// 5. ss - Not subject to VAT according to §19 1 UStG
			// Tax rates are heavily connected to the tax type used.
			TaxType *string `json:"taxType"`

			// Update Date of last voucher update
			Update *time.Time `json:"update,omitempty"`

			// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
			VoucherDate *time.Time `json:"voucherDate"`

			// VoucherType Type of the voucher. For more information on the different types, check
			//      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
			VoucherType *VoucherResetToOpen200ObjectsVoucherType `json:"voucherType"`
		} `json:"objects,omitempty"`
	}
	JSON422 *ValidationError
}
type VoucherResetToOpen200ObjectsCreditDebit string
type VoucherResetToOpen200ObjectsRecurringInterval string
type VoucherResetToOpen200ObjectsTaxRuleId string
type VoucherResetToOpen200ObjectsTaxRuleObjectName string
type VoucherResetToOpen200ObjectsVoucherType string

// Status returns HTTPResponse.Status
func (r VoucherResetToOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoucherResetToOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoucherPositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Objects *[]ModelVoucherPosResponse `json:"objects,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetVoucherPositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoucherPositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountingContactWithResponse request returning *GetAccountingContactResponse
func (c *ClientWithResponses) GetAccountingContactWithResponse(ctx context.Context, params *GetAccountingContactParams, reqEditors ...RequestEditorFn) (*GetAccountingContactResponse, error) {
	rsp, err := c.GetAccountingContact(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountingContactResponse(rsp)
}

// CreateAccountingContactWithBodyWithResponse request with arbitrary body returning *CreateAccountingContactResponse
func (c *ClientWithResponses) CreateAccountingContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountingContactResponse, error) {
	rsp, err := c.CreateAccountingContactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountingContactResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountingContactWithResponse(ctx context.Context, body CreateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountingContactResponse, error) {
	rsp, err := c.CreateAccountingContact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountingContactResponse(rsp)
}

// DeleteAccountingContactWithResponse request returning *DeleteAccountingContactResponse
func (c *ClientWithResponses) DeleteAccountingContactWithResponse(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*DeleteAccountingContactResponse, error) {
	rsp, err := c.DeleteAccountingContact(ctx, accountingContactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountingContactResponse(rsp)
}

// GetAccountingContactByIdWithResponse request returning *GetAccountingContactByIdResponse
func (c *ClientWithResponses) GetAccountingContactByIdWithResponse(ctx context.Context, accountingContactId int, reqEditors ...RequestEditorFn) (*GetAccountingContactByIdResponse, error) {
	rsp, err := c.GetAccountingContactById(ctx, accountingContactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountingContactByIdResponse(rsp)
}

// UpdateAccountingContactWithBodyWithResponse request with arbitrary body returning *UpdateAccountingContactResponse
func (c *ClientWithResponses) UpdateAccountingContactWithBodyWithResponse(ctx context.Context, accountingContactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountingContactResponse, error) {
	rsp, err := c.UpdateAccountingContactWithBody(ctx, accountingContactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountingContactResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccountingContactWithResponse(ctx context.Context, accountingContactId int, body UpdateAccountingContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccountingContactResponse, error) {
	rsp, err := c.UpdateAccountingContact(ctx, accountingContactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountingContactResponse(rsp)
}

// GetCheckAccountsWithResponse request returning *GetCheckAccountsResponse
func (c *ClientWithResponses) GetCheckAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCheckAccountsResponse, error) {
	rsp, err := c.GetCheckAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckAccountsResponse(rsp)
}

// CreateCheckAccountWithBodyWithResponse request with arbitrary body returning *CreateCheckAccountResponse
func (c *ClientWithResponses) CreateCheckAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCheckAccountResponse, error) {
	rsp, err := c.CreateCheckAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCheckAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateCheckAccountWithResponse(ctx context.Context, body CreateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCheckAccountResponse, error) {
	rsp, err := c.CreateCheckAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCheckAccountResponse(rsp)
}

// CreateClearingAccountWithBodyWithResponse request with arbitrary body returning *CreateClearingAccountResponse
func (c *ClientWithResponses) CreateClearingAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClearingAccountResponse, error) {
	rsp, err := c.CreateClearingAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClearingAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateClearingAccountWithResponse(ctx context.Context, body CreateClearingAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClearingAccountResponse, error) {
	rsp, err := c.CreateClearingAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClearingAccountResponse(rsp)
}

// CreateFileImportAccountWithBodyWithResponse request with arbitrary body returning *CreateFileImportAccountResponse
func (c *ClientWithResponses) CreateFileImportAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileImportAccountResponse, error) {
	rsp, err := c.CreateFileImportAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileImportAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateFileImportAccountWithResponse(ctx context.Context, body CreateFileImportAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFileImportAccountResponse, error) {
	rsp, err := c.CreateFileImportAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileImportAccountResponse(rsp)
}

// DeleteCheckAccountWithResponse request returning *DeleteCheckAccountResponse
func (c *ClientWithResponses) DeleteCheckAccountWithResponse(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*DeleteCheckAccountResponse, error) {
	rsp, err := c.DeleteCheckAccount(ctx, checkAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCheckAccountResponse(rsp)
}

// GetCheckAccountByIdWithResponse request returning *GetCheckAccountByIdResponse
func (c *ClientWithResponses) GetCheckAccountByIdWithResponse(ctx context.Context, checkAccountId int, reqEditors ...RequestEditorFn) (*GetCheckAccountByIdResponse, error) {
	rsp, err := c.GetCheckAccountById(ctx, checkAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckAccountByIdResponse(rsp)
}

// UpdateCheckAccountWithBodyWithResponse request with arbitrary body returning *UpdateCheckAccountResponse
func (c *ClientWithResponses) UpdateCheckAccountWithBodyWithResponse(ctx context.Context, checkAccountId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCheckAccountResponse, error) {
	rsp, err := c.UpdateCheckAccountWithBody(ctx, checkAccountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCheckAccountResponse(rsp)
}

func (c *ClientWithResponses) UpdateCheckAccountWithResponse(ctx context.Context, checkAccountId int, body UpdateCheckAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCheckAccountResponse, error) {
	rsp, err := c.UpdateCheckAccount(ctx, checkAccountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCheckAccountResponse(rsp)
}

// GetBalanceAtDateWithResponse request returning *GetBalanceAtDateResponse
func (c *ClientWithResponses) GetBalanceAtDateWithResponse(ctx context.Context, checkAccountId int, params *GetBalanceAtDateParams, reqEditors ...RequestEditorFn) (*GetBalanceAtDateResponse, error) {
	rsp, err := c.GetBalanceAtDate(ctx, checkAccountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBalanceAtDateResponse(rsp)
}

// GetTransactionsWithResponse request returning *GetTransactionsResponse
func (c *ClientWithResponses) GetTransactionsWithResponse(ctx context.Context, params *GetTransactionsParams, reqEditors ...RequestEditorFn) (*GetTransactionsResponse, error) {
	rsp, err := c.GetTransactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionsResponse(rsp)
}

// CreateTransactionWithBodyWithResponse request with arbitrary body returning *CreateTransactionResponse
func (c *ClientWithResponses) CreateTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTransactionResponse, error) {
	rsp, err := c.CreateTransactionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTransactionResponse(rsp)
}

func (c *ClientWithResponses) CreateTransactionWithResponse(ctx context.Context, body CreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTransactionResponse, error) {
	rsp, err := c.CreateTransaction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTransactionResponse(rsp)
}

// DeleteCheckAccountTransactionWithResponse request returning *DeleteCheckAccountTransactionResponse
func (c *ClientWithResponses) DeleteCheckAccountTransactionWithResponse(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*DeleteCheckAccountTransactionResponse, error) {
	rsp, err := c.DeleteCheckAccountTransaction(ctx, checkAccountTransactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCheckAccountTransactionResponse(rsp)
}

// GetCheckAccountTransactionByIdWithResponse request returning *GetCheckAccountTransactionByIdResponse
func (c *ClientWithResponses) GetCheckAccountTransactionByIdWithResponse(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*GetCheckAccountTransactionByIdResponse, error) {
	rsp, err := c.GetCheckAccountTransactionById(ctx, checkAccountTransactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckAccountTransactionByIdResponse(rsp)
}

// UpdateCheckAccountTransactionWithBodyWithResponse request with arbitrary body returning *UpdateCheckAccountTransactionResponse
func (c *ClientWithResponses) UpdateCheckAccountTransactionWithBodyWithResponse(ctx context.Context, checkAccountTransactionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCheckAccountTransactionResponse, error) {
	rsp, err := c.UpdateCheckAccountTransactionWithBody(ctx, checkAccountTransactionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCheckAccountTransactionResponse(rsp)
}

func (c *ClientWithResponses) UpdateCheckAccountTransactionWithResponse(ctx context.Context, checkAccountTransactionId int, body UpdateCheckAccountTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCheckAccountTransactionResponse, error) {
	rsp, err := c.UpdateCheckAccountTransaction(ctx, checkAccountTransactionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCheckAccountTransactionResponse(rsp)
}

// CheckAccountTransactionEnshrineWithResponse request returning *CheckAccountTransactionEnshrineResponse
func (c *ClientWithResponses) CheckAccountTransactionEnshrineWithResponse(ctx context.Context, checkAccountTransactionId int, reqEditors ...RequestEditorFn) (*CheckAccountTransactionEnshrineResponse, error) {
	rsp, err := c.CheckAccountTransactionEnshrine(ctx, checkAccountTransactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckAccountTransactionEnshrineResponse(rsp)
}

// GetCommunicationWaysWithResponse request returning *GetCommunicationWaysResponse
func (c *ClientWithResponses) GetCommunicationWaysWithResponse(ctx context.Context, params *GetCommunicationWaysParams, reqEditors ...RequestEditorFn) (*GetCommunicationWaysResponse, error) {
	rsp, err := c.GetCommunicationWays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommunicationWaysResponse(rsp)
}

// CreateCommunicationWayWithBodyWithResponse request with arbitrary body returning *CreateCommunicationWayResponse
func (c *ClientWithResponses) CreateCommunicationWayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommunicationWayResponse, error) {
	rsp, err := c.CreateCommunicationWayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommunicationWayResponse(rsp)
}

func (c *ClientWithResponses) CreateCommunicationWayWithResponse(ctx context.Context, body CreateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommunicationWayResponse, error) {
	rsp, err := c.CreateCommunicationWay(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommunicationWayResponse(rsp)
}

// DeleteCommunicationWayWithResponse request returning *DeleteCommunicationWayResponse
func (c *ClientWithResponses) DeleteCommunicationWayWithResponse(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*DeleteCommunicationWayResponse, error) {
	rsp, err := c.DeleteCommunicationWay(ctx, communicationWayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommunicationWayResponse(rsp)
}

// GetCommunicationWayByIdWithResponse request returning *GetCommunicationWayByIdResponse
func (c *ClientWithResponses) GetCommunicationWayByIdWithResponse(ctx context.Context, communicationWayId int, reqEditors ...RequestEditorFn) (*GetCommunicationWayByIdResponse, error) {
	rsp, err := c.GetCommunicationWayById(ctx, communicationWayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommunicationWayByIdResponse(rsp)
}

// UpdateCommunicationWayWithBodyWithResponse request with arbitrary body returning *UpdateCommunicationWayResponse
func (c *ClientWithResponses) UpdateCommunicationWayWithBodyWithResponse(ctx context.Context, communicationWayId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommunicationWayResponse, error) {
	rsp, err := c.UpdateCommunicationWayWithBody(ctx, communicationWayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommunicationWayResponse(rsp)
}

func (c *ClientWithResponses) UpdateCommunicationWayWithResponse(ctx context.Context, communicationWayId int, body UpdateCommunicationWayJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommunicationWayResponse, error) {
	rsp, err := c.UpdateCommunicationWay(ctx, communicationWayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommunicationWayResponse(rsp)
}

// GetCommunicationWayKeysWithResponse request returning *GetCommunicationWayKeysResponse
func (c *ClientWithResponses) GetCommunicationWayKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCommunicationWayKeysResponse, error) {
	rsp, err := c.GetCommunicationWayKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommunicationWayKeysResponse(rsp)
}

// GetContactsWithResponse request returning *GetContactsResponse
func (c *ClientWithResponses) GetContactsWithResponse(ctx context.Context, params *GetContactsParams, reqEditors ...RequestEditorFn) (*GetContactsResponse, error) {
	rsp, err := c.GetContacts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactsResponse(rsp)
}

// CreateContactWithBodyWithResponse request with arbitrary body returning *CreateContactResponse
func (c *ClientWithResponses) CreateContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactResponse, error) {
	rsp, err := c.CreateContactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactResponse(rsp)
}

func (c *ClientWithResponses) CreateContactWithResponse(ctx context.Context, body CreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactResponse, error) {
	rsp, err := c.CreateContact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactResponse(rsp)
}

// FindContactsByCustomFieldValueWithResponse request returning *FindContactsByCustomFieldValueResponse
func (c *ClientWithResponses) FindContactsByCustomFieldValueWithResponse(ctx context.Context, params *FindContactsByCustomFieldValueParams, reqEditors ...RequestEditorFn) (*FindContactsByCustomFieldValueResponse, error) {
	rsp, err := c.FindContactsByCustomFieldValue(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindContactsByCustomFieldValueResponse(rsp)
}

// GetNextCustomerNumberWithResponse request returning *GetNextCustomerNumberResponse
func (c *ClientWithResponses) GetNextCustomerNumberWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNextCustomerNumberResponse, error) {
	rsp, err := c.GetNextCustomerNumber(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNextCustomerNumberResponse(rsp)
}

// ContactCustomerNumberAvailabilityCheckWithResponse request returning *ContactCustomerNumberAvailabilityCheckResponse
func (c *ClientWithResponses) ContactCustomerNumberAvailabilityCheckWithResponse(ctx context.Context, params *ContactCustomerNumberAvailabilityCheckParams, reqEditors ...RequestEditorFn) (*ContactCustomerNumberAvailabilityCheckResponse, error) {
	rsp, err := c.ContactCustomerNumberAvailabilityCheck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactCustomerNumberAvailabilityCheckResponse(rsp)
}

// DeleteContactWithResponse request returning *DeleteContactResponse
func (c *ClientWithResponses) DeleteContactWithResponse(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*DeleteContactResponse, error) {
	rsp, err := c.DeleteContact(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactResponse(rsp)
}

// GetContactByIdWithResponse request returning *GetContactByIdResponse
func (c *ClientWithResponses) GetContactByIdWithResponse(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*GetContactByIdResponse, error) {
	rsp, err := c.GetContactById(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactByIdResponse(rsp)
}

// UpdateContactWithBodyWithResponse request with arbitrary body returning *UpdateContactResponse
func (c *ClientWithResponses) UpdateContactWithBodyWithResponse(ctx context.Context, contactId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContactWithBody(ctx, contactId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactWithResponse(ctx context.Context, contactId int, body UpdateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContact(ctx, contactId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

// GetContactTabsItemCountByIdWithResponse request returning *GetContactTabsItemCountByIdResponse
func (c *ClientWithResponses) GetContactTabsItemCountByIdWithResponse(ctx context.Context, contactId int, reqEditors ...RequestEditorFn) (*GetContactTabsItemCountByIdResponse, error) {
	rsp, err := c.GetContactTabsItemCountById(ctx, contactId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactTabsItemCountByIdResponse(rsp)
}

// GetContactAddressesWithResponse request returning *GetContactAddressesResponse
func (c *ClientWithResponses) GetContactAddressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactAddressesResponse, error) {
	rsp, err := c.GetContactAddresses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactAddressesResponse(rsp)
}

// CreateContactAddressWithBodyWithResponse request with arbitrary body returning *CreateContactAddressResponse
func (c *ClientWithResponses) CreateContactAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactAddressResponse, error) {
	rsp, err := c.CreateContactAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactAddressResponse(rsp)
}

func (c *ClientWithResponses) CreateContactAddressWithResponse(ctx context.Context, body CreateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactAddressResponse, error) {
	rsp, err := c.CreateContactAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactAddressResponse(rsp)
}

// DeleteContactAddressWithResponse request returning *DeleteContactAddressResponse
func (c *ClientWithResponses) DeleteContactAddressWithResponse(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*DeleteContactAddressResponse, error) {
	rsp, err := c.DeleteContactAddress(ctx, contactAddressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactAddressResponse(rsp)
}

// ContactAddressIdWithResponse request returning *ContactAddressIdResponse
func (c *ClientWithResponses) ContactAddressIdWithResponse(ctx context.Context, contactAddressId int, reqEditors ...RequestEditorFn) (*ContactAddressIdResponse, error) {
	rsp, err := c.ContactAddressId(ctx, contactAddressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactAddressIdResponse(rsp)
}

// UpdateContactAddressWithBodyWithResponse request with arbitrary body returning *UpdateContactAddressResponse
func (c *ClientWithResponses) UpdateContactAddressWithBodyWithResponse(ctx context.Context, contactAddressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactAddressResponse, error) {
	rsp, err := c.UpdateContactAddressWithBody(ctx, contactAddressId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactAddressResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactAddressWithResponse(ctx context.Context, contactAddressId int, body UpdateContactAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactAddressResponse, error) {
	rsp, err := c.UpdateContactAddress(ctx, contactAddressId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactAddressResponse(rsp)
}

// GetContactFieldsWithResponse request returning *GetContactFieldsResponse
func (c *ClientWithResponses) GetContactFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactFieldsResponse, error) {
	rsp, err := c.GetContactFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactFieldsResponse(rsp)
}

// CreateContactFieldWithBodyWithResponse request with arbitrary body returning *CreateContactFieldResponse
func (c *ClientWithResponses) CreateContactFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactFieldResponse, error) {
	rsp, err := c.CreateContactFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateContactFieldWithResponse(ctx context.Context, body CreateContactFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactFieldResponse, error) {
	rsp, err := c.CreateContactField(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactFieldResponse(rsp)
}

// DeleteContactCustomFieldIdWithResponse request returning *DeleteContactCustomFieldIdResponse
func (c *ClientWithResponses) DeleteContactCustomFieldIdWithResponse(ctx context.Context, contactCustomFieldId int, reqEditors ...RequestEditorFn) (*DeleteContactCustomFieldIdResponse, error) {
	rsp, err := c.DeleteContactCustomFieldId(ctx, contactCustomFieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactCustomFieldIdResponse(rsp)
}

// GetContactFieldsByIdWithResponse request returning *GetContactFieldsByIdResponse
func (c *ClientWithResponses) GetContactFieldsByIdWithResponse(ctx context.Context, contactCustomFieldId float32, reqEditors ...RequestEditorFn) (*GetContactFieldsByIdResponse, error) {
	rsp, err := c.GetContactFieldsById(ctx, contactCustomFieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactFieldsByIdResponse(rsp)
}

// UpdateContactfieldWithBodyWithResponse request with arbitrary body returning *UpdateContactfieldResponse
func (c *ClientWithResponses) UpdateContactfieldWithBodyWithResponse(ctx context.Context, contactCustomFieldId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactfieldResponse, error) {
	rsp, err := c.UpdateContactfieldWithBody(ctx, contactCustomFieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactfieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactfieldWithResponse(ctx context.Context, contactCustomFieldId float32, body UpdateContactfieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactfieldResponse, error) {
	rsp, err := c.UpdateContactfield(ctx, contactCustomFieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactfieldResponse(rsp)
}

// GetContactFieldSettingsWithResponse request returning *GetContactFieldSettingsResponse
func (c *ClientWithResponses) GetContactFieldSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContactFieldSettingsResponse, error) {
	rsp, err := c.GetContactFieldSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactFieldSettingsResponse(rsp)
}

// CreateContactFieldSettingWithBodyWithResponse request with arbitrary body returning *CreateContactFieldSettingResponse
func (c *ClientWithResponses) CreateContactFieldSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContactFieldSettingResponse, error) {
	rsp, err := c.CreateContactFieldSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactFieldSettingResponse(rsp)
}

func (c *ClientWithResponses) CreateContactFieldSettingWithResponse(ctx context.Context, body CreateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContactFieldSettingResponse, error) {
	rsp, err := c.CreateContactFieldSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContactFieldSettingResponse(rsp)
}

// DeleteContactFieldSettingWithResponse request returning *DeleteContactFieldSettingResponse
func (c *ClientWithResponses) DeleteContactFieldSettingWithResponse(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*DeleteContactFieldSettingResponse, error) {
	rsp, err := c.DeleteContactFieldSetting(ctx, contactCustomFieldSettingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactFieldSettingResponse(rsp)
}

// GetContactFieldSettingByIdWithResponse request returning *GetContactFieldSettingByIdResponse
func (c *ClientWithResponses) GetContactFieldSettingByIdWithResponse(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*GetContactFieldSettingByIdResponse, error) {
	rsp, err := c.GetContactFieldSettingById(ctx, contactCustomFieldSettingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactFieldSettingByIdResponse(rsp)
}

// UpdateContactFieldSettingWithBodyWithResponse request with arbitrary body returning *UpdateContactFieldSettingResponse
func (c *ClientWithResponses) UpdateContactFieldSettingWithBodyWithResponse(ctx context.Context, contactCustomFieldSettingId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactFieldSettingResponse, error) {
	rsp, err := c.UpdateContactFieldSettingWithBody(ctx, contactCustomFieldSettingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactFieldSettingResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactFieldSettingWithResponse(ctx context.Context, contactCustomFieldSettingId int, body UpdateContactFieldSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactFieldSettingResponse, error) {
	rsp, err := c.UpdateContactFieldSetting(ctx, contactCustomFieldSettingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactFieldSettingResponse(rsp)
}

// GetReferenceCountWithResponse request returning *GetReferenceCountResponse
func (c *ClientWithResponses) GetReferenceCountWithResponse(ctx context.Context, contactCustomFieldSettingId int, reqEditors ...RequestEditorFn) (*GetReferenceCountResponse, error) {
	rsp, err := c.GetReferenceCount(ctx, contactCustomFieldSettingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferenceCountResponse(rsp)
}

// GetCreditNotesWithResponse request returning *GetCreditNotesResponse
func (c *ClientWithResponses) GetCreditNotesWithResponse(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*GetCreditNotesResponse, error) {
	rsp, err := c.GetCreditNotes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditNotesResponse(rsp)
}

// CreateCreditNoteFromInvoiceWithBodyWithResponse request with arbitrary body returning *CreateCreditNoteFromInvoiceResponse
func (c *ClientWithResponses) CreateCreditNoteFromInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromInvoiceResponse, error) {
	rsp, err := c.CreateCreditNoteFromInvoiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCreditNoteFromInvoiceResponse(rsp)
}

func (c *ClientWithResponses) CreateCreditNoteFromInvoiceWithResponse(ctx context.Context, body CreateCreditNoteFromInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromInvoiceResponse, error) {
	rsp, err := c.CreateCreditNoteFromInvoice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCreditNoteFromInvoiceResponse(rsp)
}

// CreateCreditNoteFromVoucherWithBodyWithResponse request with arbitrary body returning *CreateCreditNoteFromVoucherResponse
func (c *ClientWithResponses) CreateCreditNoteFromVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromVoucherResponse, error) {
	rsp, err := c.CreateCreditNoteFromVoucherWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCreditNoteFromVoucherResponse(rsp)
}

func (c *ClientWithResponses) CreateCreditNoteFromVoucherWithResponse(ctx context.Context, body CreateCreditNoteFromVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCreditNoteFromVoucherResponse, error) {
	rsp, err := c.CreateCreditNoteFromVoucher(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCreditNoteFromVoucherResponse(rsp)
}

// CreatecreditNoteWithBodyWithResponse request with arbitrary body returning *CreatecreditNoteResponse
func (c *ClientWithResponses) CreatecreditNoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatecreditNoteResponse, error) {
	rsp, err := c.CreatecreditNoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatecreditNoteResponse(rsp)
}

func (c *ClientWithResponses) CreatecreditNoteWithResponse(ctx context.Context, body CreatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatecreditNoteResponse, error) {
	rsp, err := c.CreatecreditNote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatecreditNoteResponse(rsp)
}

// DeletecreditNoteWithResponse request returning *DeletecreditNoteResponse
func (c *ClientWithResponses) DeletecreditNoteWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*DeletecreditNoteResponse, error) {
	rsp, err := c.DeletecreditNote(ctx, creditNoteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecreditNoteResponse(rsp)
}

// GetcreditNoteByIdWithResponse request returning *GetcreditNoteByIdResponse
func (c *ClientWithResponses) GetcreditNoteByIdWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*GetcreditNoteByIdResponse, error) {
	rsp, err := c.GetcreditNoteById(ctx, creditNoteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcreditNoteByIdResponse(rsp)
}

// UpdatecreditNoteWithBodyWithResponse request with arbitrary body returning *UpdatecreditNoteResponse
func (c *ClientWithResponses) UpdatecreditNoteWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatecreditNoteResponse, error) {
	rsp, err := c.UpdatecreditNoteWithBody(ctx, creditNoteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatecreditNoteResponse(rsp)
}

func (c *ClientWithResponses) UpdatecreditNoteWithResponse(ctx context.Context, creditNoteId int, body UpdatecreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatecreditNoteResponse, error) {
	rsp, err := c.UpdatecreditNote(ctx, creditNoteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatecreditNoteResponse(rsp)
}

// BookCreditNoteWithBodyWithResponse request with arbitrary body returning *BookCreditNoteResponse
func (c *ClientWithResponses) BookCreditNoteWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookCreditNoteResponse, error) {
	rsp, err := c.BookCreditNoteWithBody(ctx, creditNoteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookCreditNoteResponse(rsp)
}

func (c *ClientWithResponses) BookCreditNoteWithResponse(ctx context.Context, creditNoteId int, body BookCreditNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*BookCreditNoteResponse, error) {
	rsp, err := c.BookCreditNote(ctx, creditNoteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookCreditNoteResponse(rsp)
}

// UpdateCreditNoteTemplateWithBodyWithResponse request with arbitrary body returning *UpdateCreditNoteTemplateResponse
func (c *ClientWithResponses) UpdateCreditNoteTemplateWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCreditNoteTemplateResponse, error) {
	rsp, err := c.UpdateCreditNoteTemplateWithBody(ctx, creditNoteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCreditNoteTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateCreditNoteTemplateWithResponse(ctx context.Context, creditNoteId int, body UpdateCreditNoteTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCreditNoteTemplateResponse, error) {
	rsp, err := c.UpdateCreditNoteTemplate(ctx, creditNoteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCreditNoteTemplateResponse(rsp)
}

// CreditNoteEnshrineWithResponse request returning *CreditNoteEnshrineResponse
func (c *ClientWithResponses) CreditNoteEnshrineWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*CreditNoteEnshrineResponse, error) {
	rsp, err := c.CreditNoteEnshrine(ctx, creditNoteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreditNoteEnshrineResponse(rsp)
}

// CreditNoteGetPdfWithResponse request returning *CreditNoteGetPdfResponse
func (c *ClientWithResponses) CreditNoteGetPdfWithResponse(ctx context.Context, creditNoteId int, params *CreditNoteGetPdfParams, reqEditors ...RequestEditorFn) (*CreditNoteGetPdfResponse, error) {
	rsp, err := c.CreditNoteGetPdf(ctx, creditNoteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreditNoteGetPdfResponse(rsp)
}

// CreditNoteResetToDraftWithResponse request returning *CreditNoteResetToDraftResponse
func (c *ClientWithResponses) CreditNoteResetToDraftWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*CreditNoteResetToDraftResponse, error) {
	rsp, err := c.CreditNoteResetToDraft(ctx, creditNoteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreditNoteResetToDraftResponse(rsp)
}

// CreditNoteResetToOpenWithResponse request returning *CreditNoteResetToOpenResponse
func (c *ClientWithResponses) CreditNoteResetToOpenWithResponse(ctx context.Context, creditNoteId int, reqEditors ...RequestEditorFn) (*CreditNoteResetToOpenResponse, error) {
	rsp, err := c.CreditNoteResetToOpen(ctx, creditNoteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreditNoteResetToOpenResponse(rsp)
}

// CreditNoteSendByWithBodyWithResponse request with arbitrary body returning *CreditNoteSendByResponse
func (c *ClientWithResponses) CreditNoteSendByWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreditNoteSendByResponse, error) {
	rsp, err := c.CreditNoteSendByWithBody(ctx, creditNoteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreditNoteSendByResponse(rsp)
}

func (c *ClientWithResponses) CreditNoteSendByWithResponse(ctx context.Context, creditNoteId int, body CreditNoteSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*CreditNoteSendByResponse, error) {
	rsp, err := c.CreditNoteSendBy(ctx, creditNoteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreditNoteSendByResponse(rsp)
}

// SendCreditNoteByPrintingWithResponse request returning *SendCreditNoteByPrintingResponse
func (c *ClientWithResponses) SendCreditNoteByPrintingWithResponse(ctx context.Context, creditNoteId int, params *SendCreditNoteByPrintingParams, reqEditors ...RequestEditorFn) (*SendCreditNoteByPrintingResponse, error) {
	rsp, err := c.SendCreditNoteByPrinting(ctx, creditNoteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCreditNoteByPrintingResponse(rsp)
}

// SendCreditNoteViaEMailWithBodyWithResponse request with arbitrary body returning *SendCreditNoteViaEMailResponse
func (c *ClientWithResponses) SendCreditNoteViaEMailWithBodyWithResponse(ctx context.Context, creditNoteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendCreditNoteViaEMailResponse, error) {
	rsp, err := c.SendCreditNoteViaEMailWithBody(ctx, creditNoteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCreditNoteViaEMailResponse(rsp)
}

func (c *ClientWithResponses) SendCreditNoteViaEMailWithResponse(ctx context.Context, creditNoteId int, body SendCreditNoteViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendCreditNoteViaEMailResponse, error) {
	rsp, err := c.SendCreditNoteViaEMail(ctx, creditNoteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendCreditNoteViaEMailResponse(rsp)
}

// GetcreditNotePositionsWithResponse request returning *GetcreditNotePositionsResponse
func (c *ClientWithResponses) GetcreditNotePositionsWithResponse(ctx context.Context, params *GetcreditNotePositionsParams, reqEditors ...RequestEditorFn) (*GetcreditNotePositionsResponse, error) {
	rsp, err := c.GetcreditNotePositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcreditNotePositionsResponse(rsp)
}

// GetLetterpapersWithThumbWithResponse request returning *GetLetterpapersWithThumbResponse
func (c *ClientWithResponses) GetLetterpapersWithThumbWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLetterpapersWithThumbResponse, error) {
	rsp, err := c.GetLetterpapersWithThumb(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLetterpapersWithThumbResponse(rsp)
}

// GetTemplatesWithResponse request returning *GetTemplatesResponse
func (c *ClientWithResponses) GetTemplatesWithResponse(ctx context.Context, params *GetTemplatesParams, reqEditors ...RequestEditorFn) (*GetTemplatesResponse, error) {
	rsp, err := c.GetTemplates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTemplatesResponse(rsp)
}

// ExportContactWithResponse request returning *ExportContactResponse
func (c *ClientWithResponses) ExportContactWithResponse(ctx context.Context, params *ExportContactParams, reqEditors ...RequestEditorFn) (*ExportContactResponse, error) {
	rsp, err := c.ExportContact(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportContactResponse(rsp)
}

// ExportCreditNoteWithResponse request returning *ExportCreditNoteResponse
func (c *ClientWithResponses) ExportCreditNoteWithResponse(ctx context.Context, params *ExportCreditNoteParams, reqEditors ...RequestEditorFn) (*ExportCreditNoteResponse, error) {
	rsp, err := c.ExportCreditNote(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportCreditNoteResponse(rsp)
}

// ExportDatevWithResponse request returning *ExportDatevResponse
func (c *ClientWithResponses) ExportDatevWithResponse(ctx context.Context, params *ExportDatevParams, reqEditors ...RequestEditorFn) (*ExportDatevResponse, error) {
	rsp, err := c.ExportDatev(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportDatevResponse(rsp)
}

// ExportInvoiceWithResponse request returning *ExportInvoiceResponse
func (c *ClientWithResponses) ExportInvoiceWithResponse(ctx context.Context, params *ExportInvoiceParams, reqEditors ...RequestEditorFn) (*ExportInvoiceResponse, error) {
	rsp, err := c.ExportInvoice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportInvoiceResponse(rsp)
}

// ExportInvoiceZipWithResponse request returning *ExportInvoiceZipResponse
func (c *ClientWithResponses) ExportInvoiceZipWithResponse(ctx context.Context, params *ExportInvoiceZipParams, reqEditors ...RequestEditorFn) (*ExportInvoiceZipResponse, error) {
	rsp, err := c.ExportInvoiceZip(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportInvoiceZipResponse(rsp)
}

// ExportTransactionsWithResponse request returning *ExportTransactionsResponse
func (c *ClientWithResponses) ExportTransactionsWithResponse(ctx context.Context, params *ExportTransactionsParams, reqEditors ...RequestEditorFn) (*ExportTransactionsResponse, error) {
	rsp, err := c.ExportTransactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportTransactionsResponse(rsp)
}

// ExportVoucherWithResponse request returning *ExportVoucherResponse
func (c *ClientWithResponses) ExportVoucherWithResponse(ctx context.Context, params *ExportVoucherParams, reqEditors ...RequestEditorFn) (*ExportVoucherResponse, error) {
	rsp, err := c.ExportVoucher(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportVoucherResponse(rsp)
}

// ExportVoucherZipWithResponse request returning *ExportVoucherZipResponse
func (c *ClientWithResponses) ExportVoucherZipWithResponse(ctx context.Context, params *ExportVoucherZipParams, reqEditors ...RequestEditorFn) (*ExportVoucherZipResponse, error) {
	rsp, err := c.ExportVoucherZip(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportVoucherZipResponse(rsp)
}

// GetInvoicesWithResponse request returning *GetInvoicesResponse
func (c *ClientWithResponses) GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*GetInvoicesResponse, error) {
	rsp, err := c.GetInvoices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesResponse(rsp)
}

// CreateInvoiceFromOrderWithBodyWithResponse request with arbitrary body returning *CreateInvoiceFromOrderResponse
func (c *ClientWithResponses) CreateInvoiceFromOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceFromOrderResponse, error) {
	rsp, err := c.CreateInvoiceFromOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceFromOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateInvoiceFromOrderWithResponse(ctx context.Context, body CreateInvoiceFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceFromOrderResponse, error) {
	rsp, err := c.CreateInvoiceFromOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceFromOrderResponse(rsp)
}

// CreateInvoiceReminderWithBodyWithResponse request with arbitrary body returning *CreateInvoiceReminderResponse
func (c *ClientWithResponses) CreateInvoiceReminderWithBodyWithResponse(ctx context.Context, params *CreateInvoiceReminderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceReminderResponse, error) {
	rsp, err := c.CreateInvoiceReminderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceReminderResponse(rsp)
}

func (c *ClientWithResponses) CreateInvoiceReminderWithResponse(ctx context.Context, params *CreateInvoiceReminderParams, body CreateInvoiceReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceReminderResponse, error) {
	rsp, err := c.CreateInvoiceReminder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceReminderResponse(rsp)
}

// CreateInvoiceByFactoryWithBodyWithResponse request with arbitrary body returning *CreateInvoiceByFactoryResponse
func (c *ClientWithResponses) CreateInvoiceByFactoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceByFactoryResponse, error) {
	rsp, err := c.CreateInvoiceByFactoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceByFactoryResponse(rsp)
}

func (c *ClientWithResponses) CreateInvoiceByFactoryWithResponse(ctx context.Context, body CreateInvoiceByFactoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceByFactoryResponse, error) {
	rsp, err := c.CreateInvoiceByFactory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceByFactoryResponse(rsp)
}

// GetInvoiceByIdWithResponse request returning *GetInvoiceByIdResponse
func (c *ClientWithResponses) GetInvoiceByIdWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*GetInvoiceByIdResponse, error) {
	rsp, err := c.GetInvoiceById(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceByIdResponse(rsp)
}

// BookInvoiceWithBodyWithResponse request with arbitrary body returning *BookInvoiceResponse
func (c *ClientWithResponses) BookInvoiceWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookInvoiceResponse, error) {
	rsp, err := c.BookInvoiceWithBody(ctx, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookInvoiceResponse(rsp)
}

func (c *ClientWithResponses) BookInvoiceWithResponse(ctx context.Context, invoiceId int, body BookInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BookInvoiceResponse, error) {
	rsp, err := c.BookInvoice(ctx, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookInvoiceResponse(rsp)
}

// CancelInvoiceWithResponse request returning *CancelInvoiceResponse
func (c *ClientWithResponses) CancelInvoiceWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*CancelInvoiceResponse, error) {
	rsp, err := c.CancelInvoice(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelInvoiceResponse(rsp)
}

// UpdateInvoiceTemplateWithBodyWithResponse request with arbitrary body returning *UpdateInvoiceTemplateResponse
func (c *ClientWithResponses) UpdateInvoiceTemplateWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInvoiceTemplateResponse, error) {
	rsp, err := c.UpdateInvoiceTemplateWithBody(ctx, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInvoiceTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateInvoiceTemplateWithResponse(ctx context.Context, invoiceId int, body UpdateInvoiceTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInvoiceTemplateResponse, error) {
	rsp, err := c.UpdateInvoiceTemplate(ctx, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInvoiceTemplateResponse(rsp)
}

// InvoiceEnshrineWithResponse request returning *InvoiceEnshrineResponse
func (c *ClientWithResponses) InvoiceEnshrineWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceEnshrineResponse, error) {
	rsp, err := c.InvoiceEnshrine(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceEnshrineResponse(rsp)
}

// GetIsInvoicePartiallyPaidWithResponse request returning *GetIsInvoicePartiallyPaidResponse
func (c *ClientWithResponses) GetIsInvoicePartiallyPaidWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*GetIsInvoicePartiallyPaidResponse, error) {
	rsp, err := c.GetIsInvoicePartiallyPaid(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIsInvoicePartiallyPaidResponse(rsp)
}

// InvoiceGetPdfWithResponse request returning *InvoiceGetPdfResponse
func (c *ClientWithResponses) InvoiceGetPdfWithResponse(ctx context.Context, invoiceId int, params *InvoiceGetPdfParams, reqEditors ...RequestEditorFn) (*InvoiceGetPdfResponse, error) {
	rsp, err := c.InvoiceGetPdf(ctx, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceGetPdfResponse(rsp)
}

// GetInvoicePositionsByIdWithResponse request returning *GetInvoicePositionsByIdResponse
func (c *ClientWithResponses) GetInvoicePositionsByIdWithResponse(ctx context.Context, invoiceId int, params *GetInvoicePositionsByIdParams, reqEditors ...RequestEditorFn) (*GetInvoicePositionsByIdResponse, error) {
	rsp, err := c.GetInvoicePositionsById(ctx, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicePositionsByIdResponse(rsp)
}

// InvoiceGetXmlWithResponse request returning *InvoiceGetXmlResponse
func (c *ClientWithResponses) InvoiceGetXmlWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceGetXmlResponse, error) {
	rsp, err := c.InvoiceGetXml(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceGetXmlResponse(rsp)
}

// InvoiceRenderWithBodyWithResponse request with arbitrary body returning *InvoiceRenderResponse
func (c *ClientWithResponses) InvoiceRenderWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvoiceRenderResponse, error) {
	rsp, err := c.InvoiceRenderWithBody(ctx, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceRenderResponse(rsp)
}

func (c *ClientWithResponses) InvoiceRenderWithResponse(ctx context.Context, invoiceId int, body InvoiceRenderJSONRequestBody, reqEditors ...RequestEditorFn) (*InvoiceRenderResponse, error) {
	rsp, err := c.InvoiceRender(ctx, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceRenderResponse(rsp)
}

// InvoiceResetToDraftWithResponse request returning *InvoiceResetToDraftResponse
func (c *ClientWithResponses) InvoiceResetToDraftWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceResetToDraftResponse, error) {
	rsp, err := c.InvoiceResetToDraft(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceResetToDraftResponse(rsp)
}

// InvoiceResetToOpenWithResponse request returning *InvoiceResetToOpenResponse
func (c *ClientWithResponses) InvoiceResetToOpenWithResponse(ctx context.Context, invoiceId int, reqEditors ...RequestEditorFn) (*InvoiceResetToOpenResponse, error) {
	rsp, err := c.InvoiceResetToOpen(ctx, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceResetToOpenResponse(rsp)
}

// InvoiceSendByWithBodyWithResponse request with arbitrary body returning *InvoiceSendByResponse
func (c *ClientWithResponses) InvoiceSendByWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvoiceSendByResponse, error) {
	rsp, err := c.InvoiceSendByWithBody(ctx, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceSendByResponse(rsp)
}

func (c *ClientWithResponses) InvoiceSendByWithResponse(ctx context.Context, invoiceId int, body InvoiceSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*InvoiceSendByResponse, error) {
	rsp, err := c.InvoiceSendBy(ctx, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvoiceSendByResponse(rsp)
}

// SendInvoiceViaEMailWithBodyWithResponse request with arbitrary body returning *SendInvoiceViaEMailResponse
func (c *ClientWithResponses) SendInvoiceViaEMailWithBodyWithResponse(ctx context.Context, invoiceId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendInvoiceViaEMailResponse, error) {
	rsp, err := c.SendInvoiceViaEMailWithBody(ctx, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendInvoiceViaEMailResponse(rsp)
}

func (c *ClientWithResponses) SendInvoiceViaEMailWithResponse(ctx context.Context, invoiceId int, body SendInvoiceViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendInvoiceViaEMailResponse, error) {
	rsp, err := c.SendInvoiceViaEMail(ctx, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendInvoiceViaEMailResponse(rsp)
}

// GetInvoicePosWithResponse request returning *GetInvoicePosResponse
func (c *ClientWithResponses) GetInvoicePosWithResponse(ctx context.Context, params *GetInvoicePosParams, reqEditors ...RequestEditorFn) (*GetInvoicePosResponse, error) {
	rsp, err := c.GetInvoicePos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicePosResponse(rsp)
}

// GetOrdersWithResponse request returning *GetOrdersResponse
func (c *ClientWithResponses) GetOrdersWithResponse(ctx context.Context, params *GetOrdersParams, reqEditors ...RequestEditorFn) (*GetOrdersResponse, error) {
	rsp, err := c.GetOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersResponse(rsp)
}

// CreateContractNoteFromOrderWithBodyWithResponse request with arbitrary body returning *CreateContractNoteFromOrderResponse
func (c *ClientWithResponses) CreateContractNoteFromOrderWithBodyWithResponse(ctx context.Context, params *CreateContractNoteFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContractNoteFromOrderResponse, error) {
	rsp, err := c.CreateContractNoteFromOrderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContractNoteFromOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateContractNoteFromOrderWithResponse(ctx context.Context, params *CreateContractNoteFromOrderParams, body CreateContractNoteFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContractNoteFromOrderResponse, error) {
	rsp, err := c.CreateContractNoteFromOrder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContractNoteFromOrderResponse(rsp)
}

// CreatePackingListFromOrderWithBodyWithResponse request with arbitrary body returning *CreatePackingListFromOrderResponse
func (c *ClientWithResponses) CreatePackingListFromOrderWithBodyWithResponse(ctx context.Context, params *CreatePackingListFromOrderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePackingListFromOrderResponse, error) {
	rsp, err := c.CreatePackingListFromOrderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackingListFromOrderResponse(rsp)
}

func (c *ClientWithResponses) CreatePackingListFromOrderWithResponse(ctx context.Context, params *CreatePackingListFromOrderParams, body CreatePackingListFromOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePackingListFromOrderResponse, error) {
	rsp, err := c.CreatePackingListFromOrder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackingListFromOrderResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// DeleteOrderWithResponse request returning *DeleteOrderResponse
func (c *ClientWithResponses) DeleteOrderWithResponse(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*DeleteOrderResponse, error) {
	rsp, err := c.DeleteOrder(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrderResponse(rsp)
}

// GetOrderByIdWithResponse request returning *GetOrderByIdResponse
func (c *ClientWithResponses) GetOrderByIdWithResponse(ctx context.Context, orderId int, reqEditors ...RequestEditorFn) (*GetOrderByIdResponse, error) {
	rsp, err := c.GetOrderById(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderByIdResponse(rsp)
}

// UpdateOrderWithBodyWithResponse request with arbitrary body returning *UpdateOrderResponse
func (c *ClientWithResponses) UpdateOrderWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderResponse, error) {
	rsp, err := c.UpdateOrderWithBody(ctx, orderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrderWithResponse(ctx context.Context, orderId int, body UpdateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderResponse, error) {
	rsp, err := c.UpdateOrder(ctx, orderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderResponse(rsp)
}

// UpdateOrderTemplateWithBodyWithResponse request with arbitrary body returning *UpdateOrderTemplateResponse
func (c *ClientWithResponses) UpdateOrderTemplateWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderTemplateResponse, error) {
	rsp, err := c.UpdateOrderTemplateWithBody(ctx, orderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderTemplateResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrderTemplateWithResponse(ctx context.Context, orderId int, body UpdateOrderTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderTemplateResponse, error) {
	rsp, err := c.UpdateOrderTemplate(ctx, orderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderTemplateResponse(rsp)
}

// GetDiscountsWithResponse request returning *GetDiscountsResponse
func (c *ClientWithResponses) GetDiscountsWithResponse(ctx context.Context, orderId int, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*GetDiscountsResponse, error) {
	rsp, err := c.GetDiscounts(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscountsResponse(rsp)
}

// OrderGetPdfWithResponse request returning *OrderGetPdfResponse
func (c *ClientWithResponses) OrderGetPdfWithResponse(ctx context.Context, orderId int, params *OrderGetPdfParams, reqEditors ...RequestEditorFn) (*OrderGetPdfResponse, error) {
	rsp, err := c.OrderGetPdf(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderGetPdfResponse(rsp)
}

// GetOrderPositionsByIdWithResponse request returning *GetOrderPositionsByIdResponse
func (c *ClientWithResponses) GetOrderPositionsByIdWithResponse(ctx context.Context, orderId int, params *GetOrderPositionsByIdParams, reqEditors ...RequestEditorFn) (*GetOrderPositionsByIdResponse, error) {
	rsp, err := c.GetOrderPositionsById(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderPositionsByIdResponse(rsp)
}

// GetRelatedObjectsWithResponse request returning *GetRelatedObjectsResponse
func (c *ClientWithResponses) GetRelatedObjectsWithResponse(ctx context.Context, orderId int, params *GetRelatedObjectsParams, reqEditors ...RequestEditorFn) (*GetRelatedObjectsResponse, error) {
	rsp, err := c.GetRelatedObjects(ctx, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelatedObjectsResponse(rsp)
}

// OrderSendByWithBodyWithResponse request with arbitrary body returning *OrderSendByResponse
func (c *ClientWithResponses) OrderSendByWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderSendByResponse, error) {
	rsp, err := c.OrderSendByWithBody(ctx, orderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderSendByResponse(rsp)
}

func (c *ClientWithResponses) OrderSendByWithResponse(ctx context.Context, orderId int, body OrderSendByJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderSendByResponse, error) {
	rsp, err := c.OrderSendBy(ctx, orderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderSendByResponse(rsp)
}

// SendorderViaEMailWithBodyWithResponse request with arbitrary body returning *SendorderViaEMailResponse
func (c *ClientWithResponses) SendorderViaEMailWithBodyWithResponse(ctx context.Context, orderId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendorderViaEMailResponse, error) {
	rsp, err := c.SendorderViaEMailWithBody(ctx, orderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendorderViaEMailResponse(rsp)
}

func (c *ClientWithResponses) SendorderViaEMailWithResponse(ctx context.Context, orderId int, body SendorderViaEMailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendorderViaEMailResponse, error) {
	rsp, err := c.SendorderViaEMail(ctx, orderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendorderViaEMailResponse(rsp)
}

// GetOrderPositionsWithResponse request returning *GetOrderPositionsResponse
func (c *ClientWithResponses) GetOrderPositionsWithResponse(ctx context.Context, params *GetOrderPositionsParams, reqEditors ...RequestEditorFn) (*GetOrderPositionsResponse, error) {
	rsp, err := c.GetOrderPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderPositionsResponse(rsp)
}

// DeleteOrderPosWithResponse request returning *DeleteOrderPosResponse
func (c *ClientWithResponses) DeleteOrderPosWithResponse(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*DeleteOrderPosResponse, error) {
	rsp, err := c.DeleteOrderPos(ctx, orderPosId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrderPosResponse(rsp)
}

// GetOrderPositionByIdWithResponse request returning *GetOrderPositionByIdResponse
func (c *ClientWithResponses) GetOrderPositionByIdWithResponse(ctx context.Context, orderPosId int, reqEditors ...RequestEditorFn) (*GetOrderPositionByIdResponse, error) {
	rsp, err := c.GetOrderPositionById(ctx, orderPosId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderPositionByIdResponse(rsp)
}

// UpdateOrderPositionWithBodyWithResponse request with arbitrary body returning *UpdateOrderPositionResponse
func (c *ClientWithResponses) UpdateOrderPositionWithBodyWithResponse(ctx context.Context, orderPosId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderPositionResponse, error) {
	rsp, err := c.UpdateOrderPositionWithBody(ctx, orderPosId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderPositionResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrderPositionWithResponse(ctx context.Context, orderPosId int, body UpdateOrderPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderPositionResponse, error) {
	rsp, err := c.UpdateOrderPosition(ctx, orderPosId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderPositionResponse(rsp)
}

// GetPartsWithResponse request returning *GetPartsResponse
func (c *ClientWithResponses) GetPartsWithResponse(ctx context.Context, params *GetPartsParams, reqEditors ...RequestEditorFn) (*GetPartsResponse, error) {
	rsp, err := c.GetParts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartsResponse(rsp)
}

// CreatePartWithBodyWithResponse request with arbitrary body returning *CreatePartResponse
func (c *ClientWithResponses) CreatePartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePartResponse, error) {
	rsp, err := c.CreatePartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePartResponse(rsp)
}

func (c *ClientWithResponses) CreatePartWithResponse(ctx context.Context, body CreatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePartResponse, error) {
	rsp, err := c.CreatePart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePartResponse(rsp)
}

// GetPartByIdWithResponse request returning *GetPartByIdResponse
func (c *ClientWithResponses) GetPartByIdWithResponse(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*GetPartByIdResponse, error) {
	rsp, err := c.GetPartById(ctx, partId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartByIdResponse(rsp)
}

// UpdatePartWithBodyWithResponse request with arbitrary body returning *UpdatePartResponse
func (c *ClientWithResponses) UpdatePartWithBodyWithResponse(ctx context.Context, partId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePartResponse, error) {
	rsp, err := c.UpdatePartWithBody(ctx, partId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartResponse(rsp)
}

func (c *ClientWithResponses) UpdatePartWithResponse(ctx context.Context, partId int, body UpdatePartJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePartResponse, error) {
	rsp, err := c.UpdatePart(ctx, partId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePartResponse(rsp)
}

// PartGetStockWithResponse request returning *PartGetStockResponse
func (c *ClientWithResponses) PartGetStockWithResponse(ctx context.Context, partId int, reqEditors ...RequestEditorFn) (*PartGetStockResponse, error) {
	rsp, err := c.PartGetStock(ctx, partId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartGetStockResponse(rsp)
}

// ForAccountNumberWithResponse request returning *ForAccountNumberResponse
func (c *ClientWithResponses) ForAccountNumberWithResponse(ctx context.Context, params *ForAccountNumberParams, reqEditors ...RequestEditorFn) (*ForAccountNumberResponse, error) {
	rsp, err := c.ForAccountNumber(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForAccountNumberResponse(rsp)
}

// ForAllAccountsWithResponse request returning *ForAllAccountsResponse
func (c *ClientWithResponses) ForAllAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForAllAccountsResponse, error) {
	rsp, err := c.ForAllAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForAllAccountsResponse(rsp)
}

// ForExpenseWithResponse request returning *ForExpenseResponse
func (c *ClientWithResponses) ForExpenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForExpenseResponse, error) {
	rsp, err := c.ForExpense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForExpenseResponse(rsp)
}

// ForRevenueWithResponse request returning *ForRevenueResponse
func (c *ClientWithResponses) ForRevenueWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ForRevenueResponse, error) {
	rsp, err := c.ForRevenue(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForRevenueResponse(rsp)
}

// ForTaxRuleWithResponse request returning *ForTaxRuleResponse
func (c *ClientWithResponses) ForTaxRuleWithResponse(ctx context.Context, params *ForTaxRuleParams, reqEditors ...RequestEditorFn) (*ForTaxRuleResponse, error) {
	rsp, err := c.ForTaxRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForTaxRuleResponse(rsp)
}

// ReportContactWithResponse request returning *ReportContactResponse
func (c *ClientWithResponses) ReportContactWithResponse(ctx context.Context, params *ReportContactParams, reqEditors ...RequestEditorFn) (*ReportContactResponse, error) {
	rsp, err := c.ReportContact(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportContactResponse(rsp)
}

// ReportInvoiceWithResponse request returning *ReportInvoiceResponse
func (c *ClientWithResponses) ReportInvoiceWithResponse(ctx context.Context, params *ReportInvoiceParams, reqEditors ...RequestEditorFn) (*ReportInvoiceResponse, error) {
	rsp, err := c.ReportInvoice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportInvoiceResponse(rsp)
}

// ReportOrderWithResponse request returning *ReportOrderResponse
func (c *ClientWithResponses) ReportOrderWithResponse(ctx context.Context, params *ReportOrderParams, reqEditors ...RequestEditorFn) (*ReportOrderResponse, error) {
	rsp, err := c.ReportOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportOrderResponse(rsp)
}

// ReportVoucherWithResponse request returning *ReportVoucherResponse
func (c *ClientWithResponses) ReportVoucherWithResponse(ctx context.Context, params *ReportVoucherParams, reqEditors ...RequestEditorFn) (*ReportVoucherResponse, error) {
	rsp, err := c.ReportVoucher(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportVoucherResponse(rsp)
}

// UpdateExportConfigWithBodyWithResponse request with arbitrary body returning *UpdateExportConfigResponse
func (c *ClientWithResponses) UpdateExportConfigWithBodyWithResponse(ctx context.Context, sevClientId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExportConfigResponse, error) {
	rsp, err := c.UpdateExportConfigWithBody(ctx, sevClientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExportConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateExportConfigWithResponse(ctx context.Context, sevClientId float32, body UpdateExportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExportConfigResponse, error) {
	rsp, err := c.UpdateExportConfig(ctx, sevClientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExportConfigResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, params *GetTagsParams, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagByIdWithResponse request returning *GetTagByIdResponse
func (c *ClientWithResponses) GetTagByIdWithResponse(ctx context.Context, tagId int, reqEditors ...RequestEditorFn) (*GetTagByIdResponse, error) {
	rsp, err := c.GetTagById(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagByIdResponse(rsp)
}

// UpdateTagWithBodyWithResponse request with arbitrary body returning *UpdateTagResponse
func (c *ClientWithResponses) UpdateTagWithBodyWithResponse(ctx context.Context, tagId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTagWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagWithResponse(ctx context.Context, tagId int, body UpdateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagResponse, error) {
	rsp, err := c.UpdateTag(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagResponse(rsp)
}

// GetTagRelationsWithResponse request returning *GetTagRelationsResponse
func (c *ClientWithResponses) GetTagRelationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagRelationsResponse, error) {
	rsp, err := c.GetTagRelations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagRelationsResponse(rsp)
}

// GetPlaceholderWithResponse request returning *GetPlaceholderResponse
func (c *ClientWithResponses) GetPlaceholderWithResponse(ctx context.Context, params *GetPlaceholderParams, reqEditors ...RequestEditorFn) (*GetPlaceholderResponse, error) {
	rsp, err := c.GetPlaceholder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaceholderResponse(rsp)
}

// BookkeepingSystemVersionWithResponse request returning *BookkeepingSystemVersionResponse
func (c *ClientWithResponses) BookkeepingSystemVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BookkeepingSystemVersionResponse, error) {
	rsp, err := c.BookkeepingSystemVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookkeepingSystemVersionResponse(rsp)
}

// GetVouchersWithResponse request returning *GetVouchersResponse
func (c *ClientWithResponses) GetVouchersWithResponse(ctx context.Context, params *GetVouchersParams, reqEditors ...RequestEditorFn) (*GetVouchersResponse, error) {
	rsp, err := c.GetVouchers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVouchersResponse(rsp)
}

// VoucherFactorySaveVoucherWithBodyWithResponse request with arbitrary body returning *VoucherFactorySaveVoucherResponse
func (c *ClientWithResponses) VoucherFactorySaveVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VoucherFactorySaveVoucherResponse, error) {
	rsp, err := c.VoucherFactorySaveVoucherWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoucherFactorySaveVoucherResponse(rsp)
}

func (c *ClientWithResponses) VoucherFactorySaveVoucherWithResponse(ctx context.Context, body VoucherFactorySaveVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*VoucherFactorySaveVoucherResponse, error) {
	rsp, err := c.VoucherFactorySaveVoucher(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoucherFactorySaveVoucherResponse(rsp)
}

// VoucherUploadFileWithBodyWithResponse request with arbitrary body returning *VoucherUploadFileResponse
func (c *ClientWithResponses) VoucherUploadFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VoucherUploadFileResponse, error) {
	rsp, err := c.VoucherUploadFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoucherUploadFileResponse(rsp)
}

// GetVoucherByIdWithResponse request returning *GetVoucherByIdResponse
func (c *ClientWithResponses) GetVoucherByIdWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*GetVoucherByIdResponse, error) {
	rsp, err := c.GetVoucherById(ctx, voucherId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoucherByIdResponse(rsp)
}

// UpdateVoucherWithBodyWithResponse request with arbitrary body returning *UpdateVoucherResponse
func (c *ClientWithResponses) UpdateVoucherWithBodyWithResponse(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVoucherResponse, error) {
	rsp, err := c.UpdateVoucherWithBody(ctx, voucherId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVoucherResponse(rsp)
}

func (c *ClientWithResponses) UpdateVoucherWithResponse(ctx context.Context, voucherId int, body UpdateVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVoucherResponse, error) {
	rsp, err := c.UpdateVoucher(ctx, voucherId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVoucherResponse(rsp)
}

// BookVoucherWithBodyWithResponse request with arbitrary body returning *BookVoucherResponse
func (c *ClientWithResponses) BookVoucherWithBodyWithResponse(ctx context.Context, voucherId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BookVoucherResponse, error) {
	rsp, err := c.BookVoucherWithBody(ctx, voucherId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookVoucherResponse(rsp)
}

func (c *ClientWithResponses) BookVoucherWithResponse(ctx context.Context, voucherId int, body BookVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*BookVoucherResponse, error) {
	rsp, err := c.BookVoucher(ctx, voucherId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBookVoucherResponse(rsp)
}

// VoucherEnshrineWithResponse request returning *VoucherEnshrineResponse
func (c *ClientWithResponses) VoucherEnshrineWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*VoucherEnshrineResponse, error) {
	rsp, err := c.VoucherEnshrine(ctx, voucherId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoucherEnshrineResponse(rsp)
}

// VoucherResetToDraftWithResponse request returning *VoucherResetToDraftResponse
func (c *ClientWithResponses) VoucherResetToDraftWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*VoucherResetToDraftResponse, error) {
	rsp, err := c.VoucherResetToDraft(ctx, voucherId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoucherResetToDraftResponse(rsp)
}

// VoucherResetToOpenWithResponse request returning *VoucherResetToOpenResponse
func (c *ClientWithResponses) VoucherResetToOpenWithResponse(ctx context.Context, voucherId int, reqEditors ...RequestEditorFn) (*VoucherResetToOpenResponse, error) {
	rsp, err := c.VoucherResetToOpen(ctx, voucherId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoucherResetToOpenResponse(rsp)
}

// GetVoucherPositionsWithResponse request returning *GetVoucherPositionsResponse
func (c *ClientWithResponses) GetVoucherPositionsWithResponse(ctx context.Context, params *GetVoucherPositionsParams, reqEditors ...RequestEditorFn) (*GetVoucherPositionsResponse, error) {
	rsp, err := c.GetVoucherPositions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoucherPositionsResponse(rsp)
}

// ParseGetAccountingContactResponse parses an HTTP response from a GetAccountingContactWithResponse call
func ParseGetAccountingContactResponse(rsp *http.Response) (*GetAccountingContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountingContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelAccountingContactResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountingContactResponse parses an HTTP response from a CreateAccountingContactWithResponse call
func ParseCreateAccountingContactResponse(rsp *http.Response) (*CreateAccountingContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountingContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelAccountingContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAccountingContactResponse parses an HTTP response from a DeleteAccountingContactWithResponse call
func ParseDeleteAccountingContactResponse(rsp *http.Response) (*DeleteAccountingContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountingContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountingContactByIdResponse parses an HTTP response from a GetAccountingContactByIdWithResponse call
func ParseGetAccountingContactByIdResponse(rsp *http.Response) (*GetAccountingContactByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountingContactByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelAccountingContactResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountingContactResponse parses an HTTP response from a UpdateAccountingContactWithResponse call
func ParseUpdateAccountingContactResponse(rsp *http.Response) (*UpdateAccountingContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountingContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelAccountingContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckAccountsResponse parses an HTTP response from a GetCheckAccountsWithResponse call
func ParseGetCheckAccountsResponse(rsp *http.Response) (*GetCheckAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCheckAccountResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCheckAccountResponse parses an HTTP response from a CreateCheckAccountWithResponse call
func ParseCreateCheckAccountResponse(rsp *http.Response) (*CreateCheckAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCheckAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Objects *[]ModelCheckAccountResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateClearingAccountResponse parses an HTTP response from a CreateClearingAccountWithResponse call
func ParseCreateClearingAccountResponse(rsp *http.Response) (*CreateClearingAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClearingAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Objects CheckAccount model. Showing the properties relevant to clearing accounts.
			Objects *CreateClearingAccountResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateFileImportAccountResponse parses an HTTP response from a CreateFileImportAccountWithResponse call
func ParseCreateFileImportAccountResponse(rsp *http.Response) (*CreateFileImportAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFileImportAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Objects CheckAccount model. Showing the properties relevant to file import accounts.
			Objects *CreateFileImportAccountResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCheckAccountResponse parses an HTTP response from a DeleteCheckAccountWithResponse call
func ParseDeleteCheckAccountResponse(rsp *http.Response) (*DeleteCheckAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCheckAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckAccountByIdResponse parses an HTTP response from a GetCheckAccountByIdWithResponse call
func ParseGetCheckAccountByIdResponse(rsp *http.Response) (*GetCheckAccountByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckAccountByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCheckAccountResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCheckAccountResponse parses an HTTP response from a UpdateCheckAccountWithResponse call
func ParseUpdateCheckAccountResponse(rsp *http.Response) (*UpdateCheckAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCheckAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCheckAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBalanceAtDateResponse parses an HTTP response from a GetBalanceAtDateWithResponse call
func ParseGetBalanceAtDateResponse(rsp *http.Response) (*GetBalanceAtDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBalanceAtDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *string `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactionsResponse parses an HTTP response from a GetTransactionsWithResponse call
func ParseGetTransactionsResponse(rsp *http.Response) (*GetTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCheckAccountTransactionResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTransactionResponse parses an HTTP response from a CreateTransactionWithResponse call
func ParseCreateTransactionResponse(rsp *http.Response) (*CreateTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelCheckAccountTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCheckAccountTransactionResponse parses an HTTP response from a DeleteCheckAccountTransactionWithResponse call
func ParseDeleteCheckAccountTransactionResponse(rsp *http.Response) (*DeleteCheckAccountTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCheckAccountTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckAccountTransactionByIdResponse parses an HTTP response from a GetCheckAccountTransactionByIdWithResponse call
func ParseGetCheckAccountTransactionByIdResponse(rsp *http.Response) (*GetCheckAccountTransactionByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckAccountTransactionByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCheckAccountTransactionResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCheckAccountTransactionResponse parses an HTTP response from a UpdateCheckAccountTransactionWithResponse call
func ParseUpdateCheckAccountTransactionResponse(rsp *http.Response) (*UpdateCheckAccountTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCheckAccountTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCheckAccountTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCheckAccountTransactionEnshrineResponse parses an HTTP response from a CheckAccountTransactionEnshrineWithResponse call
func ParseCheckAccountTransactionEnshrineResponse(rsp *http.Response) (*CheckAccountTransactionEnshrineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckAccountTransactionEnshrineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCommunicationWaysResponse parses an HTTP response from a GetCommunicationWaysWithResponse call
func ParseGetCommunicationWaysResponse(rsp *http.Response) (*GetCommunicationWaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommunicationWaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCommunicationWayResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCommunicationWayResponse parses an HTTP response from a CreateCommunicationWayWithResponse call
func ParseCreateCommunicationWayResponse(rsp *http.Response) (*CreateCommunicationWayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCommunicationWayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelCommunicationWayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCommunicationWayResponse parses an HTTP response from a DeleteCommunicationWayWithResponse call
func ParseDeleteCommunicationWayResponse(rsp *http.Response) (*DeleteCommunicationWayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommunicationWayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommunicationWayByIdResponse parses an HTTP response from a GetCommunicationWayByIdWithResponse call
func ParseGetCommunicationWayByIdResponse(rsp *http.Response) (*GetCommunicationWayByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommunicationWayByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCommunicationWayResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCommunicationWayResponse parses an HTTP response from a UpdateCommunicationWayWithResponse call
func ParseUpdateCommunicationWayResponse(rsp *http.Response) (*UpdateCommunicationWayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCommunicationWayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCommunicationWayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommunicationWayKeysResponse parses an HTTP response from a GetCommunicationWayKeysWithResponse call
func ParseGetCommunicationWayKeysResponse(rsp *http.Response) (*GetCommunicationWayKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommunicationWayKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]struct {
				// Create Date the communication way key was created
				Create *time.Time `json:"create,omitempty"`

				// Id The id of the communication way key
				// 1. ID: 1 - Privat
				// 2. ID: 2 - Arbeit
				// 3. ID: 3 - Fax
				// 4. ID: 4 - Mobil
				// 5. ID: 5 - " "
				// 6. ID: 6 - Autobox
				// 7. ID: 7 - Newsletter
				// 8. ID: 8 - Rechnungsadresse
				Id *string `json:"id,omitempty"`

				// Name Name of the communication way key
				Name *GetCommunicationWayKeys200ObjectsName `json:"name,omitempty"`

				// ObjectName object name which is 'CommunicationWayKey'.
				ObjectName      *string `json:"objectName,omitempty"`
				TranslationCode *string `json:"translationCode,omitempty"`

				// Upadate Date the communication way key was last updated
				Upadate *time.Time `json:"upadate,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactsResponse parses an HTTP response from a GetContactsWithResponse call
func ParseGetContactsResponse(rsp *http.Response) (*GetContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContactResponse parses an HTTP response from a CreateContactWithResponse call
func ParseCreateContactResponse(rsp *http.Response) (*CreateContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindContactsByCustomFieldValueResponse parses an HTTP response from a FindContactsByCustomFieldValueWithResponse call
func ParseFindContactsByCustomFieldValueResponse(rsp *http.Response) (*FindContactsByCustomFieldValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindContactsByCustomFieldValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNextCustomerNumberResponse parses an HTTP response from a GetNextCustomerNumberWithResponse call
func ParseGetNextCustomerNumberResponse(rsp *http.Response) (*GetNextCustomerNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNextCustomerNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Objects Next available customer number
			Objects *string `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContactCustomerNumberAvailabilityCheckResponse parses an HTTP response from a ContactCustomerNumberAvailabilityCheckWithResponse call
func ParseContactCustomerNumberAvailabilityCheckResponse(rsp *http.Response) (*ContactCustomerNumberAvailabilityCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactCustomerNumberAvailabilityCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *bool `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactResponse parses an HTTP response from a DeleteContactWithResponse call
func ParseDeleteContactResponse(rsp *http.Response) (*DeleteContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactByIdResponse parses an HTTP response from a GetContactByIdWithResponse call
func ParseGetContactByIdResponse(rsp *http.Response) (*GetContactByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactResponse parses an HTTP response from a UpdateContactWithResponse call
func ParseUpdateContactResponse(rsp *http.Response) (*UpdateContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelContactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactTabsItemCountByIdResponse parses an HTTP response from a GetContactTabsItemCountByIdWithResponse call
func ParseGetContactTabsItemCountByIdResponse(rsp *http.Response) (*GetContactTabsItemCountByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactTabsItemCountByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreditNotes *float32 `json:"creditNotes,omitempty"`
			Documents   *float32 `json:"documents,omitempty"`
			InvoicePos  *float32 `json:"invoicePos,omitempty"`
			Invoices    *float32 `json:"invoices,omitempty"`
			Letters     *float32 `json:"letters,omitempty"`
			Orders      *float32 `json:"orders,omitempty"`
			Parts       *string  `json:"parts,omitempty"`
			Persons     *float32 `json:"persons,omitempty"`
			Vouchers    *float32 `json:"vouchers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactAddressesResponse parses an HTTP response from a GetContactAddressesWithResponse call
func ParseGetContactAddressesResponse(rsp *http.Response) (*GetContactAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactAddressResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContactAddressResponse parses an HTTP response from a CreateContactAddressWithResponse call
func ParseCreateContactAddressResponse(rsp *http.Response) (*CreateContactAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContactAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelContactAddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteContactAddressResponse parses an HTTP response from a DeleteContactAddressWithResponse call
func ParseDeleteContactAddressResponse(rsp *http.Response) (*DeleteContactAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContactAddressIdResponse parses an HTTP response from a ContactAddressIdWithResponse call
func ParseContactAddressIdResponse(rsp *http.Response) (*ContactAddressIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactAddressIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactAddressResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactAddressResponse parses an HTTP response from a UpdateContactAddressWithResponse call
func ParseUpdateContactAddressResponse(rsp *http.Response) (*UpdateContactAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelContactAddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetContactFieldsResponse parses an HTTP response from a GetContactFieldsWithResponse call
func ParseGetContactFieldsResponse(rsp *http.Response) (*GetContactFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactCustomFieldResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContactFieldResponse parses an HTTP response from a CreateContactFieldWithResponse call
func ParseCreateContactFieldResponse(rsp *http.Response) (*CreateContactFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContactFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelContactCustomFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactCustomFieldIdResponse parses an HTTP response from a DeleteContactCustomFieldIdWithResponse call
func ParseDeleteContactCustomFieldIdResponse(rsp *http.Response) (*DeleteContactCustomFieldIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactCustomFieldIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactFieldsByIdResponse parses an HTTP response from a GetContactFieldsByIdWithResponse call
func ParseGetContactFieldsByIdResponse(rsp *http.Response) (*GetContactFieldsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactFieldsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactCustomFieldResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactfieldResponse parses an HTTP response from a UpdateContactfieldWithResponse call
func ParseUpdateContactfieldResponse(rsp *http.Response) (*UpdateContactfieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactfieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelContactCustomFieldResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactFieldSettingsResponse parses an HTTP response from a GetContactFieldSettingsWithResponse call
func ParseGetContactFieldSettingsResponse(rsp *http.Response) (*GetContactFieldSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactFieldSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactCustomFieldSettingResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContactFieldSettingResponse parses an HTTP response from a CreateContactFieldSettingWithResponse call
func ParseCreateContactFieldSettingResponse(rsp *http.Response) (*CreateContactFieldSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContactFieldSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactCustomFieldSettingResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactFieldSettingResponse parses an HTTP response from a DeleteContactFieldSettingWithResponse call
func ParseDeleteContactFieldSettingResponse(rsp *http.Response) (*DeleteContactFieldSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactFieldSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactFieldSettingByIdResponse parses an HTTP response from a GetContactFieldSettingByIdWithResponse call
func ParseGetContactFieldSettingByIdResponse(rsp *http.Response) (*GetContactFieldSettingByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactFieldSettingByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelContactCustomFieldSettingResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactFieldSettingResponse parses an HTTP response from a UpdateContactFieldSettingWithResponse call
func ParseUpdateContactFieldSettingResponse(rsp *http.Response) (*UpdateContactFieldSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactFieldSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelContactCustomFieldSettingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReferenceCountResponse parses an HTTP response from a GetReferenceCountWithResponse call
func ParseGetReferenceCountResponse(rsp *http.Response) (*GetReferenceCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferenceCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Objects the count of all references
			Objects *int `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditNotesResponse parses an HTTP response from a GetCreditNotesWithResponse call
func ParseGetCreditNotesResponse(rsp *http.Response) (*GetCreditNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCreditNoteResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCreditNoteFromInvoiceResponse parses an HTTP response from a CreateCreditNoteFromInvoiceWithResponse call
func ParseCreateCreditNoteFromInvoiceResponse(rsp *http.Response) (*CreateCreditNoteFromInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCreditNoteFromInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Objects *struct {
				// CreditNote creditNote model
				CreditNote *ModelCreditNoteResponse `json:"creditNote,omitempty"`

				// CreditNotePos An array of creditNote positions
				CreditNotePos *[]ModelCreditNotePosResponse `json:"creditNotePos,omitempty"`

				// Discount An array of discounts (can be empty)
				Discount *[]ModelDiscountsResponse `json:"discount,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateCreditNoteFromVoucherResponse parses an HTTP response from a CreateCreditNoteFromVoucherWithResponse call
func ParseCreateCreditNoteFromVoucherResponse(rsp *http.Response) (*CreateCreditNoteFromVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCreditNoteFromVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Objects *struct {
				// CreditNote creditNote model
				CreditNote *ModelCreditNoteResponse `json:"creditNote,omitempty"`

				// CreditNotePos An array of creditNote positions
				CreditNotePos *[]ModelCreditNotePosResponse `json:"creditNotePos,omitempty"`

				// Discount An array of discounts (can be empty)
				Discount *[]ModelDiscountsResponse `json:"discount,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreatecreditNoteResponse parses an HTTP response from a CreatecreditNoteWithResponse call
func ParseCreatecreditNoteResponse(rsp *http.Response) (*CreatecreditNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatecreditNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SaveCreditNoteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletecreditNoteResponse parses an HTTP response from a DeletecreditNoteWithResponse call
func ParseDeletecreditNoteResponse(rsp *http.Response) (*DeletecreditNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletecreditNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetcreditNoteByIdResponse parses an HTTP response from a GetcreditNoteByIdWithResponse call
func ParseGetcreditNoteByIdResponse(rsp *http.Response) (*GetcreditNoteByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetcreditNoteByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCreditNoteResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatecreditNoteResponse parses an HTTP response from a UpdatecreditNoteWithResponse call
func ParseUpdatecreditNoteResponse(rsp *http.Response) (*UpdatecreditNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatecreditNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCreditNoteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBookCreditNoteResponse parses an HTTP response from a BookCreditNoteWithResponse call
func ParseBookCreditNoteResponse(rsp *http.Response) (*BookCreditNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BookCreditNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalInformation *string    `json:"additionalInformation,omitempty"`
			AmmountPayed          *string    `json:"ammountPayed,omitempty"`
			BookingDate           *time.Time `json:"bookingDate,omitempty"`

			// Create Date of email creation
			Create     *time.Time `json:"create,omitempty"`
			CreditNote *struct {
				// Id The id of the credit note
				Id int `json:"id"`

				// ObjectName Internal object name which is 'CreditNote'.
				ObjectName string `json:"objectName"`
			} `json:"creditNote,omitempty"`
			FromStatus *string `json:"fromStatus,omitempty"`
			Id         *string `json:"id,omitempty"`
			ObjectName *string `json:"objectName,omitempty"`

			// SevClient Client to which creditNote belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id int `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`
			ToStatus *string `json:"toStatus,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCreditNoteTemplateResponse parses an HTTP response from a UpdateCreditNoteTemplateWithResponse call
func ParseUpdateCreditNoteTemplateResponse(rsp *http.Response) (*UpdateCreditNoteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCreditNoteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelChangeLayoutResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreditNoteEnshrineResponse parses an HTTP response from a CreditNoteEnshrineWithResponse call
func ParseCreditNoteEnshrineResponse(rsp *http.Response) (*CreditNoteEnshrineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreditNoteEnshrineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreditNoteGetPdfResponse parses an HTTP response from a CreditNoteGetPdfWithResponse call
func ParseCreditNoteGetPdfResponse(rsp *http.Response) (*CreditNoteGetPdfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreditNoteGetPdfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Base64encoded *bool               `json:"base64encoded,omitempty"`
			Content       *openapi_types.File `json:"content,omitempty"`
			Filename      *string             `json:"filename,omitempty"`
			MimeType      *string             `json:"mimeType,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreditNoteResetToDraftResponse parses an HTTP response from a CreditNoteResetToDraftWithResponse call
func ParseCreditNoteResetToDraftResponse(rsp *http.Response) (*CreditNoteResetToDraftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreditNoteResetToDraftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				// Address Complete address of the recipient including name, street, city, zip and country.<br>
				//      Line breaks can be used and will be displayed on the invoice pdf.
				Address *string `json:"address"`

				// AddressCountry Can be omitted as complete address is defined in address attribute
				AddressCountry *struct {
					// Id Unique identifier of the country
					Id string `json:"id"`

					// ObjectName Model name, which is 'StaticCountry'
					ObjectName string `json:"objectName"`
				} `json:"addressCountry"`

				// Contact The contact used in the creditNote
				Contact *struct {
					// Id Unique identifier of the contact
					Id string `json:"id"`

					// ObjectName Model name, which is 'Contact'
					ObjectName string `json:"objectName"`
				} `json:"contact"`

				// ContactPerson The user who acts as a contact person for the creditNote
				ContactPerson *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"contactPerson"`

				// Create Date of creditNote creation
				Create *time.Time `json:"create,omitempty"`

				// CreateUser Will be filled automatically by our system and can't be changed
				CreateUser *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"createUser,omitempty"`

				// CreditNoteDate The credit note date
				CreditNoteDate *time.Time `json:"creditNoteDate,omitempty"`

				// CreditNoteNumber The creditNote number
				CreditNoteNumber *string `json:"creditNoteNumber"`

				// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
				Currency             *string      `json:"currency"`
				CustomerInternalNote *interface{} `json:"customerInternalNote,omitempty"`

				// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
				DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

				// FootText Certain html tags can be used here to format your text
				FootText *string `json:"footText"`

				// HeadText Certain html tags can be used here to format your text
				HeadText *string `json:"headText"`

				// Header Normally consist of prefix plus the creditNote number
				Header *string `json:"header"`

				// Id The creditNote id
				Id *string `json:"id,omitempty"`

				// ObjectName The creditNote object name
				ObjectName *string `json:"objectName,omitempty"`

				// SendDate The date the creditNote was sent to the customer
				SendDate *time.Time `json:"sendDate"`

				// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
				//      *     API-Overview to understand how this attribute can be used before using it!
				SendType *CreditNoteResetToDraft200ObjectsSendType `json:"sendType"`

				// SevClient Client to which creditNote belongs. Will be filled automatically
				SevClient *struct {
					// Id Unique identifier of the client
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevClient'
					ObjectName string `json:"objectName"`
				} `json:"sevClient,omitempty"`

				// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
				ShowNet *bool `json:"showNet,omitempty"`

				// SmallSettlement Defines if the client uses the small settlement scheme.
				//     If yes, the creditNote must not contain any vat
				SmallSettlement *bool `json:"smallSettlement"`

				// Status Please have a look in
				//     <a href='#tag/CreditNote/Status-of-credit-notes'>status of credit note</a>
				//     to see what the different status codes mean
				Status *CreditNoteResetToDraft200ObjectsStatus `json:"status,omitempty"`

				// SumDiscounts Sum of all discounts in the creditNote
				SumDiscounts *string `json:"sumDiscounts,omitempty"`

				// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
				SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

				// SumGross Gross sum of the creditNote
				SumGross *string `json:"sumGross,omitempty"`

				// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
				SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

				// SumNet Net sum of the creditNote
				SumNet *string `json:"sumNet,omitempty"`

				// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
				SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

				// SumTax Tax sum of the creditNote
				SumTax *string `json:"sumTax,omitempty"`

				// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
				SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

				// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
				TaxRate *string `json:"taxRate"`

				// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				TaxRule *struct {
					// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
					//
					// Defines the vat-regulation.
					// For "Regelbesteuerung" it can be one of:
					//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
					//   - `2` - Ausfuhren - allowedTaxRates: 0.0
					//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
					//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
					//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
					//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
					//
					// For small business owner ("Kleinunternehmer") it can be:
					//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
					Id CreditNoteResetToDraft200ObjectsTaxRuleId `json:"id"`

					// ObjectName Name of the object. Must always be TaxRule
					ObjectName CreditNoteResetToDraft200ObjectsTaxRuleObjectName `json:"objectName"`
				} `json:"taxRule,omitempty"`

				// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax set of the creditNote. Needs to be added if you chose the tax type custom
				TaxSet *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name, which is 'TaxSet'
					ObjectName string `json:"objectName"`
				} `json:"taxSet"`
				TaxText *interface{} `json:"taxText,omitempty"`

				// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax type of the creditNote.
				// There are four tax types:
				// 1. default - Umsatzsteuer ausweisen
				// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
				// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
				// 4. custom - Using custom tax set
				// 5. ss - Not subject to VAT according to §19 1 UStG
				// Tax rates are heavily connected to the tax type used.
				TaxType *string `json:"taxType"`

				// Update Date of last creditNote update
				Update *time.Time `json:"update,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreditNoteResetToOpenResponse parses an HTTP response from a CreditNoteResetToOpenWithResponse call
func ParseCreditNoteResetToOpenResponse(rsp *http.Response) (*CreditNoteResetToOpenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreditNoteResetToOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				// Address Complete address of the recipient including name, street, city, zip and country.<br>
				//      Line breaks can be used and will be displayed on the invoice pdf.
				Address *string `json:"address"`

				// AddressCountry Can be omitted as complete address is defined in address attribute
				AddressCountry *struct {
					// Id Unique identifier of the country
					Id string `json:"id"`

					// ObjectName Model name, which is 'StaticCountry'
					ObjectName string `json:"objectName"`
				} `json:"addressCountry"`

				// Contact The contact used in the creditNote
				Contact *struct {
					// Id Unique identifier of the contact
					Id string `json:"id"`

					// ObjectName Model name, which is 'Contact'
					ObjectName string `json:"objectName"`
				} `json:"contact"`

				// ContactPerson The user who acts as a contact person for the creditNote
				ContactPerson *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"contactPerson"`

				// Create Date of creditNote creation
				Create *time.Time `json:"create,omitempty"`

				// CreateUser Will be filled automatically by our system and can't be changed
				CreateUser *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"createUser,omitempty"`

				// CreditNoteDate The credit note date
				CreditNoteDate *time.Time `json:"creditNoteDate,omitempty"`

				// CreditNoteNumber The creditNote number
				CreditNoteNumber *string `json:"creditNoteNumber"`

				// Currency Currency used in the creditNote. Needs to be currency code according to ISO-4217
				Currency *string `json:"currency"`

				// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
				CustomerInternalNote *string `json:"customerInternalNote"`

				// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
				DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

				// FootText Certain html tags can be used here to format your text
				FootText *string `json:"footText"`

				// HeadText Certain html tags can be used here to format your text
				HeadText *string `json:"headText"`

				// Header Normally consist of prefix plus the creditNote number
				Header *string `json:"header"`

				// Id The creditNote id
				Id *string `json:"id,omitempty"`

				// ObjectName The creditNote object name
				ObjectName *string `json:"objectName,omitempty"`

				// SendDate The date the creditNote was sent to the customer
				SendDate *time.Time `json:"sendDate"`

				// SendType Type which was used to send the creditNote. IMPORTANT: Please refer to the creditNote section of the
				//      *     API-Overview to understand how this attribute can be used before using it!
				SendType *CreditNoteResetToOpen200ObjectsSendType `json:"sendType"`

				// SevClient Client to which creditNote belongs. Will be filled automatically
				SevClient *struct {
					// Id Unique identifier of the client
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevClient'
					ObjectName string `json:"objectName"`
				} `json:"sevClient,omitempty"`

				// ShowNet If true, the net amount of each position will be shown on the creditNote. Otherwise gross amount
				ShowNet *bool `json:"showNet,omitempty"`

				// SmallSettlement Defines if the client uses the small settlement scheme.
				//     If yes, the creditNote must not contain any vat
				SmallSettlement *bool        `json:"smallSettlement"`
				Status          *interface{} `json:"status,omitempty"`

				// SumDiscounts Sum of all discounts in the creditNote
				SumDiscounts *string `json:"sumDiscounts,omitempty"`

				// SumDiscountsForeignCurrency Discounts sum of the creditNote in the foreign currency
				SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

				// SumGross Gross sum of the creditNote
				SumGross *string `json:"sumGross,omitempty"`

				// SumGrossForeignCurrency Gross sum of the creditNote in the foreign currency
				SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

				// SumNet Net sum of the creditNote
				SumNet *string `json:"sumNet,omitempty"`

				// SumNetForeignCurrency Net sum of the creditNote in the foreign currency
				SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

				// SumTax Tax sum of the creditNote
				SumTax *string `json:"sumTax,omitempty"`

				// SumTaxForeignCurrency Tax sum of the creditNote in the foreign currency
				SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

				// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
				TaxRate *string `json:"taxRate"`

				// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				TaxRule *struct {
					// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
					//
					// Defines the vat-regulation.
					// For "Regelbesteuerung" it can be one of:
					//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
					//   - `2` - Ausfuhren - allowedTaxRates: 0.0
					//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
					//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
					//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
					//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
					//
					// For small business owner ("Kleinunternehmer") it can be:
					//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
					Id CreditNoteResetToOpen200ObjectsTaxRuleId `json:"id"`

					// ObjectName Name of the object. Must always be TaxRule
					ObjectName CreditNoteResetToOpen200ObjectsTaxRuleObjectName `json:"objectName"`
				} `json:"taxRule,omitempty"`

				// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax set of the creditNote. Needs to be added if you chose the tax type custom
				TaxSet *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name, which is 'TaxSet'
					ObjectName string `json:"objectName"`
				} `json:"taxSet"`

				// TaxText A common tax text would be 'Umsatzsteuer 19%'
				TaxText *string `json:"taxText"`

				// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax type of the creditNote.
				// There are four tax types:
				// 1. default - Umsatzsteuer ausweisen
				// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
				// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
				// 4. custom - Using custom tax set
				// 5. ss - Not subject to VAT according to §19 1 UStG
				// Tax rates are heavily connected to the tax type used.
				TaxType *string `json:"taxType"`

				// Update Date of last creditNote update
				Update *time.Time `json:"update,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreditNoteSendByResponse parses an HTTP response from a CreditNoteSendByWithResponse call
func ParseCreditNoteSendByResponse(rsp *http.Response) (*CreditNoteSendByResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreditNoteSendByResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCreditNoteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendCreditNoteByPrintingResponse parses an HTTP response from a SendCreditNoteByPrintingWithResponse call
func ParseSendCreditNoteByPrintingResponse(rsp *http.Response) (*SendCreditNoteByPrintingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendCreditNoteByPrintingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelCreditNoteSendByWithRender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendCreditNoteViaEMailResponse parses an HTTP response from a SendCreditNoteViaEMailWithResponse call
func ParseSendCreditNoteViaEMailResponse(rsp *http.Response) (*SendCreditNoteViaEMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendCreditNoteViaEMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Objects *[]ModelCreditNoteMailResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetcreditNotePositionsResponse parses an HTTP response from a GetcreditNotePositionsWithResponse call
func ParseGetcreditNotePositionsResponse(rsp *http.Response) (*GetcreditNotePositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetcreditNotePositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelCreditNotePosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLetterpapersWithThumbResponse parses an HTTP response from a GetLetterpapersWithThumbWithResponse call
func ParseGetLetterpapersWithThumbResponse(rsp *http.Response) (*GetLetterpapersWithThumbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLetterpapersWithThumbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Letterpapers *[]struct {
				Default   *int    `json:"default,omitempty"`
				Id        *string `json:"id,omitempty"`
				Img       *string `json:"img,omitempty"`
				Name      *string `json:"name,omitempty"`
				Pdf       *string `json:"pdf,omitempty"`
				SevClient *string `json:"sevClient,omitempty"`
			} `json:"letterpapers,omitempty"`
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTemplatesResponse parses an HTTP response from a GetTemplatesWithResponse call
func ParseGetTemplatesResponse(rsp *http.Response) (*GetTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result    *string `json:"result,omitempty"`
			Templates *[]struct {
				Default         *int    `json:"default,omitempty"`
				Html            *string `json:"html,omitempty"`
				Id              *string `json:"id,omitempty"`
				Name            *string `json:"name,omitempty"`
				Premium         *bool   `json:"premium,omitempty"`
				SevClient       *string `json:"sevClient,omitempty"`
				TranslationCode *string `json:"translationCode,omitempty"`
				Type            *string `json:"type,omitempty"`
			} `json:"templates,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportContactResponse parses an HTTP response from a ExportContactWithResponse call
func ParseExportContactResponse(rsp *http.Response) (*ExportContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportCreditNoteResponse parses an HTTP response from a ExportCreditNoteWithResponse call
func ParseExportCreditNoteResponse(rsp *http.Response) (*ExportCreditNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportCreditNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportDatevResponse parses an HTTP response from a ExportDatevWithResponse call
func ParseExportDatevResponse(rsp *http.Response) (*ExportDatevResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportDatevResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportInvoiceResponse parses an HTTP response from a ExportInvoiceWithResponse call
func ParseExportInvoiceResponse(rsp *http.Response) (*ExportInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportInvoiceZipResponse parses an HTTP response from a ExportInvoiceZipWithResponse call
func ParseExportInvoiceZipResponse(rsp *http.Response) (*ExportInvoiceZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportInvoiceZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportTransactionsResponse parses an HTTP response from a ExportTransactionsWithResponse call
func ParseExportTransactionsResponse(rsp *http.Response) (*ExportTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportVoucherResponse parses an HTTP response from a ExportVoucherWithResponse call
func ParseExportVoucherResponse(rsp *http.Response) (*ExportVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Base64Encoded *bool   `json:"base64Encoded,omitempty"`
			Content       *string `json:"content,omitempty"`
			Filename      *string `json:"filename,omitempty"`
			Mimetype      *string `json:"mimetype,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportVoucherZipResponse parses an HTTP response from a ExportVoucherZipWithResponse call
func ParseExportVoucherZipResponse(rsp *http.Response) (*ExportVoucherZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportVoucherZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicesResponse parses an HTTP response from a GetInvoicesWithResponse call
func ParseGetInvoicesResponse(rsp *http.Response) (*GetInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelInvoiceResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInvoiceFromOrderResponse parses an HTTP response from a CreateInvoiceFromOrderWithResponse call
func ParseCreateInvoiceFromOrderResponse(rsp *http.Response) (*CreateInvoiceFromOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInvoiceFromOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInvoiceReminderResponse parses an HTTP response from a CreateInvoiceReminderWithResponse call
func ParseCreateInvoiceReminderResponse(rsp *http.Response) (*CreateInvoiceReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInvoiceReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInvoiceByFactoryResponse parses an HTTP response from a CreateInvoiceByFactoryWithResponse call
func ParseCreateInvoiceByFactoryResponse(rsp *http.Response) (*CreateInvoiceByFactoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInvoiceByFactoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SaveInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetInvoiceByIdResponse parses an HTTP response from a GetInvoiceByIdWithResponse call
func ParseGetInvoiceByIdResponse(rsp *http.Response) (*GetInvoiceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelInvoiceResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBookInvoiceResponse parses an HTTP response from a BookInvoiceWithResponse call
func ParseBookInvoiceResponse(rsp *http.Response) (*BookInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BookInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalInformation *string    `json:"additionalInformation,omitempty"`
			AmmountPayed          *string    `json:"ammountPayed,omitempty"`
			BookingDate           *time.Time `json:"bookingDate,omitempty"`

			// Create Date of email creation
			Create     *time.Time `json:"create,omitempty"`
			CreditNote *struct {
				// Id The id of the invoice
				Id int `json:"id"`

				// ObjectName Internal object name which is 'Invoice'.
				ObjectName string `json:"objectName"`
			} `json:"creditNote,omitempty"`
			FromStatus *string `json:"fromStatus,omitempty"`
			Id         *string `json:"id,omitempty"`
			ObjectName *string `json:"objectName,omitempty"`

			// SevClient Client to which invoice belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id int `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`
			ToStatus *string `json:"toStatus,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelInvoiceResponse parses an HTTP response from a CancelInvoiceWithResponse call
func ParseCancelInvoiceResponse(rsp *http.Response) (*CancelInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateInvoiceTemplateResponse parses an HTTP response from a UpdateInvoiceTemplateWithResponse call
func ParseUpdateInvoiceTemplateResponse(rsp *http.Response) (*UpdateInvoiceTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInvoiceTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelChangeLayoutResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInvoiceEnshrineResponse parses an HTTP response from a InvoiceEnshrineWithResponse call
func ParseInvoiceEnshrineResponse(rsp *http.Response) (*InvoiceEnshrineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceEnshrineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetIsInvoicePartiallyPaidResponse parses an HTTP response from a GetIsInvoicePartiallyPaidWithResponse call
func ParseGetIsInvoicePartiallyPaidResponse(rsp *http.Response) (*GetIsInvoicePartiallyPaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIsInvoicePartiallyPaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *bool `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInvoiceGetPdfResponse parses an HTTP response from a InvoiceGetPdfWithResponse call
func ParseInvoiceGetPdfResponse(rsp *http.Response) (*InvoiceGetPdfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceGetPdfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Base64encoded *bool               `json:"base64encoded,omitempty"`
			Content       *openapi_types.File `json:"content,omitempty"`
			Filename      *string             `json:"filename,omitempty"`
			MimeType      *string             `json:"mimeType,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicePositionsByIdResponse parses an HTTP response from a GetInvoicePositionsByIdWithResponse call
func ParseGetInvoicePositionsByIdResponse(rsp *http.Response) (*GetInvoicePositionsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicePositionsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelInvoicePosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInvoiceGetXmlResponse parses an HTTP response from a InvoiceGetXmlWithResponse call
func ParseInvoiceGetXmlResponse(rsp *http.Response) (*InvoiceGetXmlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceGetXmlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Object *string `json:"object,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInvoiceRenderResponse parses an HTTP response from a InvoiceRenderWithResponse call
func ParseInvoiceRenderResponse(rsp *http.Response) (*InvoiceRenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceRenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			DocId      *string `json:"docId,omitempty"`
			Pages      *int    `json:"pages,omitempty"`
			Parameters *[]struct {
				Key    *string `json:"key,omitempty"`
				Name   *string `json:"name,omitempty"`
				Value  *string `json:"value,omitempty"`
				Values *[]struct {
					Name            *string `json:"name,omitempty"`
					TranslationCade *string `json:"translationCade,omitempty"`
					Value           *string `json:"value,omitempty"`
				} `json:"values,omitempty"`
				Visible *bool `json:"visible,omitempty"`
			} `json:"parameters,omitempty"`
			Thumbs *[]interface{} `json:"thumbs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseInvoiceResetToDraftResponse parses an HTTP response from a InvoiceResetToDraftWithResponse call
func ParseInvoiceResetToDraftResponse(rsp *http.Response) (*InvoiceResetToDraftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceResetToDraftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				AccountIntervall   *interface{} `json:"accountIntervall,omitempty"`
				AccountNextInvoice *interface{} `json:"accountNextInvoice,omitempty"`

				// Address Complete address of the recipient including name, street, city, zip and country.
				//      * Line breaks can be used and will be displayed on the invoice pdf.
				Address *string `json:"address,omitempty"`

				// AddressCountry Can be omitted as complete address is defined in address attribute
				AddressCountry *struct {
					// Id Unique identifier of the country
					Id string `json:"id"`

					// ObjectName Model name, which is 'StaticCountry'
					ObjectName string `json:"objectName"`
				} `json:"addressCountry,omitempty"`

				// Contact The contact used in the invoice
				Contact *struct {
					// Id Unique identifier of the contact
					Id string `json:"id"`

					// ObjectName Model name, which is 'Contact'
					ObjectName string `json:"objectName"`
				} `json:"contact,omitempty"`

				// ContactPerson The user who acts as a contact person for the invoice
				ContactPerson *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"contactPerson,omitempty"`

				// CostCentre Cost centre for the invoice
				CostCentre *struct {
					// Id Unique identifier of the cost centre
					Id string `json:"id"`

					// ObjectName Model name, which is 'CostCentre'
					ObjectName string `json:"objectName"`
				} `json:"costCentre,omitempty"`

				// Create Date of invoice creation
				Create *time.Time `json:"create,omitempty"`

				// CreateUser Will be filled automatically by our system and can't be changed
				CreateUser *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"createUser,omitempty"`

				// Currency Currency used in the invoice. Needs to be currency code according to ISO-4217
				Currency *string `json:"currency,omitempty"`

				// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
				CustomerInternalNote *string `json:"customerInternalNote,omitempty"`

				// DatevConnectOnline Internal attribute
				DatevConnectOnline *map[string]interface{} `json:"datevConnectOnline,omitempty"`

				// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
				DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

				// DeliveryDateUntil If the delivery date should be a time range, another timestamp can be provided in this attribute
				//      * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
				DeliveryDateUntil *string `json:"deliveryDateUntil,omitempty"`

				// Discount If you want to give a discount, define the percentage here. Otherwise provide zero as value
				Discount *string `json:"discount,omitempty"`

				// DiscountTime If a value other than zero is used for the discount attribute,
				//     you need to specify the amount of days for which the discount is granted.
				DiscountTime *string `json:"discountTime,omitempty"`

				// DunningLevel Defines how many reminders have already been sent for the invoice.
				//     Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
				DunningLevel *string      `json:"dunningLevel,omitempty"`
				Enshrined    *interface{} `json:"enshrined,omitempty"`

				// FootText Certain html tags can be used here to format your text
				FootText *string `json:"footText,omitempty"`

				// HeadText Certain html tags can be used here to format your text
				HeadText *string `json:"headText,omitempty"`

				// Header Normally consist of prefix plus the invoice number
				Header *string `json:"header,omitempty"`

				// Id The invoice id
				Id *string `json:"id,omitempty"`

				// InvoiceDate The invoice date.
				InvoiceDate *string `json:"invoiceDate,omitempty"`

				// InvoiceNumber The invoice number
				InvoiceNumber *string `json:"invoiceNumber,omitempty"`

				// InvoiceType Type of the invoice. For more information on the different types, check
				//      <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
				InvoiceType *InvoiceResetToDraft200ObjectsInvoiceType `json:"invoiceType,omitempty"`

				// ObjectName The invoice object name
				ObjectName *string `json:"objectName,omitempty"`

				// Origin Origin of the invoice. Could f.e. be an order
				Origin *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name. Could f.e. be 'Order''
					ObjectName string `json:"objectName"`
				} `json:"origin,omitempty"`

				// PaidAmount Amount which has already been paid for this invoice by the customer
				PaidAmount *float32     `json:"paidAmount,omitempty"`
				PayDate    *interface{} `json:"payDate,omitempty"`

				// PaymentMethod Payment method used for the invoice
				PaymentMethod *struct {
					// Id Unique identifier of the payment method
					Id string `json:"id"`

					// ObjectName Model name, which is 'PaymentMethod'
					ObjectName string `json:"objectName"`
				} `json:"paymentMethod,omitempty"`

				// ReminderCharge The additional reminder charge
				ReminderCharge *string `json:"reminderCharge,omitempty"`

				// ReminderDeadline Deadline of the reminder as timestamp
				ReminderDeadline *time.Time `json:"reminderDeadline,omitempty"`

				// ReminderDebit Debit of the reminder
				ReminderDebit *string `json:"reminderDebit,omitempty"`

				// ReminderTotal Total reminder amount
				ReminderTotal *string `json:"reminderTotal,omitempty"`

				// SendDate The date the invoice was sent to the customer
				SendDate *time.Time `json:"sendDate,omitempty"`

				// SendPaymentReceivedNotificationDate Internal attribute
				SendPaymentReceivedNotificationDate *string `json:"sendPaymentReceivedNotificationDate,omitempty"`

				// SendType Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
				//      *     API-Overview to understand how this attribute can be used before using it!
				SendType *InvoiceResetToDraft200ObjectsSendType `json:"sendType,omitempty"`

				// SevClient Client to which invoice belongs. Will be filled automatically
				SevClient *struct {
					// Id Unique identifier of the client
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevClient'
					ObjectName string `json:"objectName"`
				} `json:"sevClient,omitempty"`

				// ShowNet If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
				ShowNet *bool `json:"showNet,omitempty"`

				// SmallSettlement Defines if the client uses the small settlement scheme.
				//     If yes, the invoice must not contain any vat
				SmallSettlement *bool `json:"smallSettlement,omitempty"`

				// Status Please have a look in our
				//      <a href='#tag/Invoice/Types-and-status-of-invoices'>Types and status of invoices</a>
				//      to see what the different status codes mean
				Status *InvoiceResetToDraft200ObjectsStatus `json:"status,omitempty"`

				// SumDiscounts Sum of all discounts in the invoice
				SumDiscounts *string `json:"sumDiscounts,omitempty"`

				// SumDiscountsForeignCurrency Discounts sum of the invoice in the foreign currency
				SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

				// SumGross Gross sum of the invoice
				SumGross *string `json:"sumGross,omitempty"`

				// SumGrossAccounting Gross accounting sum of the invoice. Is usually the same as sumGross
				SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

				// SumGrossForeignCurrency Gross sum of the invoice in the foreign currency
				SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

				// SumNet Net sum of the invoice
				SumNet *string `json:"sumNet,omitempty"`

				// SumNetAccounting Net accounting sum of the invoice. Is usually the same as sumNet
				SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

				// SumNetForeignCurrency Net sum of the invoice in the foreign currency
				SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

				// SumTax Tax sum of the invoice
				SumTax *string `json:"sumTax,omitempty"`

				// SumTaxAccounting Tax accounting sum of the invoice. Is usually the same as sumTax
				SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

				// SumTaxForeignCurrency Tax sum of the invoice in the foreign currency
				SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

				// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
				TaxRate *string `json:"taxRate,omitempty"`

				// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				TaxRule *struct {
					// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
					//
					// Defines the vat-regulation.
					// For "Regelbesteuerung" it can be one of:
					//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
					//   - `2` - Ausfuhren - allowedTaxRates: 0.0
					//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
					//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
					//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
					//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
					//     - "Nicht im Inland steuerbare Leistung" is not available for:
					//       - advance invoice (`"invoiceType": "AR"`)
					//       - partial invoice (`"invoiceType": "TR"`)
					//       - final invoice (`"invoiceType": "ER"`)
					//
					// For small business owner ("Kleinunternehmer") it can be:
					//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
					Id InvoiceResetToDraft200ObjectsTaxRuleId `json:"id"`

					// ObjectName Name of the object. Must always be TaxRule
					ObjectName InvoiceResetToDraft200ObjectsTaxRuleObjectName `json:"objectName"`
				} `json:"taxRule,omitempty"`

				// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax set of the invoice. Needs to be added if you chose the tax type custom
				TaxSet *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name, which is 'TaxSet'
					ObjectName string `json:"objectName"`
				} `json:"taxSet,omitempty"`

				// TaxText A common tax text would be 'Umsatzsteuer 19%'
				TaxText *string `json:"taxText,omitempty"`

				// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax type of the invoice.
				// There are four tax types:
				// 1. default - Umsatzsteuer ausweisen
				// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
				// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
				// 4. custom - Using custom tax set
				// 5. ss - Not subject to VAT according to §19 1 UStG
				// Tax rates are heavily connected to the tax type used.
				TaxType *InvoiceResetToDraft200ObjectsTaxType `json:"taxType,omitempty"`

				// TimeToPay The time the customer has to pay the invoice in days
				TimeToPay *string `json:"timeToPay,omitempty"`

				// Update Date of last invoice update
				Update *time.Time `json:"update,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInvoiceResetToOpenResponse parses an HTTP response from a InvoiceResetToOpenWithResponse call
func ParseInvoiceResetToOpenResponse(rsp *http.Response) (*InvoiceResetToOpenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceResetToOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				AccountIntervall   *interface{} `json:"accountIntervall,omitempty"`
				AccountNextInvoice *interface{} `json:"accountNextInvoice,omitempty"`

				// Address Complete address of the recipient including name, street, city, zip and country.
				//      * Line breaks can be used and will be displayed on the invoice pdf.
				Address *string `json:"address,omitempty"`

				// AddressCountry Can be omitted as complete address is defined in address attribute
				AddressCountry *struct {
					// Id Unique identifier of the country
					Id string `json:"id"`

					// ObjectName Model name, which is 'StaticCountry'
					ObjectName string `json:"objectName"`
				} `json:"addressCountry,omitempty"`

				// Contact The contact used in the invoice
				Contact *struct {
					// Id Unique identifier of the contact
					Id string `json:"id"`

					// ObjectName Model name, which is 'Contact'
					ObjectName string `json:"objectName"`
				} `json:"contact,omitempty"`

				// ContactPerson The user who acts as a contact person for the invoice
				ContactPerson *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"contactPerson,omitempty"`

				// CostCentre Cost centre for the invoice
				CostCentre *struct {
					// Id Unique identifier of the cost centre
					Id string `json:"id"`

					// ObjectName Model name, which is 'CostCentre'
					ObjectName string `json:"objectName"`
				} `json:"costCentre,omitempty"`

				// Create Date of invoice creation
				Create *time.Time `json:"create,omitempty"`

				// CreateUser Will be filled automatically by our system and can't be changed
				CreateUser *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"createUser,omitempty"`

				// Currency Currency used in the invoice. Needs to be currency code according to ISO-4217
				Currency *string `json:"currency,omitempty"`

				// CustomerInternalNote Internal note of the customer. Contains data entered into field 'Referenz/Bestellnummer'
				CustomerInternalNote *string `json:"customerInternalNote,omitempty"`

				// DatevConnectOnline Internal attribute
				DatevConnectOnline *map[string]interface{} `json:"datevConnectOnline,omitempty"`

				// DeliveryDate Timestamp. This can also be a date range if you also use the attribute deliveryDateUntil
				DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

				// DeliveryDateUntil If the delivery date should be a time range, another timestamp can be provided in this attribute
				//      * to define a range from timestamp used in deliveryDate attribute to the timestamp used here.
				DeliveryDateUntil *string `json:"deliveryDateUntil,omitempty"`

				// Discount If you want to give a discount, define the percentage here. Otherwise provide zero as value
				Discount *string `json:"discount,omitempty"`

				// DiscountTime If a value other than zero is used for the discount attribute,
				//     you need to specify the amount of days for which the discount is granted.
				DiscountTime *string `json:"discountTime,omitempty"`

				// DunningLevel Defines how many reminders have already been sent for the invoice.
				//     Starts with 1 (Payment reminder) and should be incremented by one every time another reminder is sent.
				DunningLevel *string      `json:"dunningLevel,omitempty"`
				Enshrined    *interface{} `json:"enshrined,omitempty"`

				// FootText Certain html tags can be used here to format your text
				FootText *string `json:"footText,omitempty"`

				// HeadText Certain html tags can be used here to format your text
				HeadText *string `json:"headText,omitempty"`

				// Header Normally consist of prefix plus the invoice number
				Header *string `json:"header,omitempty"`

				// Id The invoice id
				Id *string `json:"id,omitempty"`

				// InvoiceDate The invoice date.
				InvoiceDate *string `json:"invoiceDate,omitempty"`

				// InvoiceNumber The invoice number
				InvoiceNumber *string `json:"invoiceNumber,omitempty"`

				// InvoiceType Type of the invoice. For more information on the different types, check
				//      <a href='#tag/Invoice/Types-and-status-of-invoices'>this</a> section
				InvoiceType *InvoiceResetToOpen200ObjectsInvoiceType `json:"invoiceType,omitempty"`

				// ObjectName The invoice object name
				ObjectName *string `json:"objectName,omitempty"`

				// Origin Origin of the invoice. Could f.e. be an order
				Origin *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name. Could f.e. be 'Order''
					ObjectName string `json:"objectName"`
				} `json:"origin,omitempty"`

				// PaidAmount Amount which has already been paid for this invoice by the customer
				PaidAmount *float32     `json:"paidAmount,omitempty"`
				PayDate    *interface{} `json:"payDate,omitempty"`

				// PaymentMethod Payment method used for the invoice
				PaymentMethod *struct {
					// Id Unique identifier of the payment method
					Id string `json:"id"`

					// ObjectName Model name, which is 'PaymentMethod'
					ObjectName string `json:"objectName"`
				} `json:"paymentMethod,omitempty"`

				// ReminderCharge The additional reminder charge
				ReminderCharge *string `json:"reminderCharge,omitempty"`

				// ReminderDeadline Deadline of the reminder as timestamp
				ReminderDeadline *time.Time `json:"reminderDeadline,omitempty"`

				// ReminderDebit Debit of the reminder
				ReminderDebit *string `json:"reminderDebit,omitempty"`

				// ReminderTotal Total reminder amount
				ReminderTotal *string `json:"reminderTotal,omitempty"`

				// SendDate The date the invoice was sent to the customer
				SendDate *time.Time `json:"sendDate,omitempty"`

				// SendPaymentReceivedNotificationDate Internal attribute
				SendPaymentReceivedNotificationDate *string `json:"sendPaymentReceivedNotificationDate,omitempty"`

				// SendType Type which was used to send the invoice. IMPORTANT: Please refer to the invoice section of the
				//      *     API-Overview to understand how this attribute can be used before using it!
				SendType *InvoiceResetToOpen200ObjectsSendType `json:"sendType,omitempty"`

				// SevClient Client to which invoice belongs. Will be filled automatically
				SevClient *struct {
					// Id Unique identifier of the client
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevClient'
					ObjectName string `json:"objectName"`
				} `json:"sevClient,omitempty"`

				// ShowNet If true, the net amount of each position will be shown on the invoice. Otherwise gross amount
				ShowNet *bool `json:"showNet,omitempty"`

				// SmallSettlement Defines if the client uses the small settlement scheme.
				//     If yes, the invoice must not contain any vat
				SmallSettlement *bool        `json:"smallSettlement,omitempty"`
				Status          *interface{} `json:"status,omitempty"`

				// SumDiscounts Sum of all discounts in the invoice
				SumDiscounts *string `json:"sumDiscounts,omitempty"`

				// SumDiscountsForeignCurrency Discounts sum of the invoice in the foreign currency
				SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

				// SumGross Gross sum of the invoice
				SumGross *string `json:"sumGross,omitempty"`

				// SumGrossAccounting Gross accounting sum of the invoice. Is usually the same as sumGross
				SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

				// SumGrossForeignCurrency Gross sum of the invoice in the foreign currency
				SumGrossForeignCurrency *string `json:"sumGrossForeignCurrency,omitempty"`

				// SumNet Net sum of the invoice
				SumNet *string `json:"sumNet,omitempty"`

				// SumNetAccounting Net accounting sum of the invoice. Is usually the same as sumNet
				SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

				// SumNetForeignCurrency Net sum of the invoice in the foreign currency
				SumNetForeignCurrency *string `json:"sumNetForeignCurrency,omitempty"`

				// SumTax Tax sum of the invoice
				SumTax *string `json:"sumTax,omitempty"`

				// SumTaxAccounting Tax accounting sum of the invoice. Is usually the same as sumTax
				SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

				// SumTaxForeignCurrency Tax sum of the invoice in the foreign currency
				SumTaxForeignCurrency *string `json:"sumTaxForeignCurrency,omitempty"`

				// TaxRate This is not used anymore. Use the taxRate of the individual positions instead.
				TaxRate *string `json:"taxRate,omitempty"`

				// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				TaxRule *struct {
					// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
					//
					// Defines the vat-regulation.
					// For "Regelbesteuerung" it can be one of:
					//   - `1` - Umsatzsteuerpflichtige Umsätze - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "default"`
					//   - `2` - Ausfuhren - allowedTaxRates: 0.0
					//   - `3` - Innergemeinschaftliche Lieferungen - tax rates: 0.0, 7.0, 19.0 - replaces `"taxType": "eu"`
					//   - `4` - Steuerfreie Umsätze §4 UStG - tax rates: 0.0
					//   - `5` - Reverse Charge gem. §13b UStG - tax rates: 0.0
					//   - `17` - Nicht im Inland steuerbare Leistung - tax rates: 0.0 - replaces `"taxType": "noteu"`
					//     - "Nicht im Inland steuerbare Leistung" is not available for:
					//       - advance invoice (`"invoiceType": "AR"`)
					//       - partial invoice (`"invoiceType": "TR"`)
					//       - final invoice (`"invoiceType": "ER"`)
					//
					// For small business owner ("Kleinunternehmer") it can be:
					//   - `11` - Steuer nicht erhoben nach §19UStG - tax rates: 0.0 - replaces `"taxType": "ss"`
					Id InvoiceResetToOpen200ObjectsTaxRuleId `json:"id"`

					// ObjectName Name of the object. Must always be TaxRule
					ObjectName InvoiceResetToOpen200ObjectsTaxRuleObjectName `json:"objectName"`
				} `json:"taxRule,omitempty"`

				// TaxSet **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax set of the invoice. Needs to be added if you chose the tax type custom
				TaxSet *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name, which is 'TaxSet'
					ObjectName string `json:"objectName"`
				} `json:"taxSet,omitempty"`

				// TaxText A common tax text would be 'Umsatzsteuer 19%'
				TaxText *string `json:"taxText,omitempty"`

				// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax type of the invoice.
				// There are four tax types:
				// 1. default - Umsatzsteuer ausweisen
				// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
				// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
				// 4. custom - Using custom tax set
				// 5. ss - Not subject to VAT according to §19 1 UStG
				// Tax rates are heavily connected to the tax type used.
				TaxType *InvoiceResetToOpen200ObjectsTaxType `json:"taxType,omitempty"`

				// TimeToPay The time the customer has to pay the invoice in days
				TimeToPay *string `json:"timeToPay,omitempty"`

				// Update Date of last invoice update
				Update *time.Time `json:"update,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseInvoiceSendByResponse parses an HTTP response from a InvoiceSendByWithResponse call
func ParseInvoiceSendByResponse(rsp *http.Response) (*InvoiceSendByResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvoiceSendByResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendInvoiceViaEMailResponse parses an HTTP response from a SendInvoiceViaEMailWithResponse call
func ParseSendInvoiceViaEMailResponse(rsp *http.Response) (*SendInvoiceViaEMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendInvoiceViaEMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelEmail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetInvoicePosResponse parses an HTTP response from a GetInvoicePosWithResponse call
func ParseGetInvoicePosResponse(rsp *http.Response) (*GetInvoicePosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicePosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelInvoicePosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrdersResponse parses an HTTP response from a GetOrdersWithResponse call
func ParseGetOrdersResponse(rsp *http.Response) (*GetOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelOrderResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContractNoteFromOrderResponse parses an HTTP response from a CreateContractNoteFromOrderWithResponse call
func ParseCreateContractNoteFromOrderResponse(rsp *http.Response) (*CreateContractNoteFromOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContractNoteFromOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePackingListFromOrderResponse parses an HTTP response from a CreatePackingListFromOrderWithResponse call
func ParseCreatePackingListFromOrderResponse(rsp *http.Response) (*CreatePackingListFromOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePackingListFromOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SaveOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrderResponse parses an HTTP response from a DeleteOrderWithResponse call
func ParseDeleteOrderResponse(rsp *http.Response) (*DeleteOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderByIdResponse parses an HTTP response from a GetOrderByIdWithResponse call
func ParseGetOrderByIdResponse(rsp *http.Response) (*GetOrderByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelOrderResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrderResponse parses an HTTP response from a UpdateOrderWithResponse call
func ParseUpdateOrderResponse(rsp *http.Response) (*UpdateOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrderTemplateResponse parses an HTTP response from a UpdateOrderTemplateWithResponse call
func ParseUpdateOrderTemplateResponse(rsp *http.Response) (*UpdateOrderTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelChangeLayoutResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDiscountsResponse parses an HTTP response from a GetDiscountsWithResponse call
func ParseGetDiscountsResponse(rsp *http.Response) (*GetDiscountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiscountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelDiscount `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderGetPdfResponse parses an HTTP response from a OrderGetPdfWithResponse call
func ParseOrderGetPdfResponse(rsp *http.Response) (*OrderGetPdfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderGetPdfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Base64encoded *bool               `json:"base64encoded,omitempty"`
			Content       *openapi_types.File `json:"content,omitempty"`
			Filename      *string             `json:"filename,omitempty"`
			MimeType      *string             `json:"mimeType,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderPositionsByIdResponse parses an HTTP response from a GetOrderPositionsByIdWithResponse call
func ParseGetOrderPositionsByIdResponse(rsp *http.Response) (*GetOrderPositionsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderPositionsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRelatedObjectsResponse parses an HTTP response from a GetRelatedObjectsWithResponse call
func ParseGetRelatedObjectsResponse(rsp *http.Response) (*GetRelatedObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelatedObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderSendByResponse parses an HTTP response from a OrderSendByWithResponse call
func ParseOrderSendByResponse(rsp *http.Response) (*OrderSendByResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderSendByResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendorderViaEMailResponse parses an HTTP response from a SendorderViaEMailWithResponse call
func ParseSendorderViaEMailResponse(rsp *http.Response) (*SendorderViaEMailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendorderViaEMailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Objects *[]ModelEmailOrder `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetOrderPositionsResponse parses an HTTP response from a GetOrderPositionsWithResponse call
func ParseGetOrderPositionsResponse(rsp *http.Response) (*GetOrderPositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrderPosResponse parses an HTTP response from a DeleteOrderPosWithResponse call
func ParseDeleteOrderPosResponse(rsp *http.Response) (*DeleteOrderPosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrderPosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderPositionByIdResponse parses an HTTP response from a GetOrderPositionByIdWithResponse call
func ParseGetOrderPositionByIdResponse(rsp *http.Response) (*GetOrderPositionByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderPositionByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelOrderPosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrderPositionResponse parses an HTTP response from a UpdateOrderPositionWithResponse call
func ParseUpdateOrderPositionResponse(rsp *http.Response) (*UpdateOrderPositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelOrderPosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPartsResponse parses an HTTP response from a GetPartsWithResponse call
func ParseGetPartsResponse(rsp *http.Response) (*GetPartsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelPart `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePartResponse parses an HTTP response from a CreatePartWithResponse call
func ParseCreatePartResponse(rsp *http.Response) (*CreatePartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModelPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPartByIdResponse parses an HTTP response from a GetPartByIdWithResponse call
func ParseGetPartByIdResponse(rsp *http.Response) (*GetPartByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelPart `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePartResponse parses an HTTP response from a UpdatePartWithResponse call
func ParseUpdatePartResponse(rsp *http.Response) (*UpdatePartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelPart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartGetStockResponse parses an HTTP response from a PartGetStockWithResponse call
func ParsePartGetStockResponse(rsp *http.Response) (*PartGetStockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartGetStockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Objects Stock amount
			Objects *int `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseForAccountNumberResponse parses an HTTP response from a ForAccountNumberWithResponse call
func ParseForAccountNumberResponse(rsp *http.Response) (*ForAccountNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForAccountNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseForAllAccountsResponse parses an HTTP response from a ForAllAccountsWithResponse call
func ParseForAllAccountsResponse(rsp *http.Response) (*ForAllAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForAllAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseForExpenseResponse parses an HTTP response from a ForExpenseWithResponse call
func ParseForExpenseResponse(rsp *http.Response) (*ForExpenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForExpenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseForRevenueResponse parses an HTTP response from a ForRevenueWithResponse call
func ParseForRevenueResponse(rsp *http.Response) (*ForRevenueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForRevenueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseForTaxRuleResponse parses an HTTP response from a ForTaxRuleWithResponse call
func ParseForTaxRuleResponse(rsp *http.Response) (*ForTaxRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForTaxRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ReceiptGuideDto `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportContactResponse parses an HTTP response from a ReportContactWithResponse call
func ParseReportContactResponse(rsp *http.Response) (*ReportContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportInvoiceResponse parses an HTTP response from a ReportInvoiceWithResponse call
func ParseReportInvoiceResponse(rsp *http.Response) (*ReportInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportOrderResponse parses an HTTP response from a ReportOrderWithResponse call
func ParseReportOrderResponse(rsp *http.Response) (*ReportOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportVoucherResponse parses an HTTP response from a ReportVoucherWithResponse call
func ParseReportVoucherResponse(rsp *http.Response) (*ReportVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Base64Encoded *bool   `json:"base64Encoded,omitempty"`
				Content       *string `json:"content,omitempty"`
				Filename      *string `json:"filename,omitempty"`
				Mimetype      *string `json:"mimetype,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateExportConfigResponse parses an HTTP response from a UpdateExportConfigWithResponse call
func ParseUpdateExportConfigResponse(rsp *http.Response) (*UpdateExportConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateExportConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelTagResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelTagCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagByIdResponse parses an HTTP response from a GetTagByIdWithResponse call
func ParseGetTagByIdResponse(rsp *http.Response) (*GetTagByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelTagResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTagResponse parses an HTTP response from a UpdateTagWithResponse call
func ParseUpdateTagResponse(rsp *http.Response) (*UpdateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagRelationsResponse parses an HTTP response from a GetTagRelationsWithResponse call
func ParseGetTagRelationsResponse(rsp *http.Response) (*GetTagRelationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelTagCreateResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlaceholderResponse parses an HTTP response from a GetPlaceholderWithResponse call
func ParseGetPlaceholderResponse(rsp *http.Response) (*GetPlaceholderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaceholderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelTextparserFetchDictionaryEntriesByTypeResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBookkeepingSystemVersionResponse parses an HTTP response from a BookkeepingSystemVersionWithResponse call
func ParseBookkeepingSystemVersionResponse(rsp *http.Response) (*BookkeepingSystemVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BookkeepingSystemVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				Version *BookkeepingSystemVersion200ObjectsVersion `json:"version,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVouchersResponse parses an HTTP response from a GetVouchersWithResponse call
func ParseGetVouchersResponse(rsp *http.Response) (*GetVouchersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVouchersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelVoucherResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVoucherFactorySaveVoucherResponse parses an HTTP response from a VoucherFactorySaveVoucherWithResponse call
func ParseVoucherFactorySaveVoucherResponse(rsp *http.Response) (*VoucherFactorySaveVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoucherFactorySaveVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SaveVoucherResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseVoucherUploadFileResponse parses an HTTP response from a VoucherUploadFileWithResponse call
func ParseVoucherUploadFileResponse(rsp *http.Response) (*VoucherUploadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoucherUploadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Objects *struct {
				Content        *[]interface{} `json:"content,omitempty"`
				ContentHash    *string        `json:"contentHash,omitempty"`
				Filename       *string        `json:"filename,omitempty"`
				MimeType       *string        `json:"mimeType,omitempty"`
				OriginMimeType *string        `json:"originMimeType,omitempty"`
				Pages          *float32       `json:"pages,omitempty"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetVoucherByIdResponse parses an HTTP response from a GetVoucherByIdWithResponse call
func ParseGetVoucherByIdResponse(rsp *http.Response) (*GetVoucherByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoucherByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelVoucherResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateVoucherResponse parses an HTTP response from a UpdateVoucherWithResponse call
func ParseUpdateVoucherResponse(rsp *http.Response) (*UpdateVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelVoucherResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBookVoucherResponse parses an HTTP response from a BookVoucherWithResponse call
func ParseBookVoucherResponse(rsp *http.Response) (*BookVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BookVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalInformation *string    `json:"additionalInformation,omitempty"`
			AmmountPayed          *string    `json:"ammountPayed,omitempty"`
			BookingDate           *time.Time `json:"bookingDate,omitempty"`

			// Create Date of email creation
			Create     *time.Time `json:"create,omitempty"`
			CreditNote *struct {
				// Id The id of the voucher
				Id int `json:"id"`

				// ObjectName Internal object name which is 'Voucher'.
				ObjectName string `json:"objectName"`
			} `json:"creditNote,omitempty"`
			FromStatus *string `json:"fromStatus,omitempty"`
			Id         *string `json:"id,omitempty"`
			ObjectName *string `json:"objectName,omitempty"`

			// SevClient Client to which invoice belongs. Will be filled automatically
			SevClient *struct {
				// Id Unique identifier of the client
				Id int `json:"id"`

				// ObjectName Model name, which is 'SevClient'
				ObjectName string `json:"objectName"`
			} `json:"sevClient,omitempty"`
			ToStatus *string `json:"toStatus,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVoucherEnshrineResponse parses an HTTP response from a VoucherEnshrineWithResponse call
func ParseVoucherEnshrineResponse(rsp *http.Response) (*VoucherEnshrineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoucherEnshrineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *interface{} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseVoucherResetToDraftResponse parses an HTTP response from a VoucherResetToDraftWithResponse call
func ParseVoucherResetToDraftResponse(rsp *http.Response) (*VoucherResetToDraftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoucherResetToDraftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				// CostCentre Cost centre for the voucher
				CostCentre *struct {
					// Id Unique identifier of the cost centre
					Id string `json:"id"`

					// ObjectName Model name, which is 'CostCentre'
					ObjectName string `json:"objectName"`
				} `json:"costCentre,omitempty"`

				// Create Date of voucher creation
				Create *time.Time `json:"create,omitempty"`

				// CreateUser User who created the voucher. Will be filled automatically.
				CreateUser *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"createUser,omitempty"`

				// CreditDebit Defines if your voucher is a credit (C) or debit (D)
				CreditDebit *VoucherResetToDraft200ObjectsCreditDebit `json:"creditDebit"`

				// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
				Currency *string `json:"currency"`

				// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
				DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

				// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
				DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

				// Description The description of the voucher. Essentially the voucher number.
				Description *string `json:"description"`

				// Document The document of the voucher.
				Document *struct {
					// Id Unique identifier of the document
					Id string `json:"id"`

					// ObjectName Model name, which is 'Document'
					ObjectName string `json:"objectName"`
				} `json:"document"`

				// Enshrined Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
				Enshrined *time.Time `json:"enshrined,omitempty"`

				// Id The voucher id
				Id     *string `json:"id,omitempty"`
				MapAll *bool   `json:"mapAll,omitempty"`

				// ObjectName The voucher object name
				ObjectName *string `json:"objectName,omitempty"`

				// PaidAmount Amount which has already been paid for this voucher by the customer
				PaidAmount *float32 `json:"paidAmount"`

				// PayDate Needs to be timestamp or dd.mm.yyyy
				PayDate *time.Time `json:"payDate"`

				// PaymentDeadline Payment deadline of the voucher.
				PaymentDeadline *time.Time `json:"paymentDeadline"`

				// PropertyExchangeRate Defines the exchange rate
				PropertyExchangeRate *string `json:"propertyExchangeRate"`

				// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
				PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

				// RecurringEndDate The date when the recurring vouchers end being generated.<br>
				//     Necessary attribute for all recurring vouchers.
				RecurringEndDate *time.Time `json:"recurringEndDate"`

				// RecurringInterval The DateInterval in which recurring vouchers are generated.<br>
				//      Necessary attribute for all recurring vouchers.
				RecurringInterval *VoucherResetToDraft200ObjectsRecurringInterval `json:"recurringInterval"`

				// RecurringLastVoucher The date when the last voucher was generated.
				RecurringLastVoucher *time.Time `json:"recurringLastVoucher"`

				// RecurringNextVoucher The date when the next voucher should be generated.<br>
				//      Necessary attribute for all recurring vouchers.
				RecurringNextVoucher *time.Time `json:"recurringNextVoucher"`

				// RecurringStartDate The date when the recurring vouchers start being generated.<br>
				//      Necessary attribute for all recurring vouchers.
				RecurringStartDate *time.Time `json:"recurringStartDate"`

				// SevClient Client to which voucher belongs. Will be filled automatically
				SevClient *struct {
					// Id Unique identifier of the client
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevClient'
					ObjectName string `json:"objectName"`
				} `json:"sevClient,omitempty"`
				Status *interface{} `json:"status,omitempty"`

				// SumDiscounts Sum of all discounts in the voucher
				SumDiscounts *string `json:"sumDiscounts,omitempty"`

				// SumDiscountsForeignCurrency Discounts sum of the voucher in the foreign currency
				SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

				// SumGross Gross sum of the voucher
				SumGross *string `json:"sumGross,omitempty"`

				// SumGrossAccounting Gross accounting sum of the voucher. Is usually the same as sumGross
				SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

				// SumNet Net sum of the voucher
				SumNet *string `json:"sumNet,omitempty"`

				// SumNetAccounting Net accounting sum of the voucher. Is usually the same as sumNet
				SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

				// SumTax Tax sum of the voucher
				SumTax *string `json:"sumTax,omitempty"`

				// SumTaxAccounting Tax accounting sum of the voucher. Is usually the same as sumTax
				SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

				// Supplier The contact used in the voucher as a supplier.<br>
				// If you don't have a contact as a supplier, you can set this object to null.
				Supplier *struct {
					// Id Unique identifier of the contact
					Id string `json:"id"`

					// ObjectName Model name, which is 'Contact'
					ObjectName string `json:"objectName"`
				} `json:"supplier"`

				// SupplierName The supplier name.<br>
				//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
				SupplierName *string `json:"supplierName"`

				// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				TaxRule *struct {
					// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
					//
					// Defines the vat-regulation.
					// For "Regelbesteuerung" it can be one of:
					//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
					//   - `2` - Ausfuhren (tax rates: 0.0)
					//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
					//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
					//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
					//
					// For small business owner ("Kleinunternehmer") it can be:
					//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
					Id VoucherResetToDraft200ObjectsTaxRuleId `json:"id"`

					// ObjectName Name of the object. Must always be TaxRule
					ObjectName VoucherResetToDraft200ObjectsTaxRuleObjectName `json:"objectName"`
				} `json:"taxRule,omitempty"`

				// TaxSet **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
				TaxSet *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name, which is 'TaxSet'
					ObjectName string `json:"objectName"`
				} `json:"taxSet"`

				// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax type of the voucher.
				// There are four tax types:
				// 1. default - Umsatzsteuer ausweisen
				// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
				// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
				// 4. custom - Using custom tax set
				// 5. ss - Not subject to VAT according to §19 1 UStG
				// Tax rates are heavily connected to the tax type used.
				TaxType *string `json:"taxType"`

				// Update Date of last voucher update
				Update *time.Time `json:"update,omitempty"`

				// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
				VoucherDate *time.Time `json:"voucherDate"`

				// VoucherType Type of the voucher. For more information on the different types, check
				//      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
				VoucherType *VoucherResetToDraft200ObjectsVoucherType `json:"voucherType"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseVoucherResetToOpenResponse parses an HTTP response from a VoucherResetToOpenWithResponse call
func ParseVoucherResetToOpenResponse(rsp *http.Response) (*VoucherResetToOpenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoucherResetToOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *struct {
				// CostCentre Cost centre for the voucher
				CostCentre *struct {
					// Id Unique identifier of the cost centre
					Id string `json:"id"`

					// ObjectName Model name, which is 'CostCentre'
					ObjectName string `json:"objectName"`
				} `json:"costCentre,omitempty"`

				// Create Date of voucher creation
				Create *time.Time `json:"create,omitempty"`

				// CreateUser User who created the voucher. Will be filled automatically.
				CreateUser *struct {
					// Id Unique identifier of the user
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevUser'
					ObjectName string `json:"objectName"`
				} `json:"createUser,omitempty"`

				// CreditDebit Defines if your voucher is a credit (C) or debit (D)
				CreditDebit *VoucherResetToOpen200ObjectsCreditDebit `json:"creditDebit"`

				// Currency specifies which currency the voucher should have. Attention: If the currency differs from the default currency stored in the account, then either the "propertyForeignCurrencyDeadline" or "propertyExchangeRate" parameter must be specified. If both parameters are specified, then the "propertyForeignCurrencyDeadline" parameter is preferred
				Currency *string `json:"currency"`

				// DeliveryDate Needs to be provided as timestamp or dd.mm.yyyy
				DeliveryDate *time.Time `json:"deliveryDate,omitempty"`

				// DeliveryDateUntil Needs to be provided as timestamp or dd.mm.yyyy
				DeliveryDateUntil *time.Time `json:"deliveryDateUntil"`

				// Description The description of the voucher. Essentially the voucher number.
				Description *string `json:"description"`

				// Document The document of the voucher.
				Document *struct {
					// Id Unique identifier of the document
					Id string `json:"id"`

					// ObjectName Model name, which is 'Document'
					ObjectName string `json:"objectName"`
				} `json:"document"`

				// Enshrined Enshrined vouchers cannot be changed. Can only be set via [Voucher/{voucherId}/enshrine](#tag/Voucher/operation/voucherEnshrine). This operation cannot be undone.
				Enshrined *time.Time `json:"enshrined,omitempty"`

				// Id The voucher id
				Id     *string `json:"id,omitempty"`
				MapAll *bool   `json:"mapAll,omitempty"`

				// ObjectName The voucher object name
				ObjectName *string `json:"objectName,omitempty"`

				// PaidAmount Amount which has already been paid for this voucher by the customer
				PaidAmount *float32 `json:"paidAmount"`

				// PayDate Needs to be timestamp or dd.mm.yyyy
				PayDate *time.Time `json:"payDate"`

				// PaymentDeadline Payment deadline of the voucher.
				PaymentDeadline *time.Time `json:"paymentDeadline"`

				// PropertyExchangeRate Defines the exchange rate
				PropertyExchangeRate *string `json:"propertyExchangeRate"`

				// PropertyForeignCurrencyDeadline Defines the exchange rate day and and then the exchange rate is set from sevdesk. Needs to be provided as timestamp or dd.mm.yyyy
				PropertyForeignCurrencyDeadline *time.Time `json:"propertyForeignCurrencyDeadline"`

				// RecurringEndDate The date when the recurring vouchers end being generated.<br>
				//     Necessary attribute for all recurring vouchers.
				RecurringEndDate *time.Time `json:"recurringEndDate"`

				// RecurringInterval The DateInterval in which recurring vouchers are generated.<br>
				//      Necessary attribute for all recurring vouchers.
				RecurringInterval *VoucherResetToOpen200ObjectsRecurringInterval `json:"recurringInterval"`

				// RecurringLastVoucher The date when the last voucher was generated.
				RecurringLastVoucher *time.Time `json:"recurringLastVoucher"`

				// RecurringNextVoucher The date when the next voucher should be generated.<br>
				//      Necessary attribute for all recurring vouchers.
				RecurringNextVoucher *time.Time `json:"recurringNextVoucher"`

				// RecurringStartDate The date when the recurring vouchers start being generated.<br>
				//      Necessary attribute for all recurring vouchers.
				RecurringStartDate *time.Time `json:"recurringStartDate"`

				// SevClient Client to which voucher belongs. Will be filled automatically
				SevClient *struct {
					// Id Unique identifier of the client
					Id string `json:"id"`

					// ObjectName Model name, which is 'SevClient'
					ObjectName string `json:"objectName"`
				} `json:"sevClient,omitempty"`
				Status *interface{} `json:"status,omitempty"`

				// SumDiscounts Sum of all discounts in the voucher
				SumDiscounts *string `json:"sumDiscounts,omitempty"`

				// SumDiscountsForeignCurrency Discounts sum of the voucher in the foreign currency
				SumDiscountsForeignCurrency *string `json:"sumDiscountsForeignCurrency,omitempty"`

				// SumGross Gross sum of the voucher
				SumGross *string `json:"sumGross,omitempty"`

				// SumGrossAccounting Gross accounting sum of the voucher. Is usually the same as sumGross
				SumGrossAccounting *string `json:"sumGrossAccounting,omitempty"`

				// SumNet Net sum of the voucher
				SumNet *string `json:"sumNet,omitempty"`

				// SumNetAccounting Net accounting sum of the voucher. Is usually the same as sumNet
				SumNetAccounting *string `json:"sumNetAccounting,omitempty"`

				// SumTax Tax sum of the voucher
				SumTax *string `json:"sumTax,omitempty"`

				// SumTaxAccounting Tax accounting sum of the voucher. Is usually the same as sumTax
				SumTaxAccounting *string `json:"sumTaxAccounting,omitempty"`

				// Supplier The contact used in the voucher as a supplier.<br>
				// If you don't have a contact as a supplier, you can set this object to null.
				Supplier *struct {
					// Id Unique identifier of the contact
					Id string `json:"id"`

					// ObjectName Model name, which is 'Contact'
					ObjectName string `json:"objectName"`
				} `json:"supplier"`

				// SupplierName The supplier name.<br>
				//      The value you provide here will determine what supplier name is shown for the voucher in case you did not provide a supplier.
				SupplierName *string `json:"supplierName"`

				// TaxRule **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				TaxRule *struct {
					// Id **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
					//
					// Defines the vat-regulation.
					// For "Regelbesteuerung" it can be one of:
					//   - `1` - Umsatzsteuerpflichtige Umsätze (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "default"`
					//   - `2` - Ausfuhren (tax rates: 0.0)
					//   - `3` - Innergemeinschaftliche Lieferungen (tax rates: 0.0, 7.0, 19.0) - replaces `"taxType": "eu"`
					//   - `4` - Steuerfreie Umsätze §4 UStG (tax rates: 0.0)
					//   - `5` - Reverse Charge gem. §13b UStG (tax rates: 0.0)
					//
					// For small business owner ("Kleinunternehmer") it can be:
					//   - `11` - Steuer nicht erhoben nach §19UStG (tax rates: 0.0) - replaces `"taxType": "ss"`
					Id VoucherResetToOpen200ObjectsTaxRuleId `json:"id"`

					// ObjectName Name of the object. Must always be TaxRule
					ObjectName VoucherResetToOpen200ObjectsTaxRuleObjectName `json:"objectName"`
				} `json:"taxRule,omitempty"`

				// TaxSet **Use this in sevdesk-Update 2.0 (replaces taxType / taxSet).**
				//
				// Tax set of the voucher. Needs to be added if you chose the taxType=custom.
				TaxSet *struct {
					// Id Unique identifier of the object
					Id string `json:"id"`

					// ObjectName Model name, which is 'TaxSet'
					ObjectName string `json:"objectName"`
				} `json:"taxSet"`

				// TaxType **Use this in sevdesk-Update 1.0 (instead of taxRule).**
				//
				// Tax type of the voucher.
				// There are four tax types:
				// 1. default - Umsatzsteuer ausweisen
				// 2. eu - Steuerfreie innergemeinschaftliche Lieferung (Europäische Union)
				// 3. noteu - Steuerschuldnerschaft des Leistungsempfängers (außerhalb EU, z. B. Schweiz)
				// 4. custom - Using custom tax set
				// 5. ss - Not subject to VAT according to §19 1 UStG
				// Tax rates are heavily connected to the tax type used.
				TaxType *string `json:"taxType"`

				// Update Date of last voucher update
				Update *time.Time `json:"update,omitempty"`

				// VoucherDate Needs to be provided as timestamp or dd.mm.yyyy
				VoucherDate *time.Time `json:"voucherDate"`

				// VoucherType Type of the voucher. For more information on the different types, check
				//      <a href='#tag/Voucher/Types-and-status-of-vouchers'>this</a>
				VoucherType *VoucherResetToOpen200ObjectsVoucherType `json:"voucherType"`
			} `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVoucherPositionsResponse parses an HTTP response from a GetVoucherPositionsWithResponse call
func ParseGetVoucherPositionsResponse(rsp *http.Response) (*GetVoucherPositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoucherPositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Objects *[]ModelVoucherPosResponse `json:"objects,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
